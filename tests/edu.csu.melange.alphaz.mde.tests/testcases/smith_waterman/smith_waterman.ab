int w(int, int);
//Use the following for verify-rand, remove mods for real input 
//int w(int a, int b) {
//	return W[a%5][b%5];
//}

//max(0, H[i-1,j-1] + w(A[i], B[j]), H[i-1,j] + w(A[i],4), H[i,j-1] + w(4, B[j])); 

affine smith_waterman {M,N|N>2 && M>2}
input
	int A {i|0<=i<M};
	int B {j|0<=j<N};
output
	int score {i,j|i==M && j==N};
local 
	int H {i,j|0<=i<M && 0<=j<N};
let
	H[i,j] = case
				{|i == 0} || {|j == 0} : 0;
				{|i > 0 && j > 0} : max(0, H[i-1,j-1] + w(A[i], B[j]), H[i-1,j] + w(A[i],4), H[i,j-1] + w(4, B[j]));
			esac;
			
	score[i,j] = H[i-1,j-1];
.

//for debugging
/*
affine smith_waterman {M,N|N>2 && M>2}
input
	int A {i|0<=i<M};
	int B {j|0<=j<N};
output
	int score {i,j|i==M && j==N};
	int Hout {i,j|0<=i<M && 0<=j<N};
local 
	int H {i,j|0<=i<M && 0<=j<N};
let
	H[i,j] = case
				{|i == 0} || {|j == 0} : 0;
				{|i > 0 && j > 0} : max(0, H[i-1,j-1] + w(A[i], B[j]), H[i-1,j] + w(A[i],4), H[i,j-1] + w(4, B[j])); 
			esac;
	Hout[i,j] = H[i,j];
			
	score[i,j] = H[i-1,j-1];
.*/