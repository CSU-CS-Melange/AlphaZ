// Serialized LU decomposition with output variable localized 
// SetMemoryMap("LU_decom", "LU", "(N,i,j,k->N,i,j)", "0,0");
//embedded outputs version
affine lud {N|1<N}
input
   double A {i,j|0<=i<N && 0<=j<N};
output
   double LU {i,j,k|0<=i<N && 0<=j<N && k==N};
local
   double F {i,j,k|0<=i<N && 0<=j<N && 0<=k && k<=i && k<=j+1 };
let
   F = case
          {i,j,k|k==0} : (i,j,k->i,j)@A;
          {i,j,k|k>0 && k==j+1} : (i,j,k->i,j,k-1)@F / (i,j,k->j,j,j)@F;
          {i,j,k|k>0 && k<j+1}: (i,j,k->i,j,k-1)@F - (i,j,k->i,k-1,k)@F * (i,j,k->k-1,j,k-1)@F;
         esac;

   LU = case
           {i,j,k|i<=j} : (i,j,k->i,j,i)@F;
           {i,j,k|i>j}  : (i,j,k->i,j,j+1)@F;
        esac;


.
