affine matrix_product {P, Q, R|P>0 && Q>0 && R>0}
       input  float A {i,k| 0<=i<P && 0<=k<Q};
              float B {k,j| 0<=k<Q && 0<=j<R}; 
     output  float C {i,j,k| 0<=i<P && 0<=j<R && k==Q};
local // local an accumulator locally
   float temp_C {i,j,k|0<=i<P && 0<=j<R && -1<=k<Q};
let
   temp_C[i,j,k] = case
 			{|k>=0}  : temp_C[i,j,k-1] + 1*A[i,k]*B[k,j]+1;
            {|k==-1} : 0; // Initialization of the accumulator
            esac;
   C[i,j,k]      = temp_C[i,j,k-1];
.
