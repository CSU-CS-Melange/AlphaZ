affine TwoRecur {N | N > 2}
input
	int A {i | 0 <= i < N};
	int B {i | 0 <= i < N};
output
	int C {i | 0 <= i < N};
	int D {i | 0 <= i < N};
let
	C[i] = case
			{|i == 0}: A[0];
			{|i == 1}: A[1];
			{|i > 1}: C[i-1] + C[i-2] + A[i];
			esac;
	
	D[i] = case
			{|i == 0}: A[0];
			{|i == 1}: A[1]/B[1];
			{|i > 1}: 2*D[i-1] + B[i]*D[i-2] + A[i];
		   esac;
.