affine SplitRecur {N | N > 1}
input
	int A {i| 0 <= i < 2N};
output
	int X {i| 0 <= i < 2N};
	int Y {i| 0 <= i < N};
let
	X[i] = case
			{|i==0}: A[0];
			{|0 < i < N}: X[i-1] + Y[i-1];
			{|i==N}: A[i-N];
			{|N < i < 2N}: X[i-1] + A[i-N];
			esac;
	
	Y[i] = case
			{|i==0}:A[0];
			{|0 < i < N}: Y[i-1] + X[i];
			esac;
.