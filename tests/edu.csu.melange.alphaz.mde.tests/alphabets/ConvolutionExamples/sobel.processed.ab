affine sobel {X,Y| X>=0 && Y>=0 }
	input
		float img {j0,j1| j0>=0 && -j0+X-1>=0 && -j1+Y-1>=0 && j1-2>=0 } || {j0,j1| j0>=0 && -j0+X-1>=0 && -j1+Y-3>=0 &&
		j1>=0 } || {j0,j1| j1-1==0 && j0>=0 && -j0+X-1>=0 } ;
		float tmp1 {j0,j1| j0-X>=0 && -j0+1>=0 && -j1+Y-1>=0 && j1>=0 } || {j0,j1| j0-X+2>=0 && -j0-1>=0 && -j1+Y-1>=0 &&
		j1>=0 } || {j0,j1| j1-Y+2==0 && -Y+1>=0 && j0>=0 && -j0+X-1>=0 } ;
	output
		float S3 {j,i1| i1==0 && j>=0 && -j+Y-1>=0 } ;
		float S4 {j,i| j>=0 && -j+Y-1>=0 && -i+X-2>=0 && i-1>=0 } ;
		float S5 {j,i1| i1==0 && j>=0 && -j+Y-1>=0 } ;
	local
	let
		S3[j,i1] = case
			{ | j==0 && X-2>=0 && Y-2>=0 } : ((2 * - img[j,i1+1]) + - img[j+1,i1+1]) ;
			{ | j==0 && X-1==0 && Y-2>=0 } : ((2 * - img[j,i1+1]) + tmp1[j+1,i1]) ;
			{ | X-2>=0 && j-1>=0 && -j+Y-2>=0 } : + ((2 * img[0,j-1]),(2 * - img[0,j+1]),img[1,j-1],- img[1,j+1]) ;
			{ | X-1==0 && j-1>=0 && -j+Y-2>=0 } : + ((2 * img[0,j-1]),(2 * - img[0,j+1]),tmp1[1,j]) ;
			{ | j-1==0 && Y-2==0 && X-2>=0 } : ((2 * - img[i1,1]) + - img[i1+1,1]) ;
			{ | j-Y+1==0 && X-2>=0 && Y-3>=0 } : + ((2 * img[i1,Y-3]),(2 * - img[i1,Y-1]),img[i1+1,Y-3],- img[i1+1,Y-1]) ;
			{ | j==0 && Y-1==0 && X-2>=0 } : ((2 * tmp1[i1,Y-2]) + tmp1[i1+1,Y-2]) ;
			{ | j-1==0 && Y-2==0 && X-1==0 } : ((2 * - img[i1,1]) + tmp1[1,j]) ;
			{ | j-Y+1==0 && X-1==0 && Y-3>=0 } : + ((2 * img[i1,Y-3]),(2 * - img[i1,Y-1]),tmp1[1,j]) ;
			{ | j==0 && Y-1==0 && X-1==0 } : ((2 * tmp1[i1,Y-2]) + tmp1[1,j]) ;
			{ | X==0 } : ((2 * tmp1[0,j]) + tmp1[1,j]) ;
		esac;
		S4[j,i] = case
			{ | j==0 && Y-2>=0 } : + (- img[i-1,1],(2 * - img[i,1]),- img[i+1,1]) ;
			{ | -j+Y-2>=0 && j-1>=0 } : + (img[i-1,j-1],- img[i-1,j+1],(2 * img[i,j-1]),(2 * - img[i,j+1]),img[i+1,j-1],-
			img[i+1,j+1]) ;
			{ | j-1==0 && Y-2==0 } : + (- img[i-1,1],(2 * - img[i,1]),- img[i+1,1]) ;
			{ | j-Y+1==0 && Y-3>=0 } : + (img[i-1,Y-3],- img[i-1,Y-1],(2 * img[i,Y-3]),(2 * - img[i,Y-1]),img[i+1,Y-3],-
			img[i+1,Y-1]) ;
			{ | j==0 && Y-1==0 } : + (tmp1[i-1,Y-2],(2 * tmp1[i,Y-2]),tmp1[i+1,Y-2]) ;
		esac;
		S5[j,i1] = case
			{ | j==0 && X-2>=0 && Y-2>=0 } : (- img[X-2,i1+1] + (2 * - img[X-1,i1+1])) ;
			{ | X-2>=0 && j-1>=0 && -j+Y-2>=0 } : + (img[X-2,j-1],- img[X-2,j+1],(2 * img[X-1,j-1]),(2 * - img[X-1,j+1])) ;
			{ | j-1==0 && Y-2==0 && X-2>=0 } : (- img[X-2,1] + (2 * - img[X-1,1])) ;
			{ | j-Y+1==0 && X-2>=0 && Y-3>=0 } : + (img[X-2,Y-3],- img[X-2,Y-1],(2 * img[X-1,Y-3]),(2 * - img[X-1,Y-1])) ;
			{ | j==0 && Y-1==0 && X-2>=0 } : (tmp1[X-2,Y-2] + (2 * tmp1[X-1,Y-2])) ;
			{ | j==0 && X-1==0 && Y-2>=0 } : (tmp1[j-1,i1] + (2 * - img[j,i1+1])) ;
			{ | X-1==0 && j-1>=0 && -j+Y-2>=0 } : + (tmp1[X-2,j],(2 * img[X-1,j-1]),(2 * - img[X-1,j+1])) ;
			{ | j-1==0 && Y-2==0 && X-1==0 } : (tmp1[X-2,j] + (2 * - img[i1,1])) ;
			{ | j-Y+1==0 && X-1==0 && Y-3>=0 } : + (tmp1[X-2,j],(2 * img[i1,Y-3]),(2 * - img[i1,Y-1])) ;
			{ | j==0 && Y-1==0 && X-1==0 } : (tmp1[X-2,j] + (2 * tmp1[i1,Y-2])) ;
			{ | X==0 } : (tmp1[X-2,j] + (2 * tmp1[X-1,j])) ;
		esac;
.