affine sobel {X,Y| X>=0 && Y>=0 }
	input
		float img {j0,j1| j0>=0 && -j0+X-1>=0 && -j1+Y-1>=0 && j1-2>=0 } || {j0,j1| j0>=0 && -j0+X-1>=0 && -j1+Y-3>=0 &&
		j1>=0 } || {j0,j1| j1-1==0 && j0>=0 && -j0+X-1>=0 } ;
		float tmp1 {j0,j1| j0-X>=0 && -j0+1>=0 && -j1+Y-1>=0 && j1>=0 } || {j0,j1| j0-X+2>=0 && -j0-1>=0 && -j1+Y-1>=0 &&
		j1>=0 } || {j0,j1| j1-Y+2==0 && -Y+1>=0 && j0>=0 && -j0+X-1>=0 } ;
	output
	local
		float S0 {i| i>=0 && -i+X-1>=0 } ;
		float S1 {i,j| i>=0 && -i+X-1>=0 && -j+Y-2>=0 && j-1>=0 } ;
		float S2 {i| i>=0 && -i+X-1>=0 } ;
		float S3 {j| j>=0 && -j+Y-1>=0 } ;
		float S4 {j,i| j>=0 && -j+Y-1>=0 && -i+X-2>=0 && i-1>=0 } ;
		float S5 {j| j>=0 && -j+Y-1>=0 } ;
	let
		S0[i] = - img[i,1];
		S1[i,j] = (img[i,j-1] - img[i,j+1]);
		S2[i] = case
			{ | Y-2==0 } : S0[i] ;
			{ | Y-3>=0 } : S1[i,Y-2] ;
			{ | -Y+1>=0 } : tmp1[i,Y-2] ;
		esac;
		S3[j] = case
			{ | j==0 && X-2>=0 && Y-2>=0 } : ((2 * S0[0]) + S0[1]) ;
			{ | j==0 && X-1==0 && Y-2>=0 } : ((2 * S0[0]) + tmp1[1,j]) ;
			
			{ | X-2>=0 && j-1>=0 && -j+Y-2>=0 } : ((2 * S1[0,j]) + S1[1,j]) ;
			
			{ | X-1==0 && j-1>=0 && -j+Y-2>=0 } : ((2 * S1[0,j]) + tmp1[1,j]) ;
			{ | j-Y+1==0 && X-2>=0 } : ((2 * S2[0]) + S2[1]) ;
			{ | j-Y+1==0 && X-1==0 } : ((2 * S2[0]) + tmp1[1,j]) ;
			{ | X==0 } : ((2 * tmp1[0,j]) + tmp1[1,j]) ;
		esac;
		S4[j,i] = case
			{ | j==0 && Y-2>=0 } : + (S0[i-1],(2 * S0[i]),S0[i+1]) ;
			{ | -j+Y-2>=0 && j-1>=0 } : + (S1[i-1,j],(2 * S1[i,j]),S1[i+1,j]) ;
			{ | j-Y+1==0 } : + (S2[i-1],(2 * S2[i]),S2[i+1]) ;
		esac;
		S5[j] = case
			{ | j==0 && X-2>=0 && Y-2>=0 } : (S0[X-2] + (2 * S0[X-1])) ;
			
			{ | X-2>=0 && j-1>=0 && -j+Y-2>=0 } : (S1[X-2,j] + (2 * S1[X-1,j])) ;
			
			{ | j-Y+1==0 && X-2>=0 } : (S2[X-2] + (2 * S2[X-1])) ;
			{ | j==0 && X-1==0 && Y-2>=0 } : (tmp1[X-2,j] + (2 * S0[X-1])) ;
			{ | X-1==0 && j-1>=0 && -j+Y-2>=0 } : (tmp1[X-2,j] + (2 * S1[X-1,j])) ;
			{ | j-Y+1==0 && X-1==0 } : (tmp1[X-2,j] + (2 * S2[X-1])) ;
			{ | X==0 } : (tmp1[X-2,j] + (2 * tmp1[X-1,j])) ;
		esac;
.

