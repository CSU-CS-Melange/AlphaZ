/*

        U[x, y; t+1] = f * (
            s0 * U[x, y; t] +
            s1 * (U[x-1, y; t] + U[x+1, y; t] + U[x, y-1; t] + U[x, y+1; t]) +
            s2 * (U[x-1, y-1; t] + U[x+1, y-1; t] + U[x-1, y+1; t] + U[x+1, y+1; t]) +
            s4 * (U[x-2, y; t] + U[x+2, y; t] + U[x, y-2; t] + U[x, y+2; t]) +
            s5 * (
                U[x-2, y-1; t] + U[x-1, y-2; t] + U[x+1, y-2; t] + U[x+2, y-1; t] +
                U[x-2, y+1; t] + U[x-1, y+2; t] + U[x+1, y+2; t] + U[x+2, y+1; t]
            ) +
            s8 * (U[x-2, y-2; t] + U[x+2, y-2; t] + U[x-2, y+2; t] + U[x+2, y+2; t])
        );
 */

/**/
float expf(float);

affine blur_2d {TSTEPS,N,M| TSTEPS > 2 && N > 3 && M > 3}
input 
output
	double U {t,i,j|t==TSTEPS && 0<=i<N && 0<=j<M};
	double s0, s1, s2, s4, s5, s8, f;
local 
	double temp_U{t,i,j|0<=i<N && 0<=j<M && 0<=t<TSTEPS};
let
	s0 = expf( 0 * (1 / (8)));
   	s1 = expf(-1 * (1 / (8)));
    s2 = expf(-2 * (1 / (8)));
    s4 = expf(-4 * (1 / (8)));
    s5 = expf(-5 * (1 / (8)));
    s8 = expf(-8 * (1 / (8)));
    f = 1 / (s0 + 4 * (s1 + s2 + s4 + s8) + 8 * s5);
    
	temp_U[t,i,j] = case
						{|t == 0} : 2.0*[i];
						{|t > 0 && 2<=i<N-2 && 2<=j<M-2} : f*(s0*temp_U[t-1,i,j] + s1*(temp_U[t-1, i-1, j] +temp_U[t-1, i+1, j] + temp_U[t-1, i, j-1] + temp[t-1, i, j+1])
											+ s2*(temp_U[t-1, i-1, j-1] + temp_U[t-1, i+1, j-1] + temp_U[t-1, i-1 j+1] + temp_U[t-1, i+1, j+1])	
											+ s4*(temp_U[t-1, i-2, j] + temp_U[t-1, i+2, j] + temp_U[t-1, i, j-2] + temp_U[t-1, i, j+2])	
											+ s5*(temp_U[t-1, i-2, j-1] + temp_U[t-1, i-1, j-2] + temp_U[t-1, i+1, j-2] + temp_U[t-1, i+2, j-1]
											+     temp_U[t-1, i-2, j+1] + temp_U[t-1, i-1, j+2] + temp_U[t-1, i+1, j+2] + temp_U[t-1, i+2, j+1])
											+ s8*(temp_U[t-1, i-2, j-2] + temp_U[t-1, i+2, j-2] + temp_U[t-1, i-2, j+2] + temp_U[t-1, i+2, j+2]));
						{|t > 0 && 0<=i<=1 } || {|t > 0 && 0<=j<=1 } || {|t > 0 && N-2<=i<=N-1 } || {|t > 0 && M-2<=j<=M-1 } : temp_B[t-1,i,j];  
					esac; 

	U[t,i,j] = temp_U[t-1,i,j];
.

/**/
/*
//for writeC verify code
float expf(float);

affine blur_2d {TSTEPS,N,M| TSTEPS > 2 && N > 3 && M > 3}
input 
output
	double U {i,j|0<=i<N && 0<=j<M};
	double s0, s1, s2, s4, s5, s8, f;
local 
	double temp_U{t,i,j|0<=i<N && 0<=j<M && 0<=t<TSTEPS};
let
	s0 = expf( 0 * (1 / (8)));
   	s1 = expf(-1 * (1 / (8)));
    s2 = expf(-2 * (1 / (8)));
    s4 = expf(-4 * (1 / (8)));
    s5 = expf(-5 * (1 / (8)));
    s8 = expf(-8 * (1 / (8)));
    f = 1 / (s0 + 4 * (s1 + s2 + s4 + s8) + 8 * s5);
    
	temp_U[t,i,j] = case
						{|t == 0} : 2.0*[i];
						{|t > 0 && 2<=i<N-2 && 2<=j<M-2} : f*(s0*temp_U[t-1,i,j] + s1*(temp_U[t-1, i-1, j] +temp_U[t-1, i+1, j] + temp_U[t-1, i, j-1] + temp[t-1, i, j+1])
											+ s2*(temp_U[t-1, i-1, j-1] + temp_U[t-1, i+1, j-1] + temp_U[t-1, i-1 j+1] + temp_U[t-1, i+1, j+1])	
											+ s4*(temp_U[t-1, i-2, j] + temp_U[t-1, i+2, j] + temp_U[t-1, i, j-2] + temp_U[t-1, i, j+2])	
											+ s5*(temp_U[t-1, i-2, j-1] + temp_U[t-1, i-1, j-2] + temp_U[t-1, i+1, j-2] + temp_U[t-1, i+2, j-1]
											+     temp_U[t-1, i-2, j+1] + temp_U[t-1, i-1, j+2] + temp_U[t-1, i+1, j+2] + temp_U[t-1, i+2, j+1])
											+ s8*(temp_U[t-1, i-2, j-2] + temp_U[t-1, i+2, j-2] + temp_U[t-1, i-2, j+2] + temp_U[t-1, i+2, j+2]));
						{|t > 0 && 0<=i<=1 } || {|t > 0 && 0<=j<=1 } || {|t > 0 && N-2<=i<=N-1 } || {|t > 0 && M-2<=j<=M-1 } : temp_B[t-1,i,j];  
					esac; 

	U[t,i,j] = temp_U[TSTEPS-1,i,j];
.
*/
