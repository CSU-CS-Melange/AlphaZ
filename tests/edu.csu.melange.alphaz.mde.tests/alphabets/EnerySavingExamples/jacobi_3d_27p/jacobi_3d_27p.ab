  /* 
    const int BASE = 1024;
    const int ds = 1;
    const double alpha = 0.0876;
    const double beta = 0.0765;
    const double gamma = 0.0654;
    const double delta = 0.0543;
   
    for (int i = 0; i < Nz; ++i) {
        for (int j = 0; j < Ny; ++j) {
            for (int k = 0; k < Nx; ++ k) {
                if (i == 0 || i == Nz-1
                    || j == 0 || j == Ny-1
                    || k == 0 || k == Nx-1) {
                    pa(0, i, j, k) = pa(1, i, j, k) = 0;
                } else {
                    pa(0, i, j, k) = 1.0 * (rand() % BASE);
                    pa(1, i, j, k) = 0;
                }
                pb(0, i, j, k) = pa(0, i, j, k);
                pb(1, i, j, k) = 0;
            }
        }
    }

    Pochoir_Kernel_3D(fd_3D_fn, t, i, j, k)
        pa(t, i, j, k) = alpha * (pa(t-1, i, j, k))
                         + beta * (pa(t-1, i, j, k-1) + pa(t-1, i, j-1, k) +
                                   pa(t-1, i, j+1, k) + pa(t-1, i, j, k+1) +
                                   pa(t-1, i-1, j, k) + pa(t-1, i+1, j, k))
                         + gamma * (pa(t-1, i-1, j, k-1) + pa(t-1, i-1, j-1, k) +
                                    pa(t-1, i-1, j+1, k) + pa(t-1, i-1, j, k+1) +
                                    
                                    pa(t-1, i, j-1, k-1) + pa(t-1, i, j+1, k-1) +
                                    pa(t-1, i, j-1, k+1) + pa(t-1, i, j+1, k+1) +
                                    pa(t-1, i+1, j, k-1) + pa(t-1, i+1, j-1, k) +
                                    pa(t-1, i+1, j+1, k) + pa(t-1, i+1, j, k+1))
                         + delta * (pa(t-1, i-1, j-1, k-1) + pa(t-1, i-1, j+1, k-1) +
                                    pa(t-1, i-1, j-1, k+1) + pa(t-1, i-1, j+1, k+1) +
                                    pa(t-1, i+1, j-1, k-1) + pa(t-1, i+1, j+1, k-1) +
                                    pa(t-1, i+1, j-1, k+1) + pa(t-1, i+1, j+1, k+1));
    Pochoir_Kernel_End
*/

/**/
double rand();

affine jacobi_3d_27p {TSTEPS,N,M,K | TSTEPS > 2 && N > 3 && M > 3 && K > 3}
input 
output
	double B {t,i,j,k|0<=i<N && 0<=j<M && 0<=k<K && t==TSTEPS};
local 
	double temp_B {t,i,j,k|0<=i<N && 0<=j<M && 0<=k<K && 0<=t<TSTEPS};
let

	temp_B[t,i,j,k] = case
						{|i == 0} || {|i == N-1} || {|j == 0} || {|j == M-1} || {|k == 0} || {|k == K-1} :0;
						{|t== 0 && 1<=i<N-1 && 1<=j<M-1 && 1<=k<K-1} : 1.0*(rand()/1024);	//should be 1.0*(rand()%1024)
						{|t > 0 && 1<=i<N-1 && 1<=j<M-1 && 1<=k<K-1}  : 0.0876*temp_B[t-1,i,j,k] + 0.0765*(temp_B[t-1, i, j, k-1] + temp_B[t-1, i, j-1, k] + 
																	temp_B[t-1, i, j+1, k] + temp_B[t-1, i, j, k+1] + temp_B[t-1, i-1, j, k] + temp_B[t-1,i+1, j, k]) +
																	0.0654*(temp_B[t-1, i-1, j, k-1] + temp_B[t-1, i-1, j-1, k] + temp_B[t-1, i-1, j+1, k] + temp_B[t-1, i-1, j, k+1] +
																	temp_B[t-1, i, j-1, k-1] + temp_B[t-1, i, j+1, k-1] + temp_B[t-1, i, j-1, k+1] + temp_B[t-1, i, j+1, k+1] + 
																	temp_B[t-1, i+1, j, k-1] + temp_B[t-1, i+1, j-1, k] + temp_B[t-1, i+1, j+1, k] + pa[t-1, i+1, j, k+1]) +
																	0.0543*(temp_B[t-1, i-1, j-1, k-1] + temp_B[t-1, i-1, j+1, k] + temp_B[t-1, i-1, j-1, k+1] + temp_B[t-1, i-1, j+1, k+1] + 
																	temp_B[t-1, i+1, j-1, k-1] + temp_B[t-1, i+1, j+1, k-1] + temp_B[t-1, i+1, j-1, k+1] + temp_B[t-1, i+1, j+1, k+1]); 
					esac; 

	B[t,i,j,k] = temp_B[t-1,i,j,k]; 
.
/*

double rand();

affine jacobi_3d_27p {TSTEPS,N,M,K | TSTEPS > 2 && N > 3 && M > 3 && K > 3}
input 
output
	double B {i,j,k|0<=i<N && 0<=j<M && 0<=k<K};
local 
	double temp_B {t,i,j,k|0<=i<N && 0<=j<M && 0<=k<K && 0<=t<TSTEPS};
let

	temp_B[t,i,j,k] = case
						{|i == 0} || {|i == N-1} || {|j == 0} || {|j == M-1} || {|k == 0} || {|k == K-1} :0;
						{|t== 0 && 1<=i<N-1 && 1<=j<M-1 && 1<=k<K-1} : 1.0*(rand()/1024);	//should be 1.0*(rand()%1024)
						{|t > 0 && 1<=i<N-1 && 1<=j<M-1 && 1<=k<K-1}  : 0.0876*temp_B[t-1,i,j,k] + 0.0765*(temp_B[t-1, i, j, k-1] + temp_B[t-1, i, j-1, k] + 
																	temp_B[t-1, i, j+1, k] + temp_B[t-1, i, j, k+1] + temp_B[t-1, i-1, j, k] + temp_B[t-1,i+1, j, k]) +
																	0.0654*(temp_B[t-1, i-1, j, k-1] + temp_B[t-1, i-1, j-1, k] + temp_B[t-1, i-1, j+1, k] + temp_B[t-1, i-1, j, k+1] +
																	temp_B[t-1, i, j-1, k-1] + temp_B[t-1, i, j+1, k-1] + temp_B[t-1, i, j-1, k+1] + temp_B[t-1, i, j+1, k+1] + 
																	temp_B[t-1, i+1, j, k-1] + temp_B[t-1, i+1, j-1, k] + temp_B[t-1, i+1, j+1, k] + pa[t-1, i+1, j, k+1]) +
																	0.0543*(temp_B[t-1, i-1, j-1, k-1] + temp_B[t-1, i-1, j+1, k] + temp_B[t-1, i-1, j-1, k+1] + temp_B[t-1, i-1, j+1, k+1] + 
																	temp_B[t-1, i+1, j-1, k-1] + temp_B[t-1, i+1, j+1, k-1] + temp_B[t-1, i+1, j-1, k+1] + temp_B[t-1, i+1, j+1, k+1]); 
					esac; 

	B[t,i,j,k] = temp_B[TSTEPS-1,i,j,k]; 
.
*/