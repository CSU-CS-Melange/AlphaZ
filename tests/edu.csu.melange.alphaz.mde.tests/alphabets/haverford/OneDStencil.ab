affine OneDStencil {N,T | (N,T)>2}
input
   float Initial {i | 0<=i<N};
output
   float Final {i,t | 0<=i<N && t==T-1};
local
   float Intermediate {i,t | 0<=i<N && 0<=t<T};
let
   Intermediate[i,t] = case
      {| t==0} : Initial[i];
      {| t>0 && i==0} : (Intermediate[i,t-1] + Intermediate[i+1,t-1]) / 2.0;
      {| t>0 && i==N-1} : (Intermediate[i,t-1] + Intermediate[i-1,t-1]) / 2.0;
      {| t>0 && 0<i<N-1} : (Intermediate[i,t-1] + Intermediate[i-1,t-1] + Intermediate[i+1,t-1]) / 3.0;
   esac;
   Final[i,t] = Intermediate[i,t];
.