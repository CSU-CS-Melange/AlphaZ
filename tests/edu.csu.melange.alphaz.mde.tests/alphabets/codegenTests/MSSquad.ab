//MSS with quadratic complexity, transformed from cubic with SR.
//After the simplification, outer reduction (max) was decomposed and the simplified summation was inlined
//Following the inline, PermutationCaseReduce was applied to get statements with many equalities, which serves as a good test case 
affine MSSquad {N|N-3>= 0}
input
int A {i|i>= 0 && N-i-1>= 0};
output
int m {|};
local
int S {i,j|-i+j>= 0 && i>= 0 && N-j-1>= 0};
int Y {i|i>= 0 && N-i-1>= 0};
let
m[] = reduce(max, (j->), Y);
S[i,j] = case
{|-i+j== 0} : reduce(+, (i,j,k->i,j), {|-i+k== 0} : A[k]);
{|-i+j-1>= 0} : (reduce(+, (i,j,k->i,j), {|-j+k== 0} : A[k]) + S[i,j-1]);
esac;
Y[i] = case
{|i== 0} : reduce(max, (i,j->j), {|i== 0} : reduce(+, (i,j,k->i,j), {|k== 0} : A[k]));
{|i-1>= 0} : (reduce(max, (i,j->j), {|-i+j== 0} : reduce(+, (i,j,k->i,j), {|-i+k== 0} : A[k])) max reduce(max, (i,j->j), {|i>= 0 && -i+j-1>= 0} : (reduce(+, (i,j,k->i,j), {|-j+k== 0} : A[k]) + S[i,j-1])));
esac;
.