affine matrix_product_scop0 {M,N,P|N-1>= 0 && M-1>= 0}
input
int _intput_B {i,j|i>= 0 && M-1>= 0 && N-j-1>= 0 && j>= 0 && P-i-1>= 0};
int _intput_A {i,j|M-i-1>= 0 && i>= 0 && j>= 0 && N-1>= 0 && P-j-1>= 0};
output
int _output_res {i,j|M-i-1>= 0 && i>= 0 && N-j-1>= 0 && j>= 0};
int _output_s {|};
local
int _tmp_s_0 {i,j,k|M-i-1>= 0 && i>= 0 && N-j-1>= 0 && j>= 0 && P-k-1>= 0 && k>= 0};
int _tmp_s {i,j|M-i-1>= 0 && i>= 0 && N-j-1>= 0 && j>= 0};
let
_tmp_s = (i,j->)@0;
_tmp_s_0 = (case
{i,j,k|k-1>= 0} : (i,j,k->i,j,k-1)@_tmp_s_0;
{i,j,k|-k>= 0} : (i,j,k->i,j)@_tmp_s;
esac + ((i,j,k->i,k)@_intput_A * (i,j,k->k,j)@_intput_B));
_output_res = case
{i,j|P-1>= 0} : (i,j->i,j,P-1)@_tmp_s_0;
{i,j|-P>= 0} : (i,j->i,j)@_tmp_s;
esac;
_output_s = case
{|N-1>= 0 && M-1>= 0 && -P>= 0} : (->M-1,N-1)@_tmp_s;
{|N-1>= 0 && M-1>= 0 && P-1>= 0} : (->M-1,N-1,P-1)@_tmp_s_0;
esac;
.