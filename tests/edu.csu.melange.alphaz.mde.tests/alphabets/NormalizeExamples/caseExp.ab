affine CaseExpr {N | N > 1}
input
	int A {i | 0 <= i < N};
	int B {i | 0 <= i < N};
	int d {i | 0 <= i < 2N};
output
	int C {i | 0 <= i < 2N};
	int D {i | 0 <= i < 2N};
	int E {i | 0 <= i < N};
	int F {i, j | 0 <= i < 2N && 0 <= j < 2N};
	int G {i | 0 <= i < 6N};
//	int H {i | 0 <= i < N};
let
	C[i] = d[i] + case
				{|0 <= i < N}: A[i];
				{|N <= i < 2N}: B[i-N];
				esac;
				
	D[i] = -case
			{|0 <= i < N}: A[i];
			{|N <= i < 2N}: B[i-N];
			esac;
			
	E[i] = {|0 <= i < N}:(case
			{|0 <= i < N}: A[i];
			{|N <= i < 2N}: B[i-N];
			esac);
	F[i, j] = (i, j -> j, N-i)@case
							{|0 <= i < N}: A[i];
							{|N <= i < 2N}: B[i-N];
							esac;
							
////	H[i] = (i -> N - i)@case
////							{|0 <= i < N}: A[i];
//							{|N <= i < 2N}: B[i-N];
//							esac;	
	G[i] = case
			{|0 <= i < N}: A[i];
			case
				{|N <= i <2N}: B[i - N];
				{|2N <= i < 3N}: A[i - 2N];
			esac;
			case
				{|3N <= i < 4N}:d[i - 3N];
				{|4N <= i < 5N}:A[i - 4N];
			esac;
			{|5N <= i < 6N}: B[i - 5N];
			esac;
.