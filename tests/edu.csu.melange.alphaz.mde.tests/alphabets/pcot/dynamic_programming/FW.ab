// Author: Tomofumi Yuki

//Floyd-Warshall algorithm for computing shortest paths
affine FW {N|N>0}
	input
		//weight of the edge from node i to j
		// infinity if there is no edge
		int weight {i,j|0<=(i,j)<N};
	output
		//length of the shortest path from node i to j
		int shortestPaths {i,j|0<=(i,j)<N};
		
	local
		int paths {k,i,j|0<=(i,j)<N && 0<=k<=N};
	let
		paths[k,i,j] = case
				{|k==0} : weight[i,j];
				{|k>0}  : min(paths[k-1,i,j], paths[k-1,i,k-1] + paths[k-1,k-1,j]);
		esac;
		
		shortestPaths[i,j] = paths[N,i,j];
.
