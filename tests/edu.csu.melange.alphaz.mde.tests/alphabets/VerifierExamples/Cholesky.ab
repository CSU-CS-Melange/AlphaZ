float sqrt(float);

/*****************************************************************************/

affine Cholesky_reduce {N|N-3>= 0}
input
	float A {i,j | 0<=j<=i<N};
output
    float L {i,j | 0<=j<=i<N};
local
let
  	L[i,j] = 
		case
    		{|j== 0 && i== 0} 		: sqrt(A[i,j]);
    		{|-i+j== 0 && i-1>= 0}  : sqrt(A[i,j] - reduce(+, [k], {|k<j} : L[i,k]*L[j,k])); 
    		{|j== 0 && i-1>= 0} 	: A[i,j] / L[j,j];
    		{|j-1>= 0 && i-j-1>= 0} : (A[i,j] - reduce(+, [k], {|k<j} : L[i,k]*L[j,k])) / L[j,j];
		esac;
.

/*****************************************************************************/

affine Cholesky_normalized {N|N-3>= 0}
input
	float A {i,j | 0<=j<=i<N};
output
	float L {i,j | 0<=j<=i<N};
local
	float NR_L {i,j| i==j && 0<i<N};
	float NR_L_1 {i,j| 0<j<i<N};
let
L[i,j] = 
	case
		{|j== 0 && i== 0} 		: sqrt(A[i,j]);
		{|-i+j== 0 && i-1>= 0}  : sqrt((A[i,j] - NR_L[i,j]));
		{|j== 0 && i-1>= 0} 	: (A[i,j] / L[j,j]);
		{|j-1>= 0 && i-j-1>= 0} : ((A[i,j] - NR_L_1[i,j]) / L[j,j]);
	esac;
NR_L[i,j] = reduce(+, (i,j,k->i,j), {|i-k-1>= 0} : (L[i,k] * L[j,k]));
NR_L_1[i,j] = reduce(+, (i,j,k->i,j), {|j-k-1>= 0} : (L[i,k] * L[j,k]));
.

/*****************************************************************************/

affine Cholesky_normalized2 {N|N-3>= 0}
input
	float A {i,j | 0<=j<=i<N};
output
	float L {i,j | 0<=j<=i<N};
local
	float NR_L {i,j| 0<j<=i<N};
let
L[i,j] = 
	case
		{|j== 0 && i== 0} 		: sqrt(A[i,j]);
		{|-i+j== 0 && i-1>= 0}  : sqrt((A[i,j] - NR_L[i,j]));
		{|j== 0 && i-1>= 0} 	: (A[i,j] / L[j,j]);
		{|j-1>= 0 && i-j-1>= 0} : ((A[i,j] - NR_L[i,j]) / L[j,j]);
	esac;
NR_L[i,j] = reduce(+, (i,j,k->i,j), {|j-k-1>= 0} : (L[i,k] * L[j,k]));
.


/*****************************************************************************/

affine Cholesky_serialized {N|N-3>= 0}
input
	float A {i,j | 0<=j<=i<N};
output
	float L {i,j | 0<=j<=i<N};
local
	float SR_L {i,j,k| i==j && 0<=k<i<N};
	float SR_L_1 {i,j,k| 0<=k<j<i<N};
let
L[i,j] = 
	case
		{|j== 0 && i== 0} 		: sqrt(A[i,j]);
		{|-i+j== 0 && i-1>= 0}  : sqrt((A[i,j] - SR_L[i,j,i-1]));
		{|j== 0 && i-1>= 0} 	: (A[i,j] / L[j,j]);
		{|j-1>= 0 && i-j-1>= 0} : ((A[i,j] - SR_L_1[i,j,j-1]) / L[j,j]);
	esac;

SR_L[i,j,k] = 
	case
		{| k==0} : L[i,k] * L[j,k];
		{| k>0}: SR_L[i,j,k] + L[i,k] * L[j,k] ;
	esac;
	 
SR_L_1[i,j,k] = 
	case
		{| k==0} : L[i,k] * L[j,k];
		{| k>0}: SR_L_1[i,j,k] + L[i,k] * L[j,k] ;
	esac;
.



