affine BlockMM {n,m,b|n>=1 && m>=1 && b>=1}
input
	double A {ii,jj,i,j|ii>=0 && n>=ii+1 && jj>=0 && m>=jj+1 && i>=0 && b>=i+1 && j>=0 && b>=j+1 && n>=1 && m>=1 && b>=1};
	double B {ii,jj,i,j|ii>=0 && m>=ii+1 && jj>=0 && n>=jj+1 && i>=0 && b>=i+1 && j>=0 && b>=j+1 && n>=1 && m>=1 && b>=1};
output
	double C {ii,jj,i,j|ii>=0 && n>=ii+1 && jj>=0 && n>=jj+1 && i>=0 && b>=i+1 && j>=0 && b>=j+1 && n>=1 && m>=1 && b>=1};
local
	double CC {ii,jj,kk,i,j|ii>=0 && n>=ii+1 && jj>=0 && n>=jj+1 && kk>=0 && m>=kk+1 && i>=0 && b>=i+1 && j>=0 && b>=j+1 && n>=1 && m>=1 && b>=1};
	double temp_CC {ii,jj,kk,i,j|ii>=0 && n>=ii+1 && jj>=0 && n>=jj+1 && kk>=0 && m>=kk+1 && i>=0 && b>=i+1 && j>=0 && b>=j+1 && n>=1 && m>=1 && b>=1};
let
	temp_CC = case
				{ii,jj,kk,i,j|kk==0 && n>=1 && m>=1 && b>=1} : CC;
				{ii,jj,kk,i,j|n>=1 && m>=1 && b>=1 && kk>=1} : ((ii,jj,kk,i,j->ii,jj,kk-1,i,j)@temp_CC + CC);
			esac;
	C = (ii,jj,i,j->ii,jj,m-1,i,j)@temp_CC;
	CC = reduce(+, (ii,jj,kk,i,j,k->ii,jj,kk,i,j), ((ii,jj,kk,i,j,k->ii,kk,i,k)@A * (ii,jj,kk,i,j,k->kk,jj,k,j)@B));
.