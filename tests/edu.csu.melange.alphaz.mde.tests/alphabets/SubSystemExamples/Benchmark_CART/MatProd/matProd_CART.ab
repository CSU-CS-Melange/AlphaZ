affine matProd_CART {Pb,Qb,Rb,Pl,Ql,Rl,b|Rl==0 && Ql==0 && Pl==0 && Pb>=1 && b>=1 && Qb>=1 && Rb>=1}
input
	float A_bl {iBl,kBl,iLoc,kLoc|Rl==0 && Ql==0 && Pl==0 && iBl>=0 && iLoc>=0 && kLoc>=0 && b>=iLoc+1 && b>=kLoc+1 && b>=1 && Pb>=iBl+1 && kBl>=0 && Qb>=kBl+1 && Pb>=1 && Qb>=1 && Rb>=1};
	float B_bl {kBl,jBl,kLoc,jLoc|Rl==0 && Ql==0 && Pl==0 && kBl>=0 && kLoc>=0 && jLoc>=0 && b>=kLoc+1 && b>=jLoc+1 && b>=1 && Qb>=kBl+1 && jBl>=0 && Rb>=jBl+1 && Pb>=1 && Qb>=1 && Rb>=1};
output
	float C_bl {iBl,jBl,iLoc,jLoc|Rl==0 && Ql==0 && Pl==0 && iBl>=0 && iLoc>=0 && jLoc>=0 && b>=iLoc+1 && b>=jLoc+1 && b>=1 && Pb>=iBl+1 && jBl>=0 && Rb>=jBl+1 && Pb>=1 && Qb>=1 && Rb>=1};
local
let
	C_bl[iBl,jBl,iLoc,jLoc] = reduce(+, (pBl,qBl,rBl,pLoc,qLoc,rLoc->pBl,qBl,pLoc,qLoc),
		{|Rl==0 && Ql==0 && Pl==0 && pLoc>=0 && qLoc>=0 && b>=pLoc+1 && b>=qLoc+1 && b>=1 && b>=rLoc+1 && rLoc>=0} : (A_bl[pBl,rBl,pLoc,rLoc] * B_bl[rBl,qBl,rLoc,qLoc])
	);
.