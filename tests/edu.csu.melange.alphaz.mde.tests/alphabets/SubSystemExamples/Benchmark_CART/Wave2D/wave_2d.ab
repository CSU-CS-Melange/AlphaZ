//float rand();

/**/
affine wave_2d {TSTEPS,N,M | TSTEPS > 2 && N > 6 && M > 6}
input 
	double A {i,j | 0<=i<N && 0<=j<M};
output
	double B {t,i,j|t == TSTEPS && 0<=i<N && 0<=j<M};
local 
	double temp_B {t,i,j|0<=i<N && 0<=j<M && 0<=t<TSTEPS};
let
	temp_B[t,i,j] = case
						{|t == 0} : A[i,j]; //2.0*[i];
						{|t > 0 && 3<=i<N-3 && 3<=j<M-3} : 0.077*(temp_B[t-1,i-3,j]+temp_B[t-1,i-2,j]+temp_B[t-1,i-1,j]+temp_B[t-1,i+3,j]
													+temp_B[t-1,i+2,j]+temp_B[t-1,i+1,j]+temp_B[t-1,i,j-3]+temp_B[t-1,i,j-2]
													+temp_B[t-1,i,j-1]+temp_B[t-1,i,j+3]+temp_B[t-1,i,j+2]+temp_B[t-1,i,j+1]
													+temp_B[t-1,i,j]);
						{|t > 0 && 0<=i<=2 } || {|t > 0 && 0<=j<=2 && i>2 }
							|| {|t > 0 && N-3<=i<=N-1 && j>2} || {|t > 0 && M-3<=j<=M-1 && 2<i<N-3 } : temp_B[t-1,i,j];  
					esac; 

	B[t,i,j] = temp_B[t-1,i,j]; 
.
/**/
/*
affine wave_2d {TSTEPS,N,M | TSTEPS > 2 && N > 6 && M > 6}
input 
output
	double B {i,j| 0<=i<N && 0 <=j<M};
local 
	double temp_B {t,i,j|0<=i<N && 0<=j<M && 0<=t<TSTEPS};
let
	temp_B[t,i,j] = case
						{|t == 0} : 2.0*[i];
						{|t > 0 && 3<=i<N-3 && 3<=j<M-3}  : 0.077*(temp_B[t-1,i-3,j]+temp_B[t-1,i-2,j]+temp_B[t-1,i-1,j]+temp_B[t-1,i+3,j]
													+temp_B[t-1,i+2,j]+temp_B[t-1,i+1,j]+temp_B[t-1,i,j-3]+temp_B[t-1,i,j-2]
													+temp_B[t-1,i,j-1]+temp_B[t-1,i,j+3]+temp_B[t-1,i,j+2]+temp_B[t-1,i,j+1]
													+temp_B[t-1,i,j]);
						{|t > 0 && 0<=i<=2 } || {|t > 0 && 0<=j<=2 } || {|t > 0 && N-3<=i<=N-1 } || {|t > 0 && M-3<=j<=M-1 } : temp_B[t-1,i,j];  
					esac; 

	B[i,j] = temp_B[TSTEPS-1,i,j]; 
.
*/
