affine BackwardSubst {b| b>0}
input
	double U {i,j | 0<=i<=j<b};
	double v {i | 0<=i<b};
output
	double x {i | 0<=i<b};
let
	x[i] = case
		{i | i==b-1} : v[i]/U[i,i];
		{i | 0<=i<b-1} : (v[i] - reduce(+, [k], {i,k | i<k<b}: U[i,k]*x[k]) )/U[i,i];
	esac;
.

affine matVectMult {b | b>0}
input
	double A {i,j | 0<=(i,j)<b};
	double v {i|0<=i<b};
output
	double r {i|0<=i<b};
let
	r[i] = reduce(+,[k],A[i,k]*v[k]);
.


affine BackwardSubst_SubSystem {Nb,Nl,b|Nl==0 && Nb>=1 && b>=1}
input
	double U_bl {iBl,jBl,iLoc,jLoc|jBl==iBl && Nl==0 && iBl>=0 && iLoc>=0 && Nb>=iBl+1 && jLoc>=iLoc && b>=jLoc+1}
		|| {iBl,jBl,iLoc,jLoc|Nl==0 && iBl>=0 && iLoc>=0 && jLoc>=0 && b>=iLoc+1 && b>=jLoc+1 && Nb>=jBl+1 && jBl>=iBl+1};
	double b_bl {iBl,iLoc|Nl==0 && iBl>=0 && iLoc>=0 && b>=iLoc+1 && b>=1 && Nb>=iBl+1 && Nb>=1};
output
	double x_bl {iBl,iLoc|Nl==0 && iBl>=0 && iLoc>=0 && b>=iLoc+1 && b>=1 && Nb>=iBl+1 && Nb>=1};
local
	double xTemp0 {iBl,iLoc|iBl==Nb-1 && 0<=iLoc<b};
	double xTemp1 {iBl,iLoc|0<=iBl<Nb-1 && 0<=iLoc<b};
	double tempRed {iBl,kBl,iLoc|0<=iBl<kBl<Nb && 0<=iLoc<b};
let
	x_bl[iBl,iLoc] = case
		{|iBl==Nb-1} : xTemp0;
		{|0<=iBl<Nb-1} : xTemp1;
	esac;
	
	use {iBl|iBl==Nb-1} BackwardSubst[b] ((iBl,iLoc,jLoc->iBl,iBl,iLoc,jLoc)@U_bl, b_bl) returns (xTemp0);
	use {iBl|0<=iBl<Nb-1} BackwardSubst[b] ((iBl,iLoc,jLoc->iBl,iBl,iLoc,jLoc)@U_bl, b_bl - reduce(+, (iBl,kBl,iLoc->iBl,iLoc), tempRed)) returns (xTemp1);
	
	use {iBl,kBl| 0<=iBl<kBl<Nb} matVectMult[b] ( (iBl,kBl,iLoc,kLoc->iBl,kBl,iLoc,kLoc)@U_bl, (iBl,kBl,iLoc->iBl,iLoc)@x_bl) returns (tempRed);
.

