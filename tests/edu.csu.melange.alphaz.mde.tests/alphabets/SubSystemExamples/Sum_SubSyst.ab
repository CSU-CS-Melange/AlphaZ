// Sum of the elements of a vector V
affine Sum {N| N>0}
	input
		int V { j | 1 <= j <= N};
	output
		int R {|};
	local
		int S { j | 1 <=j <= N};
	let
	S[j] = 
		case
			{| j==1 } : V[j];
			{| j>1  } : V[j] + S[j-1];
		esac;
	R[] = S[N];
.

// Sum over the elements of a 2D domain, local a sub-system
affine Toy {|}
	input
		int A { i,j | 1 <= i <= 4 && 1 <= j <= i+2 };
	output
		int SFinal {|};
	local
		int X { i | 1 <= i <= 4 };
	let
	use {i|1<=i<=4} Sum[i+2] (A) returns (X);	// Sums over all the columns
	use Sum[4] (X) returns (SFinal);			// "use {|} Sum[4] ..." also works
.

// TODO: the last use equation cannot be translated by AlphabetsToPolyhedralIR (because of a null DimensionsManager: no indexes or parameters)
