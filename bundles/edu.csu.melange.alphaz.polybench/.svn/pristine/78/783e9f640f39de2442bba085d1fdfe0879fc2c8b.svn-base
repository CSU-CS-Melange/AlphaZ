affine jacobi-1d-imper {tsteps,n| tsteps-5>=0 && n-5>=0 }
	given
		double A {i0| i0>=0 && -i0+n-1>=0 } ;
	using
		double S0 {i0,i1| i0-i1+n-2>=0 && -i0+i1-1>=0 && -i0+tsteps-1>=0 && i0-1>=0 } ;
		double S1 {i0,i1| i0-i1+n-2>=0 && -i0+i1-1>=0 && i0>=0 && -i0+tsteps-1>=0 } ;
		double S0_bound {i0,i1| i0==0 && i1-1>=0 && -i1+n-2>=0 } ;
	through
		S0[i0,i1] = case
			{ | i0-1>=0 && -i0+i1-2>=0 && i0-i1+n-3>=0 } : 0.33333 * (S1[i0-1,i1-2] + S1[i0-1,i1-1] + S1[i0-1,i1]) ;
			{ | -i0+i1-n+2==0 && i0-1>=0 } : 0.33333 * (S1[i0-1,i1-2] + S1[i0-1,i1-1] + A[i1-i0+1]) ;
			{ | -i0+i1-1==0 && i0-1>=0 } : 0.33333 * (A[i1-i0-1] + S1[i0-1,i1-1] + S1[i0-1,i1]) ;
			{ | i0==0 } : 0.33333 * (A[i1-i0-1] + A[i1-i0] + A[i1-i0+1]) ;
		esac;
		S1[i0,i1] = case
			{ | i0-1>=0 } : S0 ;
			{ | i0==0 } : S0_bound[0,-i0+i1] ;
		esac;
		S0_bound[i0,i1] = { | i0==0 } : 0.33333 * (A[i1-i0-1] + A[i1-i0] + A[i1-i0+1]);
.