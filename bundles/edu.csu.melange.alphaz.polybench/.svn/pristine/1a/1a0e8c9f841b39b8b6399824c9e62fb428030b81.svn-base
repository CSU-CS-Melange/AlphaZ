affine gemver {n| n-2>=0 }
	given
		double alpha { | } ;
		double beta { | } ;
		double A {i0,i1| -i0+n-1>=0 && i1>=0 && i0>=0 && -i1+n-1>=0 } ;
		double u1 {i0| -i0+n-1>=0 && i0>=0 } ;
		double u2 {i0| -i0+n-1>=0 && i0>=0 } ;
		double v1 {i0| -i0+n-1>=0 && i0>=0 } ;
		double v2 {i0| -i0+n-1>=0 && i0>=0 } ;
		double w {i0| -i0+n-1>=0 && i0>=0 } ;
		double x {i0| -i0+n-1>=0 && i0>=0 } ;
		double y {i0| -i0+n-1>=0 && i0>=0 } ;
		double z {i0| -i0+n-1>=0 && i0>=0 } ;
	using
		double S0 {i,j| -i+n-1>=0 && j>=0 && i>=0 && -j+n-1>=0 } ;
		double S1 {i0,i1| -i0+n-1>=0 && i1>=0 && i0>=0 && -i1+n-1>=0 } ;
		double S2 {i0,i1| i0-n+1==0 && -i1+n-1>=0 && i1>=0 } ;
		double S3 {i,j| -i+n-1>=0 && j>=0 && i>=0 && -j+n-1>=0 } ;
	through
		S0[i,j] = A + u1[i] * v1[j] + u2[i] * v2[j];
		S1[i0,i1] = case
			{ | i0-1>=0 } : S1[i0-1,i1] + beta * S0 * y[i0] ;
			{ | i0==0 } : x[i1] + beta * S0 * y[i0] ;
		esac;
		S2[i0,i1] = S1[i0,i1] + z[i1];
		S3[i,j] = case
			{ | j-1>=0 } : S3[i,j-1] + alpha * S0 * S2[n-1,j] ;
			{ | j==0 } : w[i] + alpha * S0 * S2[n-1,j] ;
		esac;
.