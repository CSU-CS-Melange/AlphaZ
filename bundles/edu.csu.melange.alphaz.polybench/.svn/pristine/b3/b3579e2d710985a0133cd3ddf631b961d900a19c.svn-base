affine scop_new {m,n,float_n|m-2>=0 && n-2>=0 && float_n-2>=0}
input
double data {i0,i1|i0>=0 && -i1+m-1>=0 && -i0+n-1>=0 && i1>=0};
output
local
double S0 {|};
double S1 {j|-j+m-1>=0 && j>=0};
double S2 {j,i|j>=0 && -j+m-1>=0 && -i+n-1>=0 && i>=0};
double S3 {j|-j+m-1>=0 && j>=0};
double S4 {j|-j+m-1>=0 && j>=0};
double S5 {j,i|j>=0 && -j+m-1>=0 && -i+n-1>=0 && i>=0};
double S6 {j|-j+m-1>=0 && j>=0};
double S7 {j|-j+m-1>=0 && j>=0};
double S8 {j|-j+m-1>=0 && j>=0};
double S9 {i,j|i>=0 && -j+m-1>=0 && -i+n-1>=0 && j>=0};
double S10 {i,j|i>=0 && -j+m-1>=0 && -i+n-1>=0 && j>=0};
double S11 {j1|-j1+m-2>=0 && j1>=0};
double S12 {j1,j2|j1>=0 && -j2+m-1>=0 && -j1+j2-1>=0};
double S13 {j1,j2,i|-j1+j2-1>=0 && -i+n-1>=0 && j1>=0 && i>=0 && -j2+m-1>=0};
double S14 {j1,j2|j1>=0 && -j2+m-1>=0 && -j1+j2-1>=0};
double S15 {|};
let
S0[] = 0.10000000149011612;
S1[j] = 0.0;
S2[j,i] = case
{|i==0} : (S1[j] + data[i,j]);
{|i-1>=0} : (S2[j,i-1] + data[i,j]);
esac;
S3[j] = (S2[j,n-1] / [float_n]);
S4[j] = 0.0;
S5[j,i] = case
{|i==0} : (S4[j] + ((data[i,j] - S3[j]) * (data[i,j] - S3[j])));
{|i-1>=0} : (S5[j,i-1] + ((data[i,j] - S3[j]) * (data[i,j] - S3[j])));
esac;
S6[j] = (S5[j,n-1] / [float_n]);
S7[j] = 1;
S8[j] = if ((S7 <= S0)) then (1.0) else (S7);
S9[i,j] = (data - S3[j]);
S10[i,j] = (S9 / (1 * S8[j]));
S11[j1] = 1.0;
S12[j1,j2] = 0.0;
S13[j1,j2,i] = case
{|i==0} : (S12[j1,j2] + (S10[i,j1] * S10[i,j2]));
{|i-1>=0} : (S13[j1,j2,i-1] + (S10[i,j1] * S10[i,j2]));
esac;
S14[j1,j2] = S13[j1,j2,n-1];
S15[] = 1.0;
.
