affine dynprog {tsteps,length| tsteps-2>=0 && length-2>=0 }
	given
		int W {i0,i1| -i0+i1-1>=0 && -i1+length-1>=0 && i0>=0 } ;
	using
		int S3 {i0,i1,i2,i3| -i1+tsteps-1>=0 && i1>=0 && -i2+i3-1>=0 && -i0+i2-1>=0 && -i3+length-1>=0 && i0>=0 } ;
		int S4 {i0,i1,i2,i3| -i2+i3-1==0 && -i1+tsteps-1>=0 && i1>=0 && -i0+i2>=0 && -i2+length-2>=0 && i0>=0 } ;
		int S5 {i0,i1,i2,i3| i3-length+1==0 && i2-length+2==0 && i0==0 && i1>=0 && -i1+tsteps-1>=0 } ;
		int S4_uni1A {i0,i1,i2,i3| -i1+tsteps-1>=0 && i1>=0 && -i2+i3>=0 && -i0+i2-1>=0 && -i3+length-1>=0 && i0>=0 } ;
	through
		S3[i0,i1,i2,i3] = case
			{ | -i0+i2-1==0 && i1==0 } :[0]+ S4_uni1A +[0];
			{ | -i0+i2-1==0 && i1-1>=0 } :[0]+ S4_uni1A +[0];
			{ | i1==0 && -i0+i2-2>=0 } : S3[i0,i1,i2-1,i3] + S4_uni1A +[0];
			{ | i1-1>=0 && -i0+i2-2>=0 } : S3[i0,i1,i2-1,i3] + S4_uni1A +[0];
		esac;
		S4[i0,i1,i2,i3] = case
			{ | -i0+i2==0 && i1==0 } :[0]+ W[i0,i0+1] ;
			{ | -i0+i2==0 && i1-1>=0 } :[0]+ W[i0,i0+1] ;
			{ | i1==0 && -i0+i2-1>=0 } : S3 + W[i0,i3] ;
			{ | -i0+i2-1>=0 && i1-1>=0 } : S3 + W[i0,i3] ;
		esac;
		S5[i0,i1,i2,i3] = case
			{ | i1==0 } :[0]+ S4 ;
			{ | i1-1>=0 } : S5[i0,i1-1,i2,i3] + S4 ;
		esac;
		S4_uni1A[i0,i1,i2,i3] = case
			{ | -i2+i3==0 } : S4[i0,i1,i2-1,i3] ;
			{ | -i2+i3-1>=0 } : S4_uni1A[i0,i1,i2,i3-1] ;
		esac;
.