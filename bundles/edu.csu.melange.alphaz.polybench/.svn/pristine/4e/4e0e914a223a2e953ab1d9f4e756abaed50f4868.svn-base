affine gemm {NI,NJ,NK|NI>0 && NJ>0 && NK>0}
given
	double alpha {i|i==0};
	double beta {i|i==0};
	double A {i,k|0<=i<NI && 0<=k<NK};
	double B {k,j|0<=k<NK && 0<=j<NJ};
	double C {i,j|0<=i<NI && 0<=j<NJ};
returns
	double resC {i,j,k|0<=i<NI && 0<=j<NJ && k==NK};
using
	double temp_C {i,j,k|0<=i<NI && 0<=j<NJ && 0<=k<=NK};
through
	temp_C[i,j,k] = case
						{|k==0} : beta[0] * C[i,j];
						{|k>0 } : temp_C[i,j,k-1] + alpha[0] * A[i,k-1] * B[k-1,j];
					esac;
	resC = temp_C;
	
.