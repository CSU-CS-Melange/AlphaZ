affine durbin {n| n-2>=0 }
	input
		double r {i0| -i0+n-1>=0 && i0>=0 } ;
	local
		double S3 {k| -k+n-1>=0 && k-1>=0 } ;
		double S5 {k,i| k-i-1>=0 && i>=0 && -k+n-1>=0 } ;
		double S6 {k| -k+n-1>=0 && k-1>=0 } ;
		double S7 {k,i| k-i-1>=0 && i>=0 && -k+n-1>=0 } ;
		double S9 {i| -i+n-1>=0 && i>=0 } ;
	let
		S3[k] = case
			{ | k-1==0 } :[1]- r[0] * r[0] *[1];
			{ | k-2>=0 } : S3[k-1] - S6[k-1] * S6[k-1] * S3[k-1] ;
		esac;
		S5[k,i] = case
			{ | i==0 && k-1==0 } : r[k] + r[k-i-1] * r[0] ;
			{ | i==0 && k-2>=0 } : r[k] + r[k-i-1] * S7[k-1,i] ;
			{ | k-i-2>=0 && i-1>=0 } : S5[k,i-1] + r[k-i-1] * S7[k-1,i] ;
			{ | -k+i+1==0 && k-2>=0 } : S5[k,i-1] + r[k-i-1] * S6[i] ;
		esac;
		S6[k] = - S5[k,k-1] * S3;
		S7[k,i] = case
			{ | i==0 && k-1==0 } : r[0] + S6[k] * r[0] ;
			{ | k-i-2>=0 && i-1>=0 } : S7[k-1,i] + S6[k] * S7[k-1,-i+k-1] ;
			{ | i==0 && k-2>=0 } : S7[k-1,i] + S6[k] * S6[k-1] ;
			{ | -k+i+1==0 && k-2>=0 } : S6[i] + S6[k] * S7[k-1,-i+k-1] ;
		esac;
		S9[i] = case
			{ | -i+n-2>=0 } : S7[n-1,i] ;
			{ | i-n+1==0 } : S6 ;
		esac;
.