affine covariance {m,n|(m,n)>1}
given
	double float_n;
	double data {i,j|0<=i<n && 0<=j<m};
returns
	double symmat {i,j|0<=(i,j)<m};
using
	double S0 {j|j>=0&&j<=-1+m};
	double S1 {j,i|i>=0&&i<=-1+n&&j>=0&&j<=-1+m};
	double S2 {j|j>=0&&j<=-1+m};
	double S3 {i,j|j>=0&&j<=-1+m&&i>=0&&i<=-1+n};
	double S4 {j1,j2|j2>=j1&&j2<=-1+m&&j1>=0&&j1<=-1+m};
	double S5 {j1,j2,i|i>=0&&i<=-1+n&&j2>=j1&&j2<=-1+m&&j1>=0&&j1<=-1+m};
through

	//writes to mean size:M
	S0[j] = 0.0;
	S1[j,i] = case
			{|i==0} : S0[j] + data[i,j];
			{|i>0}  : S1[j,i-1] + data[i,j];
		esac;
	S2[j] = S1[j,n-1] / float_n;

	//write to data size:MxN
	S3[i,j] = data[i,j] - S2[j];

	//writes to symmat size:MxM
	S4[j1,j2] = 0.0;
	S5[j1,j2,i] = case
			{|i==0} : S4[j1,j2] + S3[i,j1] * S3[i,j2];
			{|i> 0} : S5[j1,j2,i-1] + S3[i,j1] * S3[i,j2];
		esac;

	symmat[i,j] = case
			S5[i,j,n-1];
			{|i>j} : S5[j,i,n-1];
		esac;

.


/*
#pragma scop

  for (j = 0; j < m; j++)
    {
S0:   mean[j] = 0.0;
      for (i = 0; i < n; i++)
S1:        mean[j] += data[i][j];
S2:   mean[j] /= float_n;
    }


  for (i = 0; i < n; i++)
    for (j = 0; j < m; j++)
S3:     data[i][j] -= mean[j];


  for (j1 = 0; j1 < m; j1++)
    for (j2 = j1; j2 < m; j2++)
      {
S4:     symmat[j1][j2] = 0.0;
        for (i = 0; i < n; i++)
S5:        symmat[j1][j2] += data[i][j1] * data[i][j2];
S6:     symmat[j2][j1] = symmat[j1][j2];
      }
#pragma endscop
*/


