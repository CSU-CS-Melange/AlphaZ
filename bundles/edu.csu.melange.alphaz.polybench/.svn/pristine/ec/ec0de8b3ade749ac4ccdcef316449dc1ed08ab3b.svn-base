affine scop_new {ni,nj,nk,nl,nm|ni-2>=0 && nj-2>=0 && nk-2>=0 && nl-2>=0 && nm-2>=0}
input
double A {i0,i1|-i1+nk-1>=0 && i1>=0 && i0>=0 && -i0+ni-1>=0};
double B {i0,i1|-i1+nj-1>=0 && i1>=0 && i0>=0 && -i0+nk-1>=0};
double C {i0,i1|-i1+nm-1>=0 && i1>=0 && i0>=0 && -i0+nj-1>=0};
double D {i0,i1|-i1+nl-1>=0 && i1>=0 && i0>=0 && -i0+nm-1>=0};
output
local
double S0 {i,j|-j+nj-1>=0 && j>=0 && i>=0 && -i+ni-1>=0};
double S1 {i,j,k|j>=0 && -j+nj-1>=0 && i>=0 && -k+nk-1>=0 && -i+ni-1>=0 && k>=0};
double S2 {i,j|-j+nl-1>=0 && j>=0 && i>=0 && -i+nj-1>=0};
double S3 {i,j,k|j>=0 && -j+nl-1>=0 && i>=0 && -i+nj-1>=0 && -k+nm-1>=0 && k>=0};
double S4 {i,j|-j+nl-1>=0 && j>=0 && i>=0 && -i+ni-1>=0};
double S5 {i,j,k|j>=0 && -j+nl-1>=0 && -k+nj-1>=0 && i>=0 && -i+ni-1>=0 && k>=0};
let
S0[i,j] = [0];
S1[i,j,k] = case
{|k==0} : (S0[i,j] + (A[i,k] * B[k,j]));
{|k-1>=0} : (S1[i,j,k-1] + (A[i,k] * B[k,j]));
esac;
S2[i,j] = [0];
S3[i,j,k] = case
{|k==0} : (S2[i,j] + (C[i,k] * D[k,j]));
{|k-1>=0} : (S3[i,j,k-1] + (C[i,k] * D[k,j]));
esac;
S4[i,j] = [0];
S5[i,j,k] = case
{|k==0} : (S4[i,j] + (S1[i,k,nk-1] * S3[k,j,nm-1]));
{|k-1>=0} : (S5[i,j,k-1] + (S1[i,k,nk-1] * S3[k,j,nm-1]));
esac;
.
