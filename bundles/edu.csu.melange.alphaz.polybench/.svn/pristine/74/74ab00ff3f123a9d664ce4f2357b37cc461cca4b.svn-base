affine jacobi-2d-imper {tsteps,n| tsteps-2>=0 && n-2>=0 }
	given
		double A {i0,i1| i0-i1+n-2>=0 && i0+i1-1>=0 && i1>=0 && i0>=0 && -i0+n-1>=0 && -i1+n-1>=0 && -i0-i1+2n-3>=0 &&
		-i0+i1+n-2>=0 } ;
	using
		double S0 {i0,i1,i2| i1-i2+n-2>=0 && i0-i1+n-2>=0 && -i1+i2-1>=0 && -i0+i1-1>=0 && i0-1>=0 && -i0+tsteps-1>=0 } ;
		double S1 {i0,i1,i2| i1-i2+n-2>=0 && i0-i1+n-2>=0 && -i1+i2-1>=0 && -i0+i1-1>=0 && -i0+tsteps-1>=0 && i0>=0 } ;
		double S0_bound {i0,i1,i2| i0==0 && -i1+n-2>=0 && i1-i2+n-2>=0 && i1-1>=0 && -i1+i2-1>=0 } ;
	through
		S0[i0,i1,i2] = case
			{ | i1-i2+n-3>=0 && i0-i1+n-3>=0 && -i1+i2-2>=0 && i0-1>=0 && -i0+i1-2>=0 } : 0.2 * (S1[i0-1,i1-1,i2-1] +
			S1[i0-1,i1-1,i2-2] + S1[i0-1,i1-1,i2] + S1[i0-1,i1,i2] + S1[i0-1,i1-2,i2-2]) ;
			{ | -i0+i1-1==0 && i0-1>=0 && i0-i2+n-2>=0 && -i0+i2-3>=0 } : 0.2 * (S1[i0-1,i1-1,i2-1] + S1[i0-1,i1-1,i2-2] +
			S1[i0-1,i1-1,i2] + S1[i0-1,i1,i2] + A[i1-i0-1,i2-i1]) ;
			{ | -i0+i1-n+2==0 && -i0+i2-n>=0 && i0-1>=0 && i0-i2+2n-5>=0 } : 0.2 * (S1[i0-1,i1-1,i2-1] + S1[i0-1,i1-1,i2-2] +
			S1[i0-1,i1-1,i2] + A[i1-i0+1,i2-i1] + S1[i0-1,i1-2,i2-2]) ;
			{ | -i1+i2-n+2==0 && -i0+i1-2>=0 && i0-i1+n-3>=0 && i0-1>=0 } : 0.2 * (S1[i0-1,i1-1,i2-1] + S1[i0-1,i1-1,i2-2] +
			A[i1-i0,i2-i1+1] + S1[i0-1,i1,i2] + S1[i0-1,i1-2,i2-2]) ;
			{ | -i0+i2-n+1==0 && -i0+i1-1==0 && i0-1>=0 && n-4>=0 } : 0.2 * (S1[i0-1,i1-1,i2-1] + S1[i0-1,i1-1,i2-2] +
			A[i1-i0,i2-i1+1] + S1[i0-1,i1,i2] + A[i1-i0-1,i2-i1]) ;
			{ | -i0+i2-2n+4==0 && -i0+i1-n+2==0 && i0-1>=0 && n-4>=0 } : 0.2 * (S1[i0-1,i1-1,i2-1] + S1[i0-1,i1-1,i2-2] +
			A[i1-i0,i2-i1+1] + A[i1-i0+1,i2-i1] + S1[i0-1,i1-2,i2-2]) ;
			{ | -i1+i2-1==0 && -i0+i1-2>=0 && i0-i1+n-3>=0 && i0-1>=0 } : 0.2 * (S1[i0-1,i1-1,i2-1] + A[i1-i0,i2-i1-1] +
			S1[i0-1,i1-1,i2] + S1[i0-1,i1,i2] + S1[i0-1,i1-2,i2-2]) ;
			{ | -i0+i2-2==0 && -i0+i1-1==0 && i0-1>=0 && n-4>=0 } : 0.2 * (S1[i0-1,i1-1,i2-1] + A[i1-i0,i2-i1-1] +
			S1[i0-1,i1-1,i2] + S1[i0-1,i1,i2] + A[i1-i0-1,i2-i1]) ;
			{ | -i0+i2-n+1==0 && -i0+i1-n+2==0 && i0-1>=0 && n-4>=0 } : 0.2 * (S1[i0-1,i1-1,i2-1] + A[i1-i0,i2-i1-1] +
			S1[i0-1,i1-1,i2] + A[i1-i0+1,i2-i1] + S1[i0-1,i1-2,i2-2]) ;
			{ | -i0+i2-2==0 && -i0+i1-1==0 && n-3==0 && i0-1>=0 } : 0.2 * (S1[i0-1,i1-1,i2-1] + A[i1-i0,i2-i1-1] +
			A[i1-i0,i2-i1+1] + A[i1-i0+1,i2-i1] + A[i1-i0-1,i2-i1]) ;
			{ | i0==0 } : 0.2 * (A[i1-i0,i2-i1] + A[i1-i0,i2-i1-1] + A[i1-i0,i2-i1+1] + A[i1-i0+1,i2-i1] + A[i1-i0-1,i2-i1]) ;
		esac;
		S1[i0,i1,i2] = case
			{ | i0-1>=0 } : S0 ;
			{ | i0==0 } : S0_bound[0,-i0+i1,-i0+i2] ;
		esac;
		S0_bound[i0,i1,i2] = { | i0==0 } : 0.2 * (A[i1-i0,i2-i1] + A[i1-i0,i2-i1-1] + A[i1-i0,i2-i1+1] + A[i1-i0+1,i2-i1] +
		A[i1-i0-1,i2-i1]);
.