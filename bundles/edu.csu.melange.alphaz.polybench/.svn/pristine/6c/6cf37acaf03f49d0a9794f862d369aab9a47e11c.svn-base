affine floyd-warshall {n| n-2>=0 }
	given
		double path {i0,i1| -i0+n-1>=0 && i1>=0 && i0>=0 && -i1+n-1>=0 } ;
	using
		double S0 {k,i,j| -i+n-1>=0 && j>=0 && i>=0 && -j+n-1>=0 && -k+n-1>=0 && k>=0 } ;
		double S0_uni1A {k,i,j| -i+n-1>=0 && i>=0 && -j+n-1>=0 && -k+j>=0 && k>=0 } ;
		double S0_uni1B {k,i,j| -i+n-1>=0 && j>=0 && i>=0 && -k+n-1>=0 && k-j>=0 } ;
		double S0_uni2A {k,i,j| -i+n-1>=0 && j>=0 && -k+i>=0 && -j+n-1>=0 && k>=0 } ;
		double S0_uni2B {k,i,j| i>=0 && j>=0 && k-i>=0 && -j+n-1>=0 && -k+n-1>=0 } ;
	through
		S0[k,i,j] = case
			{ | k-1>=0 && k-j>=0 && -k+i+1>=0 && k-i>=0 && -k+j+1>=0 } : if S0[k-1,i,j] < S0_uni1A[k-1,i,j] + S0_uni2A[k-1,i,j]
			then S0[k-1,i,j] else S0_uni1A[k-1,i,j] + S0_uni2A[k-1,i,j] ;
			{ | k-j>=0 && k-i-2>=0 && -k+j+1>=0 } : if S0[k-1,i,j] < S0_uni1A[k-1,i,j] + S0_uni2B[k-1,i,j] then S0[k-1,i,j] else
			S0_uni1A[k-1,i,j] + S0_uni2B[k-1,i,j] ;
			{ | k-j-2>=0 && -k+i+1>=0 && k-i>=0 } : if S0[k-1,i,j] < S0_uni1B[k-1,i,j] + S0_uni2A[k-1,i,j] then S0[k-1,i,j] else
			S0_uni1B[k-1,i,j] + S0_uni2A[k-1,i,j] ;
			{ | k-j-2>=0 && k-i-2>=0 } : if S0[k-1,i,j] < S0_uni1B[k-1,i,j] + S0_uni2B[k-1,i,j] then S0[k-1,i,j] else
			S0_uni1B[k-1,i,j] + S0_uni2B[k-1,i,j] ;
			{ | -k+j+1>=0 && k-j>=0 && k-1>=0 && -k+i-1>=0 } : if S0[k-1,i,j] < S0_uni1A[k-1,i,j] + S0_uni2A then S0[k-1,i,j]
			else S0_uni1A[k-1,i,j] + S0_uni2A ;
			{ | k-j-2>=0 && -k+i-1>=0 } : if S0[k-1,i,j] < S0_uni1B[k-1,i,j] + S0_uni2A then S0[k-1,i,j] else S0_uni1B[k-1,i,j]
			+ S0_uni2A ;
			{ | k-i>=0 && k-1>=0 && -k+j-1>=0 && -k+i+1>=0 } : if S0[k-1,i,j] < S0_uni1A + S0_uni2A[k-1,i,j] then S0[k-1,i,j]
			else S0_uni1A + S0_uni2A[k-1,i,j] ;
			{ | -k+j-1>=0 && k-i-2>=0 } : if S0[k-1,i,j] < S0_uni1A + S0_uni2B[k-1,i,j] then S0[k-1,i,j] else S0_uni1A +
			S0_uni2B[k-1,i,j] ;
			{ | -k+j-1>=0 && -k+i-1>=0 && k-1>=0 } : if S0[k-1,i,j] < S0_uni1A + S0_uni2A then S0[k-1,i,j] else S0_uni1A +
			S0_uni2A ;
			{ | k==0 && i-1>=0 && j-1>=0 } : if path[i,j] < S0_uni1A + S0_uni2A then path[i,j] else S0_uni1A + S0_uni2A ;
			{ | i==0 && k==0 && j-1>=0 } : if path[i,j] < S0_uni1A + path[k,j] then path[i,j] else S0_uni1A + path[k,j] ;
			{ | j==0 && k==0 && i-1>=0 } : if path[i,j] < path[i,k] + S0_uni2A then path[i,j] else path[i,k] + S0_uni2A ;
			{ | j==0 && i==0 && k==0 } : if path[i,j] < path[i,k] + path[k,j] then path[i,j] else path[i,k] + path[k,j] ;
		esac;
		S0_uni1A[k,i,j] = case
			{ | -k+j==0 } : S0 ;
			{ | -k+j-1>=0 } : S0_uni1A[k,i,j-1] ;
		esac;
		S0_uni1B[k,i,j] = case
			{ | -k+j==0 } : S0 ;
			{ | k-j-1>=0 } : S0_uni1B[k,i,j+1] ;
		esac;
		S0_uni2A[k,i,j] = case
			{ | -k+i==0 } : S0 ;
			{ | -k+i-1>=0 } : S0_uni2A[k,i-1,j] ;
		esac;
		S0_uni2B[k,i,j] = case
			{ | -k+i==0 } : S0 ;
			{ | k-i-1>=0 } : S0_uni2B[k,i+1,j] ;
		esac;
.