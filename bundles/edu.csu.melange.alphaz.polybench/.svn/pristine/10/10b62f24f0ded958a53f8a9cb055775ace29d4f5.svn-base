affine lu {n| n-2>=0 }
	input
		double A {i0,i1| -i0+n-1>=0 && i1>=0 && i0>=0 && -i1+n-1>=0 } ;
	local
		double S0 {i0,i1,i2| -i0+i1-1==0 && -i0+i2-2>=0 && i0+1>=0 && -i2+n-1>=0 } ;
		double S1 {k,i,j| -k+i-1>=0 && -i+n-1>=0 && -j+n-1>=0 && -k+j-1>=0 && k>=0 } ;
	let
		S0[i0,i1,i2] = case
			{ | i0>=0 } : S1[i0,i1,i2] / S1[i0,i1,i0+1] ;
			{ | i0+1==0 } : A[i0+1,i2] / A[i0+1,i1] ;
		esac;
		S1[k,i,j] = case
			{ | k-1>=0 } : S1[k-1,i,j] - S1[k-1,i,k] * S0[k-1,k,j] ;
			{ | k==0 } : A[i,j] - A[i,k] * S0[k-1,k,j] ;
		esac;
.