affine reg_detect {niter,maxgrid,length| niter-2>=0 && maxgrid-2>=0 && length-2>=0 }
	input
		int sum_tang {i0,i1| i0>=0 && -i0+i1>=0 && -i1+maxgrid-1>=0 } ;
	local
		int S0 {t,j,i,cnt| -cnt+length-1>=0 && -t+niter-1>=0 && t>=0 && cnt>=0 && -j+i>=0 && -i+maxgrid-1>=0 && j>=0 } ;
		int S1 {i0,i1,i2,i3| i3==0 && i1>=0 && -i0+niter-1>=0 && i0>=0 && -i1+i2>=0 && -i2+maxgrid-1>=0 } ;
		int S2 {t,j,i,cnt| -cnt+length-1>=0 && -t+niter-1>=0 && t>=0 && cnt-1>=0 && -j+i>=0 && -i+maxgrid-1>=0 && j>=0 } ;
		int S3 {i0,i1,i2,i3| i3-length+1==0 && i1>=0 && -i0+niter-1>=0 && i0>=0 && -i1+i2>=0 && -i2+maxgrid-1>=0 } ;
		int S4 {i0,i1,i2,i3| i3-length+1==0 && i1==0 && -i2+maxgrid-1>=0 && i0>=0 && -i0+niter-1>=0 && i2>=0 } ;
		int S5 {i0,i1,i2,i3| i3-length+1==0 && i1-1>=0 && -i0+niter-1>=0 && i0>=0 && -i1+i2>=0 && -i2+maxgrid-1>=0 } ;
	let
		S0[t,j,i,cnt] = sum_tang[j,i];
		S1[i0,i1,i2,i3] = case
			{ | i0-1>=0 } : S0 ;
			{ | i0==0 } : S0 ;
		esac;
		S2[t,j,i,cnt] = case
			{ | cnt-1==0 && t==0 } : S1[t,j,i,cnt-1] + S0 ;
			{ | cnt-1==0 && t-1>=0 } : S1[t,j,i,cnt-1] + S0 ;
			{ | t==0 && cnt-2>=0 } : S2[t,j,i,cnt-1] + S0 ;
			{ | t-1>=0 && cnt-2>=0 } : S2[t,j,i,cnt-1] + S0 ;
		esac;
		S3[i0,i1,i2,i3] = case
			{ | i0-1>=0 } : S2 ;
			{ | i0==0 } : S2 ;
		esac;
		S4[i0,i1,i2,i3] = case
			{ | i0-1>=0 } : S3 ;
			{ | i0==0 } : S3 ;
		esac;
		S5[i0,i1,i2,i3] = case
			{ | i1-1==0 && i0==0 } : S4[i0,i1-1,i2-1,i3] + S3 ;
			{ | i1-1==0 && i0-1>=0 } : S4[i0,i1-1,i2-1,i3] + S3 ;
			{ | i0==0 && i1-2>=0 } : S5[i0,i1-1,i2-1,i3] + S3 ;
			{ | i0-1>=0 && i1-2>=0 } : S5[i0,i1-1,i2-1,i3] + S3 ;
		esac;
.