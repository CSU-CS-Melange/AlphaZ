affine seidel-2d {tsteps,n| tsteps-2>=0 && n-2>=0 }
	given
		double A {i0,i1| -i1+n-1>=0 && -i0+n-1>=0 && i1>=0 && i0>=0 && n-3>=0 } ;
	using
		double S0 {i0,i1,i2| i0-i1+n-2>=0 && i0+i1-i2+n-2>=0 && -i0+i1-1>=0 && -i0-i1+i2-1>=0 && -i0+tsteps-1>=0 && i0>=0 } ;
	through
		S0[i0,i1,i2] = case
			{ | i0-i1+n-3>=0 && i0+i1-i2+n-3>=0 && -i0+i1-2>=0 && i0-1>=0 && -i0-i1+i2-2>=0 } : (S0[i0,i1-1,i2-2] +
			S0[i0,i1-1,i2-1] + S0[i0,i1-1,i2] + S0[i0,i1,i2-1] + S0[i0-1,i1-1,i2-2] + S0[i0-1,i1-1,i2-1] + S0[i0-1,i1,i2-2] +
			S0[i0-1,i1,i2-1] + S0[i0-1,i1,i2]) / 9.0 ;
			{ | -i0+i1-n+2==0 && -2i0+i2-n>=0 && i0-1>=0 && 2i0-i2+2n-5>=0 } : (S0[i0,i1-1,i2-2] + S0[i0,i1-1,i2-1] +
			S0[i0,i1-1,i2] + S0[i0,i1,i2-1] + S0[i0-1,i1-1,i2-2] + S0[i0-1,i1-1,i2-1] + A[i1-i0+1,i2-i0-i1-1] +
			A[i1-i0+1,-i0-i1+i2] + A[i1-i0+1,i2-i0-i1+1]) / 9.0 ;
			{ | -i0-i1+i2-n+2==0 && -i0+i1-2>=0 && i0-i1+n-3>=0 && i0-1>=0 } : (S0[i0,i1-1,i2-2] + S0[i0,i1-1,i2-1] +
			A[i1-i0-1,i2-i0-i1+1] + S0[i0,i1,i2-1] + S0[i0-1,i1-1,i2-2] + A[i1-i0,i2-i0-i1+1] + S0[i0-1,i1,i2-2] +
			S0[i0-1,i1,i2-1] + A[i1-i0+1,i2-i0-i1+1]) / 9.0 ;
			{ | -2i0+i2-2n+4==0 && -i0+i1-n+2==0 && i0-1>=0 && n-4>=0 } : (S0[i0,i1-1,i2-2] + S0[i0,i1-1,i2-1] +
			A[i1-i0-1,i2-i0-i1+1] + S0[i0,i1,i2-1] + S0[i0-1,i1-1,i2-2] + A[i1-i0,i2-i0-i1+1] + A[i1-i0+1,i2-i0-i1-1] +
			A[i1-i0+1,-i0-i1+i2] + A[i1-i0+1,i2-i0-i1+1]) / 9.0 ;
			{ | i0==0 && i1-i2+n-3>=0 && -i1+i2-2>=0 && i1-2>=0 } : (S0[0,i1-i0-1,i2-2i0-2] + S0[0,i1-i0-1,i2-2i0-1] +
			S0[0,i1-i0-1,i2-2i0] + S0[0,i1-i0,i2-2i0-1] + A[i1-i0,-i0-i1+i2] + A[i1-i0,i2-i0-i1+1] + A[i1-i0+1,i2-i0-i1-1] +
			A[i1-i0+1,-i0-i1+i2] + A[i1-i0+1,i2-i0-i1+1]) / 9.0 ;
			{ | -i1+i2-n+2==0 && i0==0 && i1-2>=0 } : (S0[0,i1-i0-1,i2-2i0-2] + S0[0,i1-i0-1,i2-2i0-1] + A[i1-i0-1,i2-i0-i1+1] +
			S0[0,i1-i0,i2-2i0-1] + A[i1-i0,-i0-i1+i2] + A[i1-i0,i2-i0-i1+1] + A[i1-i0+1,i2-i0-i1-1] + A[i1-i0+1,-i0-i1+i2] +
			A[i1-i0+1,i2-i0-i1+1]) / 9.0 ;
			{ | -i0-i1+i2-1==0 && -i0+i1-2>=0 && i0-i1+n-3>=0 && i0-1>=0 } : (A[i1-i0-1,i2-i0-i1-1] + S0[i0,i1-1,i2-1] +
			S0[i0,i1-1,i2] + A[i1-i0,i2-i0-i1-1] + S0[i0-1,i1-1,i2-2] + S0[i0-1,i1-1,i2-1] + A[i1-i0+1,i2-i0-i1-1] +
			S0[i0-1,i1,i2-1] + S0[i0-1,i1,i2]) / 9.0 ;
			{ | -2i0+i2-n+1==0 && -i0+i1-n+2==0 && i0-1>=0 && n-4>=0 } : (A[i1-i0-1,i2-i0-i1-1] + S0[i0,i1-1,i2-1] +
			S0[i0,i1-1,i2] + A[i1-i0,i2-i0-i1-1] + S0[i0-1,i1-1,i2-2] + S0[i0-1,i1-1,i2-1] + A[i1-i0+1,i2-i0-i1-1] +
			A[i1-i0+1,-i0-i1+i2] + A[i1-i0+1,i2-i0-i1+1]) / 9.0 ;
			{ | -i1+i2-1==0 && i0==0 && i1-2>=0 } : (A[i1-i0-1,i2-i0-i1-1] + S0[0,i1-i0-1,i2-2i0-1] + S0[0,i1-i0-1,i2-2i0] +
			A[i1-i0,i2-i0-i1-1] + A[i1-i0,-i0-i1+i2] + A[i1-i0,i2-i0-i1+1] + A[i1-i0+1,i2-i0-i1-1] + A[i1-i0+1,-i0-i1+i2] +
			A[i1-i0+1,i2-i0-i1+1]) / 9.0 ;
			{ | -i0+i1-1==0 && i0-1>=0 && 2i0-i2+n-2>=0 && -2i0+i2-3>=0 } : (A[i1-i0-1,i2-i0-i1-1] + A[i1-i0-1,-i0-i1+i2] +
			A[i1-i0-1,i2-i0-i1+1] + S0[i0,i1,i2-1] + S0[i0-1,i1-1,i2-2] + S0[i0-1,i1-1,i2-1] + S0[i0-1,i1,i2-2] +
			S0[i0-1,i1,i2-1] + S0[i0-1,i1,i2]) / 9.0 ;
			{ | -2i0+i2-n+1==0 && -i0+i1-1==0 && i0-1>=0 && n-4>=0 } : (A[i1-i0-1,i2-i0-i1-1] + A[i1-i0-1,-i0-i1+i2] +
			A[i1-i0-1,i2-i0-i1+1] + S0[i0,i1,i2-1] + S0[i0-1,i1-1,i2-2] + A[i1-i0,i2-i0-i1+1] + S0[i0-1,i1,i2-2] +
			S0[i0-1,i1,i2-1] + A[i1-i0+1,i2-i0-i1+1]) / 9.0 ;
			{ | i1-1==0 && i0==0 && i2-3>=0 } : (A[i1-i0-1,i2-i0-i1-1] + A[i1-i0-1,-i0-i1+i2] + A[i1-i0-1,i2-i0-i1+1] +
			S0[0,i1-i0,i2-2i0-1] + A[i1-i0,-i0-i1+i2] + A[i1-i0,i2-i0-i1+1] + A[i1-i0+1,i2-i0-i1-1] + A[i1-i0+1,-i0-i1+i2] +
			A[i1-i0+1,i2-i0-i1+1]) / 9.0 ;
			{ | -2i0+i2-2==0 && -i0+i1-1==0 && i0-1>=0 && n-4>=0 } : (A[i1-i0-1,i2-i0-i1-1] + A[i1-i0-1,-i0-i1+i2] +
			A[i1-i0-1,i2-i0-i1+1] + A[i1-i0,i2-i0-i1-1] + S0[i0-1,i1-1,i2-2] + S0[i0-1,i1-1,i2-1] + A[i1-i0+1,i2-i0-i1-1] +
			S0[i0-1,i1,i2-1] + S0[i0-1,i1,i2]) / 9.0 ;
			{ | -2i0+i2-2==0 && -i0+i1-1==0 && n-3==0 && i0-1>=0 } : (A[i1-i0-1,i2-i0-i1-1] + A[i1-i0-1,-i0-i1+i2] +
			A[i1-i0-1,i2-i0-i1+1] + A[i1-i0,i2-i0-i1-1] + S0[i0-1,i1-1,i2-2] + A[i1-i0,i2-i0-i1+1] + A[i1-i0+1,i2-i0-i1-1] +
			A[i1-i0+1,-i0-i1+i2] + A[i1-i0+1,i2-i0-i1+1]) / 9.0 ;
			{ | i2-2==0 && i1-1==0 && i0==0 } : (A[i1-i0-1,i2-i0-i1-1] + A[i1-i0-1,-i0-i1+i2] + A[i1-i0-1,i2-i0-i1+1] +
			A[i1-i0,i2-i0-i1-1] + A[i1-i0,-i0-i1+i2] + A[i1-i0,i2-i0-i1+1] + A[i1-i0+1,i2-i0-i1-1] + A[i1-i0+1,-i0-i1+i2] +
			A[i1-i0+1,i2-i0-i1+1]) / 9.0 ;
		esac;
.