double sqrt (,double) ;
affine cholesky {n| n-2>=0 }
	given
		double A {i0,i1| -i0+i1>=0 && i0>=0 && -i1+n-1>=0 } ;
	using
		double S1 {i0,i1,i2| -i0+i2+1==0 && -i0+i1-1>=0 && -i1+n-1>=0 && i0>=0 } ;
		double S2 {i0,i1,i2| -i0+i2+1==0 && -i0+i1-1==0 && -i0+n-2>=0 && i0+1>=0 } ;
		double S4 {i,j,k| -i+j-1>=0 && k>=0 && -j+n-1>=0 && i-k-1>=0 } ;
		double S5 {i0,i1,i2| -i0+i2+1==0 && -i0+i1-1>=0 && -i1+n-1>=0 && i0>=0 } ;
	through
		S1[i0,i1,i2] = case
			{ | i0==0 } : A[i1,i1] - S5[i0,i1,i2] * S5[i0,i1,i2] ;
			{ | i0-1>=0 } : S1[i0-1,i1,i2-1] - S5[i0,i1,i2] * S5[i0,i1,i2] ;
		esac;
		S2[i0,i1,i2] = case
			{ | i0+1==0 } : 1.0 / sqrt (A[i0+1,i1]) ;
			{ | i0>=0 } : 1.0 / sqrt (S1[i0,i1,i2]) ;
		esac;
		S4[i,j,k] = case
			{ | k==0 } : A[i,j] - S5[k,j,k-1] * S5[k,i,k-1] ;
			{ | k-1>=0 } : S4[i,j,k-1] - S5[k,j,k-1] * S5[k,i,k-1] ;
		esac;
		S5[i0,i1,i2] = case
			{ | i0==0 } : A[i0,i1] * S2[i0-1,i0,i2-1] ;
			{ | i0-1>=0 } : S4[i0,i1,i2] * S2[i0-1,i0,i2-1] ;
		esac;
.