affine ludcmp {n| n-2>=0 }
	input
		double A {i0,i1| i0>=0 && i1>=0 && -i0+n>=0 && -i1+n>=0 } ;
		double b {i0| -i0+n>=0 && i0-1>=0 } ;
	local
		double S2 {i,j,k| -i+j-1>=0 && k>=0 && -j+n>=0 && i-k-1>=0 } ;
		double S3 {i0,i1,i2| -i0+i1-1==0 && -i0+i2-2>=0 && i0+1>=0 && -i2+n>=0 } ;
		double S5 {i,j,k| -i+j-1>=0 && k>=0 && -j+n>=0 && i-k>=0 } ;
		double S6 {i0,i1,i2| -i0+i2==0 && -i0+i1-1>=0 && -i1+n>=0 && i0>=0 } ;
		double S9 {i0,i1,i2| -i0+i1-1==0 && -i0+i2-2>=0 && i0+1>=0 && -i2+n>=0 } ;
		double S10 {i0,i1,i2| -i0+i2-2==0 && -i0+i1-1==0 && -i0+n-2>=0 && i0+1>=0 } ;
		double S12 {i0,i1,i2| -i0+i2-2==0 && -i0+i1-1==0 && -i0+n-3>=0 && i0+2>=0 } ;
		double S13 {i0,i1,i2| -i0+i2==0 && -i0+i1-2>=0 && -i1+n>=0 && i0+1>=0 } ;
		double S14 {i0,i1,i2| -i0+i2==0 && -i0+i1-1==0 && -i0+n-2>=0 && i0+1>=0 } ;
	let
		S2[i,j,k] = case
			{ | k==0 } : A[j,i] - S3[k-1,k,j] * A[k,i] ;
			{ | k-1>=0 } : S2[i,j,k-1] - S3[k-1,k,j] * S6[k-1,i,k-1] ;
		esac;
		S3[i0,i1,i2] = case
			{ | i2-1==0 && i0+1==0 } : A[i0+2,i1] / A[i0+1,i1] ;
			{ | i0+1==0 && i2-2>=0 } : A[i2,i1] / A[i0+1,i1] ;
			{ | i0>=0 } : S2[i0+1,i2,i0] / S6[i0,i1,i0] ;
		esac;
		S5[i,j,k] = case
			{ | k==0 && j-1==0 && i==0 } : A[i+1,j] - S3[i-1,j-1,k+1] * A[i,j] ;
			{ | k==0 && -i+j-1==0 && i-1>=0 } : A[i+1,j] - S3[k-1,k,i+1] * A[k,j] ;
			{ | k==0 && -i+j-2>=0 && i-1>=0 } : A[i+1,j] - S3[k-1,k,i+1] * A[k,j] ;
			{ | k==0 && i==0 && j-2>=0 } : A[i+1,j] - S3[i-1,k,k+1] * A[i,j] ;
			{ | i-k-1>=0 && k-1>=0 } : S5[i,j,k-1] - S3[k-1,k,i+1] * S6[k-1,j,k-1] ;
			{ | -i+k==0 && i-1>=0 } : S5[i,j,k-1] - S3[i-1,k,k+1] * S6[i-1,j,k-1] ;
		esac;
		S6[i0,i1,i2] = case
			{ | i1-1==0 && i0==0 } : S5[i0,i1,i2] ;
			{ | -i0+i1-2>=0 } : S5[i0,i1,i2] ;
			{ | -i0+i1-1==0 && i0-1>=0 } : S5[i0,i1,i2] ;
		esac;
		S9[i0,i1,i2] = case
			{ | i2-1==0 && i0+1==0 } : b[i0+2] - S3[i0,i1,i2] * 1.0 ;
			{ | i0+1==0 && i2-2>=0 } : b[i2] - S3[i0,i1,i2] * 1.0 ;
			{ | i0>=0 } : S9[i0-1,i1-1,i2] - S3[i0,i1,i2] * S10[i0-1,i1-1,i0+1] ;
		esac;
		S10[i0,i1,i2] = case
			{ | i0+1==0 } : S9[i0,i1,i2] ;
			{ | i0>=0 } : S9[i0,i1,i2] ;
		esac;
		S12[i0,i1,i2] = case
			{ | i0+2==0 } : 1.0 ;
			{ | i0+1>=0 } : S10[i0,i1,i2] ;
		esac;
		S13[i0,i1,i2] = case
			{ | i1-n==0 && i0-n+2==0 } : S12[i0-1,i1-2,i2+1] - S6[i0,i1,i2] * (S10[i0,i1-1,i2+2] / S6[i0+1,i1,i2+1]) ;
			{ | -i0+i1-2==0 && -i0+n-3>=0 && i0>=0 } : S12[i0-1,i1-2,i2+1] - S6[i0,i1,i2] * S14[i0+1,i1,i2+1] ;
			{ | i1-1==0 && i0+1==0 } : S12[i0-1,i1-2,i2+1] - A[i0+1,i1] * S14[i0+1,i1,i2+1] ;
			{ | i1-n==0 && -i0+n-3>=0 && i0>=0 } : S13[i0,i1-1,i2] - S6[i0,i1,i2] * (S10[n-2,i1-1,n] / S6[n-1,i1,n-1]) ;
			{ | -i0+i1-3>=0 && -i1+n-1>=0 && i0>=0 } : S13[i0,i1-1,i2] - S6[i0,i1,i2] * S14[i1-1,i1,i1-1] ;
			{ | i1-n==0 && i0+1==0 } : S13[i0,i1-1,i2] - A[i0+1,i1] * (S10[n-2,i1-1,n] / S6[n-1,i1,n-1]) ;
			{ | i0+1==0 && i1-2>=0 && -i1+n-1>=0 } : S13[i0,i1-1,i2] - A[i0+1,i1] * S14[i1-1,i1,i1-1] ;
		esac;
		S14[i0,i1,i2] = case
			{ | i0-n+2==0 } : S13[i0,i1+1,i2] / S6[i0,i1,i2] ;
			{ | -i0+n-3>=0 && i0>=0 } : S13[i0,n,i2] / S6[i0,i1,i2] ;
			{ | i0+1==0 } : S13[i0,n,i2] / A[i0+1,i1] ;
		esac;
.