double sqrt (double) ;
affine correlation {m,n| m-2>=0 && n-2>=0 }
	input
		double float_n;
		double data {i0,i1| 0<=i0<n && 0<=i1<m} ;
	output
		double symmat {i0,i1| 0<=(i0,i1)<m};
	local
		double S0 { | } ;
		double S1 {j| j>=0 && -j+m-1>=0 } ;
		double S2 {j,i| -j+m-1>=0 && -i+n-1>=0 && i>=0 && j>=0 } ;
		double S3 {j| j>=0 && -j+m-1>=0 } ;
		double S4 {j| j>=0 && -j+m-1>=0 } ;
		double S5 {j,i| -j+m-1>=0 && -i+n-1>=0 && i>=0 && j>=0 } ;
		double S6 {j| j>=0 && -j+m-1>=0 } ;
		double S7 {j| j>=0 && -j+m-1>=0 } ;
		double S8 {j| j>=0 && -j+m-1>=0 } ;
		double S9 {i,j| -j+m-1>=0 && -i+n-1>=0 && j>=0 && i>=0 } ;
		double S10 {i,j| -j+m-1>=0 && -i+n-1>=0 && j>=0 && i>=0 } ;
		double S11 {j1| 0<=j1<m-1 } ;
		double S12 {j1,j2| 0<=j1<j2<m } ;
		double S13 {j1,j2,i| 0<=i<n && 0<=j1<j2<m } ;
		double S14 {j1,j2| 0<=j1<j2<m } ;
		double S15 { | } ;
	let
		S0[] = 0.1;
		S1[j] = 0.0;
		S2[j,i] = case
			{ | i==0 } : S1[j] + data[i,j] ;
			{ | i-1>=0 } : S2[j,i-1] + data[i,j] ;
		esac;
		S3[j] = S2[j,n-1] / float_n;
		S4[j] = 0.0;
		S5[j,i] = case
			{ | i==0 } : S4[j] + (data[i,j] - S3[j]) * (data[i,j] - S3[j]) ;
			{ | i-1>=0 } : S5[j,i-1] + (data[i,j] - S3[j]) * (data[i,j] - S3[j]) ;
		esac;
		S6[j] = S5[j,n-1] / float_n;
		S7[j] = sqrt (S6);
		S8[j] = if S7 <= S0 then 1.0 else S7;
		S9[i,j] = data - S3[j];
		S10[i,j] = S9 / (sqrt (float_n) * S8[j]);
		
		//symmmat
		S11[j1] = 1.0;
		S12[j1,j2] = 0.0;
		S13[j1,j2,i] = case
			{ | i==0 } : S12[j1,j2] + S10[i,j1] * S10[i,j2] ;
			{ | i-1>=0 } : S13[j1,j2,i-1] + S10[i,j1] * S10[i,j2] ;
		esac;
		S14[j1,j2] = S13[j1,j2,n-1];
		S15[] = 1.0;
		
		symmat[i0,i1] = case
			{|i0==i1 && i0<m-1} : S11[i0];
			{j1,j2| 0<=j1<j2<m } : S13[i0,i1,n-1];
			{j1,j2| 0<=j2<j1<m } : S14[i1,i0];
			{|i0==m-1 && i1==m-1} : S15;
		esac;
//		double S11 {j1| 0<=j1<m-1 } ;
//		double S12 {j1,j2| 0<=j1<j2<m } ;
//		double S13 {j1,j2,i| 0<=i<n && 0<=j1<j2<m } ;
//		double S14 {j1,j2| 0<=j1<j2<m } ;
//		double S15 { | } ;
//{i0,i1|i0>=0 && -i0+m-1>=0 && i1>=0 && -i1+m-1>=0 && m-2>=0 && n-2>=0 && i0-i1-1>=0}
.