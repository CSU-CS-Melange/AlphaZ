affine jacobi-1d-imper {tsteps,n| tsteps-2>=0 && n-2>=0 }
	given
		double A {i0| -i0+n-1>=0 && n-3>=0 && i0>=0 } ;
	using
		double S0 {t,i| -i+n-2>=0 && -t+tsteps-1>=0 && i-1>=0 && t>=0 } ;
		double S1 {t,j| -j+n-2>=0 && -t+tsteps-1>=0 && j-1>=0 && t>=0 } ;
	through
		S0[t,i] = case
			{ | t-1>=0 && -i+n-3>=0 && i-2>=0 } : 0.33333 * (S1[t-1,i-1] + S1[t-1,i] + S1[t-1,i+1]) ;
			{ | i-n+2==0 && t-1>=0 && n-4>=0 } : 0.33333 * (S1[t-1,i-1] + S1[t-1,i] + A[i+1]) ;
			{ | i-1==0 && t-1>=0 && n-4>=0 } : 0.33333 * (A[i-1] + S1[t-1,i] + S1[t-1,i+1]) ;
			{ | i-1==0 && n-3==0 && t-1>=0 } : 0.33333 * (A[i-1] + S1[t-1,i] + A[i+1]) ;
			{ | t==0 } : 0.33333 * (A[i-1] + A[i] + A[i+1]) ;
		esac;
		S1[t,j] = case
			{ | t-1>=0 } : S0 ;
			{ | t==0 } : S0[0,j] ;
		esac;
.