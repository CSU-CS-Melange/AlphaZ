affine 2mm {ni,nj,nk,nl| ni-2>=0 && nj-2>=0 && nk-2>=0 && nl-2>=0 }
	input
		double alpha { | } ;
		double beta { | } ;
		double A {i0,i1| i1>=0 && i0>=0 && -i0+ni-1>=0 && -i1+nk-1>=0 } ;
		double B {i0,i1| i1>=0 && i0>=0 && -i0+nk-1>=0 && -i1+nj-1>=0 } ;
		double C {i0,i1| i1>=0 && i0>=0 && -i0+nj-1>=0 && -i1+nl-1>=0 } ;
		double D {i0,i1| i1>=0 && i0>=0 && -i0+ni-1>=0 && -i1+nl-1>=0 } ;
	local
		double S1 {i0,i1,i2| -i1+nj-1>=0 && i0>=0 && i2+nk>=0 && -i0+ni-1>=0 && -i2-2>=0 && i1>=0 } ;
		double S3 {i0,i1,i2| i0>=0 && i2-nk>=0 && -i0+ni-1>=0 && -i2+nk+nl-1>=0 && i1>=0 && -i1+nj-1>=0 } ;
		double S1_uni1A {i0,i1,i2| -i1+nj-1>=0 && i0>=0 && i2-nk>=0 && -i0+ni-1>=0 && i1>=0 } ;
		double S1_uni1B {i0,i1,i2| -i1+nj-1>=0 && i0>=0 && -i2+nk>=0 && -i0+ni-1>=0 && i2>=0 && i1>=0 } ;
		double S1_bound {i0,i1,i2| i2+1==0 && i1>=0 && -i1+nj-1>=0 && i0>=0 && -i0+ni-1>=0 } ;
	let
		S1[i0,i1,i2] = case
			{ | i2+nk==0 } :[0]+ alpha * A[i0,i2+nk] * B[i2+nk,i1] ;
			{ | i2+nk-1>=0 } : S1[i0,i1,i2-1] + alpha * A[i0,i2+nk] * B[i2+nk,i1] ;
		esac;
		S3[i0,i1,i2] = case
			{ | i1==0 && i2-2nk>=0 } : D[i0,i2-nk] * beta + S1_uni1A[i0,i1,i2-nk] * C[i1,i2-nk] ;
			{ | i1==0 && -i2+2nk-1>=0 } : D[i0,i2-nk] * beta + S1_uni1B[i0,i1,2nk-i2] * C[i1,i2-nk] ;
			{ | i1-1>=0 && i2-2nk>=0 } : S3[i0,i1-1,i2] + S1_uni1A[i0,i1,i2-nk] * C[i1,i2-nk] ;
			{ | i1-1>=0 && -i2+2nk-1>=0 } : S3[i0,i1-1,i2] + S1_uni1B[i0,i1,2nk-i2] * C[i1,i2-nk] ;
		esac;
		S1_uni1A[i0,i1,i2] = case
			{ | i2-nk==0 } : S1_bound[i0,i1,i2-nk-1] ;
			{ | i2-nk-1>=0 } : S1_uni1A[i0,i1,i2-1] ;
		esac;
		S1_uni1B[i0,i1,i2] = case
			{ | i2==0 } : S1_bound[i0,i1,-i2-1] ;
			{ | i2-1>=0 } : S1_uni1B[i0,i1,i2-1] ;
		esac;
		S1_bound[i0,i1,i2] = { | -i1+nj-1>=0 && i0>=0 && i2+nk-1>=0 && -i0+ni-1>=0 && -i2-1>=0 && i1>=0 } : S1[i0,i1,i2-1] +
		alpha * A[i0,i2+nk] * B[i2+nk,i1];
.