affine kernel_gesummv_scop_0 {n,alpha,beta|n-2>=0 && alpha-2>=0 && beta-2>=0}
input
double A {i0,i1|i0>=0 && -i1+n-1>=0 && -i0+n-1>=0 && i1>=0};
double B {i0,i1|i0>=0 && -i1+n-1>=0 && -i0+n-1>=0 && i1>=0};
double x {i0|-i0+n-1>=0 && i0>=0};
output
local
double S0 {i|-i+n-1>=0 && i>=0};
double S1 {i|-i+n-1>=0 && i>=0};
double S2 {i,j|i>=0 && -j+n-1>=0 && -i+n-1>=0 && j>=0};
double S3 {i,j|i>=0 && -j+n-1>=0 && -i+n-1>=0 && j>=0};
double S4 {i|-i+n-1>=0 && i>=0};
let
S0[i] = [0];
S1[i] = [0];
S2[i,j] = case
{|j==0} : ((A * x[j]) + S0[i]);
{|j-1>=0} : ((A * x[j]) + S2[i,j-1]);
esac;
S3[i,j] = case
{|j==0} : ((B * x[j]) + S1[i]);
{|j-1>=0} : ((B * x[j]) + S3[i,j-1]);
esac;
S4[i] = (([alpha] * S2[i,n-1]) + ([beta] * S3[i,n-1]));
.
