affine dynprog {tsteps,length| tsteps-2>=0 && length-2>=0 }
	input
		int W {i0,i1| -i0+i1-1>=0 && -i1+length-1>=0 && i0>=0 } ;
	local
		int S3 {iter,i,j,k| -i+k-1>=0 && i>=0 && -j+length-1>=0 && j-k-1>=0 && -iter+tsteps-1>=0 && iter>=0 } ;
		int S4 {iter,i,j| -iter+tsteps-1>=0 && iter>=0 && i>=0 && -i+j-1>=0 && -j+length-1>=0 } ;
		int S5 {iter| iter>=0 && -iter+tsteps-1>=0 } ;
	let
		S3[iter,i,j,k] = case
			{ | -i+k-1==0 && iter==0 } :[0]+ S4[0,i,k] +[0];
			{ | -i+k-1==0 && iter-1>=0 } :[0]+ S4[iter,i,k] +[0];
			{ | iter==0 && -i+k-2>=0 } : S3[0,i,j,k-1] + S4[0,i,k] +[0];
			{ | iter-1>=0 && -i+k-2>=0 } : S3[iter,i,j,k-1] + S4[iter,i,k] +[0];
		esac;
		S4[iter,i,j] = case
			{ | -i+j-1==0 && iter==0 } :[0]+ W[i,j] ;
			{ | -i+j-1==0 && iter-1>=0 } :[0]+ W[i,j] ;
			{ | iter==0 && -i+j-2>=0 } : S3[0,i,j,j-1] + W[i,j] ;
			{ | -i+j-2>=0 && iter-1>=0 } : S3[iter,i,j,j-1] + W[i,j] ;
		esac;
		S5[iter] = case
			{ | iter==0 } :[0]+ S4[0,0,length-1] ;
			{ | iter-1>=0 } : S5[iter-1] + S4[iter,0,length-1] ;
		esac;
.