double sqrt(double);

affine correlation {m,n|(m,n)>1}
given
	double float_n;
	double data {i,j|0<=i<n && 0<=j<m};
returns
	double symmat {i,j|0<=(i,j)<m};
using
	double eps;
	double S1 {j|j>=0 && j<=-1+m};
	double S2 {j,i|i>=0 && i<=-1+n && j>=0 && j<=-1+m};
	double S3 {j|j>=0 && j<=-1+m};
	double S4 {j|j>=0 && j<=-1+m};
	double S5 {j,i|i>=0 && i<=-1+n && j>=0 && j<=-1+m};
	double S6 {j|j>=0 && j<=-1+m};
	double S7 {j|j>=0 && j<=-1+m};
	double S8 {j|j>=0 && j<=-1+m};
	double S9 {i,j|j>=0 && j<=-1+m && i>=0 && i<=-1+n};
	double S10 {i,j|j>=0 && j<=-1+m && i>=0 && i<=-1+n};
	double S12 {j1,j2|j2>=1+j1 && j2<=-1+m && j1>=0 && j1<=-2+m};
	double S13 {j1,j2,i|i>=0 && i<=-1+n && j2>=1+j1 && j2<=-1+m && j1>=0 && j1<=-2+m};
through
	eps = 0.1;
	//writes to mean size:M
	S1[j] = 0.0;
	S2[j,i] = case
				{|i==0} : S1[j];
				{|i>0}  : S2[j,i-1] + data[i,j];
			  esac;
	S3[j] =  S2[j,n-1] / float_n;
	
	//writes to stddev size:M
	S4[j] = 0.0;
	S5[j,i] = case 
				{|i==0} : S4[j] + (data[i,j] - S3[j]) * (data[i,j] - S3[j]);
				{|i>0}  : S5[j,i-1] + (data[i,j] - S3[j]) * (data[i,j] - S3[j]);
			esac;
			
	S6[j] = S5[j,n-1] / float_n;
	S7[j] = sqrt(S6[j]);
	S8[j] = if (S7[j] <= eps) then 1.0 else S7[j];
	
	//writes to data size:MxN
	S9[i,j] = data[i,j] - S3[j]; 
	S10[i,j] = S9[i,j] / (sqrt(float_n) * S8[j]);
	
	//writes to symmat size:MxM
	S12[j1,j2] = 0;
	S13[j1,j2,i] = case 
					{|i==0} : S12[j1,j2]     + (S10[i,j1] * S10[i,j2]);
					{|i>0}  : S13[j1,j2,i-1] + (S10[i,j1]  * S10[i,j2]);
				esac;


	symmat[i,j] = case
					{|i<j}:S13[i,j,n-1];
					{|i>j}:S13[j,i,n-1];
					{|i==j}:1.0; 
				 esac;
.

/* C code
S0: eps = 0.1f;

#pragma scop

  for (j = 0; j < m; j++)
    {
S1:      mean[j] = 0.0;
      for (i = 0; i < n; i++) {
S2:	 mean[j] += data[i][j];
      }
S3:      mean[j] /= float_n;
    }


  for (j = 0; j < m; j++)
    {
S4:      stddev[j] = 0.0;
      for (i = 0; i < n; i++) {
S5:	 stddev[j] += (data[i][j] - mean[j]) * (data[i][j] - mean[j]);
      }
S6:      stddev[j] /= float_n;
S7:      stddev[j] = sqrt(stddev[j]);



S8:      stddev[j] = stddev[j] <= eps ? 1.0 : stddev[j];
    }


  for (i = 0; i < n; i++)
    for (j = 0; j < m; j++)
      {
S9 : data[i][j] -= mean[j];
S10: data[i][j] /= sqrt(float_n) * stddev[j];
      }


  for (j1 = 0; j1 < m-1; j1++)
    {
S11:      symmat[j1][j1] = 1.0;
      for (j2 = j1+1; j2 < m; j2++) {
S12:         symmat[j1][j2] = 0.0;
         for (i = 0; i < n; i++) {
S13:             symmat[j1][j2] += (data[i][j1] * data[i][j2]);
          }
S14:          symmat[j2][j1] = symmat[j1][j2];
      }
    }
S15:  symmat[m-1][m-1] = 1.0;
#pragma endscop
 */
 
