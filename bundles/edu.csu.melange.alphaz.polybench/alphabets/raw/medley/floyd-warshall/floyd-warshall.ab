affine kernel_floyd_warshall_scop_0 {n|n>=2}
	input
		double path {i0,i1|i1>=0 && -i1+n-1>=0 && i0>=0 && -i0+n-1>=0 && n-2>=0};
	local
		double S0 {k,i,j|j>=0 && -j+n-1>=0 && i>=0 && -i+n-1>=0 && k>=0 && -k+n-1>=0 && n>=2};
	let
		S0[k, i, j] = if (case {k,i,j|-k+n-1>=0 && k-1>=0 && j>=0 && -j+n-1>=0 && i>=0 && -i+n-1>=0} : S0[k-1, i, j]; {k,i,j|k==0} : path[i, j]; esac <(case {k,i,j|-k+n-1>=0 && k-1>=0 && j>=0 && k-j>=0 && i>=0 && -i+n-1>=0} : S0[k-1, i, k]; {k,i,j|-i+n-1>=0 && k>=0 && -k+j-1>=0 && -j+n-1>=0 && i>=0} : S0[k, i, k]; {k,i,j|j==0 && k==0} : path[i, k]; esac +case {k,i,j|-k+n-1>=0 && k-1>=0 && j>=0 && -j+n-1>=0 && i>=0 && k-i>=0} : S0[k-1, k, j]; {k,i,j|-i+n-1>=0 && k>=0 && j>=0 && -j+n-1>=0 && -k+i-1>=0} : S0[k, k, j]; {k,i,j|i==0 && k==0} : path[k, j]; esac)) then case {k,i,j|-k+n-1>=0 && k-1>=0 && j>=0 && -j+n-1>=0 && i>=0 && -i+n-1>=0} : S0[k-1, i, j]; {k,i,j|k==0} : path[i, j]; esac else (case {k,i,j|-k+n-1>=0 && k-1>=0 && j>=0 && k-j>=0 && i>=0 && -i+n-1>=0} : S0[k-1, i, k]; {k,i,j|-i+n-1>=0 && k>=0 && -k+j-1>=0 && -j+n-1>=0 && i>=0} : S0[k, i, k]; {k,i,j|j==0 && k==0} : path[i, k]; esac +case {k,i,j|-k+n-1>=0 && k-1>=0 && j>=0 && -j+n-1>=0 && i>=0 && k-i>=0} : S0[k-1, k, j]; {k,i,j|-i+n-1>=0 && k>=0 && j>=0 && -j+n-1>=0 && -k+i-1>=0} : S0[k, k, j]; {k,i,j|i==0 && k==0} : path[k, j]; esac);
.
