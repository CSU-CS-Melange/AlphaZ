affine durbin {n| n-2>=0 }
	given
		double r {i0| -i0+n-1>=0 && i0>=0 } ;
	using
		double S3 {k| -k+n-1>=0 && k-1>=0 } ;
		double S5 {k,i| k-i-1>=0 && i>=0 && -k+n-1>=0 } ;
		double S6 {i0,i1| -i0+i1+1==0 && i0-1>=0 && -i0+n-1>=0 } ;
		double S7 {k,i| k-i-1>=0 && i>=0 && -k+n-1>=0 } ;
		double S9 {i0,i1| i0-n+1==0 && -i1+n-1>=0 && i1>=0 } ;
	through
		S3[k] = case
			{ | k-1==0 } :[1]- r[k-1] * r[k-1] *[1];
			{ | k-2>=0 } : S3[k-1] - S6[k-1,k-2] * S6[k-1,k-2] * S3[k-1] ;
		esac;
		S5[k,i] = case
			{ | i==0 && k-1==0 } : r[k] + r[k-1] * r[k-1] ;
			{ | i==0 && k-2>=0 } : r[k] + r[k-1] * S7[k-1,i] ;
			{ | k-i-2>=0 && i-1>=0 } : S5[k,i-1] + r[-i+k-1] * S7[k-1,i] ;
			{ | -k+i+1==0 && k-2>=0 } : S5[k,i-1] + r[-i+k-1] * S6[k-1,i-1] ;
		esac;
		S6[i0,i1] = - S5[i0,i1] * S3[i0];
		S7[k,i] = case
			{ | i==0 && k-1==0 } : r[k-1] + S6[k,i] * r[k-1] ;
			{ | k-i-2>=0 && i-1>=0 } : S7[k-1,i] + S6[k,k-1] * S7[k-1,-i+k-1] ;
			{ | i==0 && k-2>=0 } : S7[k-1,i] + S6[k,k-1] * S6[k-1,k-2] ;
			{ | -k+i+1==0 && k-2>=0 } : S6[k-1,i-1] + S6[k,i] * S7[k-1,-i+k-1] ;
		esac;
		S9[i0,i1] = case
			{ | -i1+n-2>=0 } : S7[i0,i1] ;
			{ | i1-n+1==0 } : S6[i0,i1-1] ;
		esac;
.