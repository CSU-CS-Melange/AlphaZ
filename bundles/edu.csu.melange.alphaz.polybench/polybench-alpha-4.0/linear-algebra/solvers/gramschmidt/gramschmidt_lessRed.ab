// Author: Guillaume Iooss

double sqrt(double);

affine gramschmidt {N,M| 2<=N && 2<=M}
input
	double A {i,j| 0<=i<M && 0<=j<N};
output
	double R {k,j| 0<=k<=j<N};
	double Q {i,k| 0<=i<M && 0<=k<N};
local
	double Atemp {k,i,j | 0<=k<N && 0<=i<M && 0<=j<N};
	double temp {k | 0<=k<N};
let
	Q[i,k] = Atemp[k,i,k] / R[k,k];
	
	temp[k] = reduce(+, [x], Atemp[k,x,k] * Atemp[k,x,k]);
	
	R[k,j] = case
		{| k==j} : sqrt(temp[k]);
		{| k<j} : reduce(+, [a], Q[a,k] * Atemp[k,a,j]);
	esac;
	
	// Might be a better way to do that, but I do not want to redo the full summation (from k=0 to k=j) every time
	Atemp[k,i,j] = case
		{k,i,j| k==0} : A[i,j];
		{k,i,j| 0<k<j}: Atemp[k-1,i,j] - Q[i,k-1] * R[k-1,j];
		{k,i,j| 0<=j<=k && 0<k} : Atemp[k-1,i,j];
	esac;
.

