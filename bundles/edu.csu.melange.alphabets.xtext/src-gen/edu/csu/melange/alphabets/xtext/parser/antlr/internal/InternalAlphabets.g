/*
* generated by Xtext
*/
grammar InternalAlphabets;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package edu.csu.melange.alphabets.xtext.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package edu.csu.melange.alphabets.xtext.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import edu.csu.melange.alphabets.xtext.services.AlphabetsGrammarAccess;

}

@parser::members {

 	private AlphabetsGrammarAccess grammarAccess;
 	
    public InternalAlphabetsParser(TokenStream input, AlphabetsGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "AProgram";	
   	}
   	
   	@Override
   	protected AlphabetsGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleAProgram
entryRuleAProgram returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAProgramRule()); }
	 iv_ruleAProgram=ruleAProgram 
	 { $current=$iv_ruleAProgram.current; } 
	 EOF 
;

// Rule AProgram
ruleAProgram returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getAProgramAccess().getExternalFunctionsAExternalFunctionDeclarationParserRuleCall_0_0()); 
	    }
		lv_externalFunctions_0_0=ruleAExternalFunctionDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAProgramRule());
	        }
       		add(
       			$current, 
       			"externalFunctions",
        		lv_externalFunctions_0_0, 
        		"AExternalFunctionDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getAProgramAccess().getSystemsAAffineSystemParserRuleCall_1_0()); 
	    }
		lv_systems_1_0=ruleAAffineSystem		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAProgramRule());
	        }
       		add(
       			$current, 
       			"systems",
        		lv_systems_1_0, 
        		"AAffineSystem");
	        afterParserOrEnumRuleCall();
	    }

)
)+)
;





// Entry rule entryRuleAExternalFunctionDeclaration
entryRuleAExternalFunctionDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAExternalFunctionDeclarationRule()); }
	 iv_ruleAExternalFunctionDeclaration=ruleAExternalFunctionDeclaration 
	 { $current=$iv_ruleAExternalFunctionDeclaration.current; } 
	 EOF 
;

// Rule AExternalFunctionDeclaration
ruleAExternalFunctionDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getAExternalFunctionDeclarationAccess().getOutputATypeParserRuleCall_0_0()); 
	    }
		lv_output_0_0=ruleAType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAExternalFunctionDeclarationRule());
	        }
       		set(
       			$current, 
       			"output",
        		lv_output_0_0, 
        		"AType");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAExternalFunctionDeclarationAccess().getNameAExternalFunctionIdentifierParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleAExternalFunctionIdentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAExternalFunctionDeclarationRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"AExternalFunctionIdentifier");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAExternalFunctionDeclarationAccess().getLeftParenthesisKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAExternalFunctionDeclarationAccess().getInputsATypeParserRuleCall_3_0()); 
	    }
		lv_inputs_3_0=ruleAType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAExternalFunctionDeclarationRule());
	        }
       		add(
       			$current, 
       			"inputs",
        		lv_inputs_3_0, 
        		"AType");
	        afterParserOrEnumRuleCall();
	    }

)
)?(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getAExternalFunctionDeclarationAccess().getCommaKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAExternalFunctionDeclarationAccess().getInputsATypeParserRuleCall_4_1_0()); 
	    }
		lv_inputs_5_0=ruleAType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAExternalFunctionDeclarationRule());
	        }
       		add(
       			$current, 
       			"inputs",
        		lv_inputs_5_0, 
        		"AType");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_6=')' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getAExternalFunctionDeclarationAccess().getRightParenthesisKeyword_5());
    }
	otherlv_7=';' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getAExternalFunctionDeclarationAccess().getSemicolonKeyword_6());
    }
)
;





// Entry rule entryRuleAExternalFunctionIdentifier
entryRuleAExternalFunctionIdentifier returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAExternalFunctionIdentifierRule()); }
	 iv_ruleAExternalFunctionIdentifier=ruleAExternalFunctionIdentifier 
	 { $current=$iv_ruleAExternalFunctionIdentifier.current; } 
	 EOF 
;

// Rule AExternalFunctionIdentifier
ruleAExternalFunctionIdentifier returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getAExternalFunctionIdentifierAccess().getNameIDTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAExternalFunctionIdentifierRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)
;





// Entry rule entryRuleAAffineSystem
entryRuleAAffineSystem returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAAffineSystemRule()); }
	 iv_ruleAAffineSystem=ruleAAffineSystem 
	 { $current=$iv_ruleAAffineSystem.current; } 
	 EOF 
;

// Rule AAffineSystem
ruleAAffineSystem returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='affine' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getAAffineSystemAccess().getAffineKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getAAffineSystemAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAAffineSystemRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAAffineSystemAccess().getParametersADomainParserRuleCall_2_0()); 
	    }
		lv_parameters_2_0=ruleADomain		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAAffineSystemRule());
	        }
       		set(
       			$current, 
       			"parameters",
        		lv_parameters_2_0, 
        		"ADomain");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3='given' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getAAffineSystemAccess().getGivenKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAAffineSystemAccess().getInputDeclarationsAInputDeclarationParserRuleCall_3_1_0()); 
	    }
		lv_inputDeclarations_4_0=ruleAInputDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAAffineSystemRule());
	        }
       		add(
       			$current, 
       			"inputDeclarations",
        		lv_inputDeclarations_4_0, 
        		"AInputDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)*)?(	otherlv_5='returns' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getAAffineSystemAccess().getReturnsKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAAffineSystemAccess().getOutputDeclarationsAOutputDeclarationParserRuleCall_4_1_0()); 
	    }
		lv_outputDeclarations_6_0=ruleAOutputDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAAffineSystemRule());
	        }
       		add(
       			$current, 
       			"outputDeclarations",
        		lv_outputDeclarations_6_0, 
        		"AOutputDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)*)?(	otherlv_7='using' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getAAffineSystemAccess().getUsingKeyword_5_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAAffineSystemAccess().getLocalvarDeclarationsALocalDeclarationParserRuleCall_5_1_0()); 
	    }
		lv_localvarDeclarations_8_0=ruleALocalDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAAffineSystemRule());
	        }
       		add(
       			$current, 
       			"localvarDeclarations",
        		lv_localvarDeclarations_8_0, 
        		"ALocalDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)*)?(	otherlv_9='through' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getAAffineSystemAccess().getThroughKeyword_6_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAAffineSystemAccess().getEquationsAStandardEquationParserRuleCall_6_1_0()); 
	    }
		lv_equations_10_0=ruleAStandardEquation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAAffineSystemRule());
	        }
       		add(
       			$current, 
       			"equations",
        		lv_equations_10_0, 
        		"AStandardEquation");
	        afterParserOrEnumRuleCall();
	    }

)
)*)?	otherlv_11='.' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getAAffineSystemAccess().getFullStopKeyword_7());
    }
)
;





// Entry rule entryRuleAOutputDeclaration
entryRuleAOutputDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAOutputDeclarationRule()); }
	 iv_ruleAOutputDeclaration=ruleAOutputDeclaration 
	 { $current=$iv_ruleAOutputDeclaration.current; } 
	 EOF 
;

// Rule AOutputDeclaration
ruleAOutputDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getAOutputDeclarationAccess().getTypeATypeParserRuleCall_0_0()); 
	    }
		lv_type_0_0=ruleAType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAOutputDeclarationRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_0_0, 
        		"AType");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAOutputDeclarationAccess().getIdentifierListAIdentifierListParserRuleCall_1_0()); 
	    }
		lv_identifierList_1_0=ruleAIdentifierList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAOutputDeclarationRule());
	        }
       		set(
       			$current, 
       			"identifierList",
        		lv_identifierList_1_0, 
        		"AIdentifierList");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAOutputDeclarationAccess().getDomainADomainParserRuleCall_2_0()); 
	    }
		lv_domain_2_0=ruleADomain		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAOutputDeclarationRule());
	        }
       		set(
       			$current, 
       			"domain",
        		lv_domain_2_0, 
        		"ADomain");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_3=';' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getAOutputDeclarationAccess().getSemicolonKeyword_3());
    }
)
;





// Entry rule entryRuleAInputDeclaration
entryRuleAInputDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAInputDeclarationRule()); }
	 iv_ruleAInputDeclaration=ruleAInputDeclaration 
	 { $current=$iv_ruleAInputDeclaration.current; } 
	 EOF 
;

// Rule AInputDeclaration
ruleAInputDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getAInputDeclarationAccess().getTypeATypeParserRuleCall_0_0()); 
	    }
		lv_type_0_0=ruleAType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAInputDeclarationRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_0_0, 
        		"AType");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAInputDeclarationAccess().getIdentifierListAIdentifierListParserRuleCall_1_0()); 
	    }
		lv_identifierList_1_0=ruleAIdentifierList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAInputDeclarationRule());
	        }
       		set(
       			$current, 
       			"identifierList",
        		lv_identifierList_1_0, 
        		"AIdentifierList");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAInputDeclarationAccess().getDomainADomainParserRuleCall_2_0()); 
	    }
		lv_domain_2_0=ruleADomain		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAInputDeclarationRule());
	        }
       		set(
       			$current, 
       			"domain",
        		lv_domain_2_0, 
        		"ADomain");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_3=';' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getAInputDeclarationAccess().getSemicolonKeyword_3());
    }
)
;





// Entry rule entryRuleALocalDeclaration
entryRuleALocalDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getALocalDeclarationRule()); }
	 iv_ruleALocalDeclaration=ruleALocalDeclaration 
	 { $current=$iv_ruleALocalDeclaration.current; } 
	 EOF 
;

// Rule ALocalDeclaration
ruleALocalDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getALocalDeclarationAccess().getTypeATypeParserRuleCall_0_0()); 
	    }
		lv_type_0_0=ruleAType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getALocalDeclarationRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_0_0, 
        		"AType");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getALocalDeclarationAccess().getIdentifierListAIdentifierListParserRuleCall_1_0()); 
	    }
		lv_identifierList_1_0=ruleAIdentifierList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getALocalDeclarationRule());
	        }
       		set(
       			$current, 
       			"identifierList",
        		lv_identifierList_1_0, 
        		"AIdentifierList");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getALocalDeclarationAccess().getDomainADomainParserRuleCall_2_0()); 
	    }
		lv_domain_2_0=ruleADomain		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getALocalDeclarationRule());
	        }
       		set(
       			$current, 
       			"domain",
        		lv_domain_2_0, 
        		"ADomain");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_3=';' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getALocalDeclarationAccess().getSemicolonKeyword_3());
    }
)
;





// Entry rule entryRuleAIdentifierList
entryRuleAIdentifierList returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAIdentifierListRule()); }
	 iv_ruleAIdentifierList=ruleAIdentifierList 
	 { $current=$iv_ruleAIdentifierList.current; } 
	 EOF 
;

// Rule AIdentifierList
ruleAIdentifierList returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getAIdentifierListAccess().getIdentifiersVariableIdentifierParserRuleCall_0_0()); 
	    }
		lv_identifiers_0_0=ruleVariableIdentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAIdentifierListRule());
	        }
       		add(
       			$current, 
       			"identifiers",
        		lv_identifiers_0_0, 
        		"VariableIdentifier");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAIdentifierListAccess().getCommaKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAIdentifierListAccess().getIdentifiersVariableIdentifierParserRuleCall_1_1_0()); 
	    }
		lv_identifiers_2_0=ruleVariableIdentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAIdentifierListRule());
	        }
       		add(
       			$current, 
       			"identifiers",
        		lv_identifiers_2_0, 
        		"VariableIdentifier");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleVariableIdentifier
entryRuleVariableIdentifier returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariableIdentifierRule()); } 
	 iv_ruleVariableIdentifier=ruleVariableIdentifier 
	 { $current=$iv_ruleVariableIdentifier.current.getText(); }  
	 EOF 
;

// Rule VariableIdentifier
ruleVariableIdentifier returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getVariableIdentifierAccess().getIDTerminalRuleCall()); 
    }

    ;





// Entry rule entryRuleADomain
entryRuleADomain returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getADomainRule()); }
	 iv_ruleADomain=ruleADomain 
	 { $current=$iv_ruleADomain.current; } 
	 EOF 
;

// Rule ADomain
ruleADomain returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getADomainAccess().getPolyhedraAPolyhedronParserRuleCall_0_0()); 
	    }
		lv_polyhedra_0_0=ruleAPolyhedron		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getADomainRule());
	        }
       		add(
       			$current, 
       			"polyhedra",
        		lv_polyhedra_0_0, 
        		"APolyhedron");
	        afterParserOrEnumRuleCall();
	    }

)
)(this_UNION_1=RULE_UNION
    { 
    newLeafNode(this_UNION_1, grammarAccess.getADomainAccess().getUNIONTerminalRuleCall_1_0()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getADomainAccess().getPolyhedraAPolyhedronParserRuleCall_1_1_0()); 
	    }
		lv_polyhedra_2_0=ruleAPolyhedron		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getADomainRule());
	        }
       		add(
       			$current, 
       			"polyhedra",
        		lv_polyhedra_2_0, 
        		"APolyhedron");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleAPolyhedron
entryRuleAPolyhedron returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAPolyhedronRule()); }
	 iv_ruleAPolyhedron=ruleAPolyhedron 
	 { $current=$iv_ruleAPolyhedron.current; } 
	 EOF 
;

// Rule APolyhedron
ruleAPolyhedron returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='{' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getAPolyhedronAccess().getLeftCurlyBracketKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAPolyhedronAccess().getIndexesAIndexListParserRuleCall_1_0()); 
	    }
		lv_indexes_1_0=ruleAIndexList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAPolyhedronRule());
	        }
       		set(
       			$current, 
       			"indexes",
        		lv_indexes_1_0, 
        		"AIndexList");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='|' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAPolyhedronAccess().getVerticalLineKeyword_2());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getAPolyhedronAccess().getConstraintsInEqualityParserRuleCall_3_0_0()); 
	    }
		lv_constraints_3_0=ruleInEquality		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAPolyhedronRule());
	        }
       		add(
       			$current, 
       			"constraints",
        		lv_constraints_3_0, 
        		"InEquality");
	        afterParserOrEnumRuleCall();
	    }

)
)(this_INTERSECTION_4=RULE_INTERSECTION
    { 
    newLeafNode(this_INTERSECTION_4, grammarAccess.getAPolyhedronAccess().getINTERSECTIONTerminalRuleCall_3_1_0()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAPolyhedronAccess().getConstraintsInEqualityParserRuleCall_3_1_1_0()); 
	    }
		lv_constraints_5_0=ruleInEquality		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAPolyhedronRule());
	        }
       		add(
       			$current, 
       			"constraints",
        		lv_constraints_5_0, 
        		"InEquality");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_6='}' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getAPolyhedronAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleInEquality
entryRuleInEquality returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getInEqualityRule()); } 
	 iv_ruleInEquality=ruleInEquality 
	 { $current=$iv_ruleInEquality.current.getText(); }  
	 EOF 
;

// Rule InEquality
ruleInEquality returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    { 
        newCompositeNode(grammarAccess.getInEqualityAccess().getIDListParserRuleCall_0_0()); 
    }
    this_IDList_0=ruleIDList    {
		$current.merge(this_IDList_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getInEqualityAccess().getIDExpressionParserRuleCall_0_1()); 
    }
    this_IDExpression_1=ruleIDExpression    {
		$current.merge(this_IDExpression_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)(
    { 
        newCompositeNode(grammarAccess.getInEqualityAccess().getRelationalOpParserRuleCall_1_0()); 
    }
    this_RelationalOp_2=ruleRelationalOp    {
		$current.merge(this_RelationalOp_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
    { 
        newCompositeNode(grammarAccess.getInEqualityAccess().getIDListParserRuleCall_1_1_0()); 
    }
    this_IDList_3=ruleIDList    {
		$current.merge(this_IDList_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getInEqualityAccess().getIDExpressionParserRuleCall_1_1_1()); 
    }
    this_IDExpression_4=ruleIDExpression    {
		$current.merge(this_IDExpression_4);
    }

    { 
        afterParserOrEnumRuleCall();
    }
))+)
    ;





// Entry rule entryRuleIDList
entryRuleIDList returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getIDListRule()); } 
	 iv_ruleIDList=ruleIDList 
	 { $current=$iv_ruleIDList.current.getText(); }  
	 EOF 
;

// Rule IDList
ruleIDList returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    { 
        newCompositeNode(grammarAccess.getIDListAccess().getInEqIDParserRuleCall_0_0()); 
    }
    this_InEqID_0=ruleInEqID    {
		$current.merge(this_InEqID_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw=',' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getIDListAccess().getCommaKeyword_0_1_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getIDListAccess().getInEqIDParserRuleCall_0_1_1()); 
    }
    this_InEqID_2=ruleInEqID    {
		$current.merge(this_InEqID_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*)
    |(
	kw='(' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getIDListAccess().getLeftParenthesisKeyword_1_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getIDListAccess().getInEqIDParserRuleCall_1_1()); 
    }
    this_InEqID_4=ruleInEqID    {
		$current.merge(this_InEqID_4);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw=',' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getIDListAccess().getCommaKeyword_1_2_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getIDListAccess().getInEqIDParserRuleCall_1_2_1()); 
    }
    this_InEqID_6=ruleInEqID    {
		$current.merge(this_InEqID_6);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*
	kw=')' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getIDListAccess().getRightParenthesisKeyword_1_3()); 
    }
))
    ;





// Entry rule entryRuleIDExpression
entryRuleIDExpression returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getIDExpressionRule()); } 
	 iv_ruleIDExpression=ruleIDExpression 
	 { $current=$iv_ruleIDExpression.current.getText(); }  
	 EOF 
;

// Rule IDExpression
ruleIDExpression returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getIDExpressionAccess().getInEqIDParserRuleCall_0()); 
    }
    this_InEqID_0=ruleInEqID    {
		$current.merge(this_InEqID_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
((    this_OP_PLUS_1=RULE_OP_PLUS    {
		$current.merge(this_OP_PLUS_1);
    }

    { 
    newLeafNode(this_OP_PLUS_1, grammarAccess.getIDExpressionAccess().getOP_PLUSTerminalRuleCall_1_0_0()); 
    }

    |    this_OP_MINUS_2=RULE_OP_MINUS    {
		$current.merge(this_OP_MINUS_2);
    }

    { 
    newLeafNode(this_OP_MINUS_2, grammarAccess.getIDExpressionAccess().getOP_MINUSTerminalRuleCall_1_0_1()); 
    }
)
    { 
        newCompositeNode(grammarAccess.getIDExpressionAccess().getInEqIDParserRuleCall_1_1()); 
    }
    this_InEqID_3=ruleInEqID    {
		$current.merge(this_InEqID_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)+)
    ;





// Entry rule entryRuleInEqID
entryRuleInEqID returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getInEqIDRule()); } 
	 iv_ruleInEqID=ruleInEqID 
	 { $current=$iv_ruleInEqID.current.getText(); }  
	 EOF 
;

// Rule InEqID
ruleInEqID returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((    this_OP_MINUS_0=RULE_OP_MINUS    {
		$current.merge(this_OP_MINUS_0);
    }

    { 
    newLeafNode(this_OP_MINUS_0, grammarAccess.getInEqIDAccess().getOP_MINUSTerminalRuleCall_0()); 
    }
)?((    this_INT_1=RULE_INT    {
		$current.merge(this_INT_1);
    }

    { 
    newLeafNode(this_INT_1, grammarAccess.getInEqIDAccess().getINTTerminalRuleCall_1_0()); 
    }
)+
    |((    this_INT_2=RULE_INT    {
		$current.merge(this_INT_2);
    }

    { 
    newLeafNode(this_INT_2, grammarAccess.getInEqIDAccess().getINTTerminalRuleCall_1_1_0()); 
    }
)*    this_ID_3=RULE_ID    {
		$current.merge(this_ID_3);
    }

    { 
    newLeafNode(this_ID_3, grammarAccess.getInEqIDAccess().getIDTerminalRuleCall_1_1_1()); 
    }
)))
    ;





// Entry rule entryRuleAStandardEquation
entryRuleAStandardEquation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAStandardEquationRule()); }
	 iv_ruleAStandardEquation=ruleAStandardEquation 
	 { $current=$iv_ruleAStandardEquation.current; } 
	 EOF 
;

// Rule AStandardEquation
ruleAStandardEquation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_var_0_0=RULE_ID
		{
			newLeafNode(lv_var_0_0, grammarAccess.getAStandardEquationAccess().getVarIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAStandardEquationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"var",
        		lv_var_0_0, 
        		"ID");
	    }

)
)(	otherlv_1='[' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAStandardEquationAccess().getLeftSquareBracketKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAStandardEquationAccess().getIndexesAIndexListParserRuleCall_1_1_0()); 
	    }
		lv_indexes_2_0=ruleAIndexList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAStandardEquationRule());
	        }
       		set(
       			$current, 
       			"indexes",
        		lv_indexes_2_0, 
        		"AIndexList");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=']' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getAStandardEquationAccess().getRightSquareBracketKeyword_1_2());
    }
)?	otherlv_4='=' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getAStandardEquationAccess().getEqualsSignKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAStandardEquationAccess().getExprAAlphabetsExpressionParserRuleCall_3_0()); 
	    }
		lv_expr_5_0=ruleAAlphabetsExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAStandardEquationRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_5_0, 
        		"AAlphabetsExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_6=';' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getAStandardEquationAccess().getSemicolonKeyword_4());
    }
)
;





// Entry rule entryRuleAAlphabetsExpression
entryRuleAAlphabetsExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAAlphabetsExpressionRule()); }
	 iv_ruleAAlphabetsExpression=ruleAAlphabetsExpression 
	 { $current=$iv_ruleAAlphabetsExpression.current; } 
	 EOF 
;

// Rule AAlphabetsExpression
ruleAAlphabetsExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAAlphabetsExpressionAccess().getAIfExpressionParserRuleCall_0()); 
    }
    this_AIfExpression_0=ruleAIfExpression
    { 
        $current = $this_AIfExpression_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getAAlphabetsExpressionAccess().getARestrictExpressionParserRuleCall_1()); 
    }
    this_ARestrictExpression_1=ruleARestrictExpression
    { 
        $current = $this_ARestrictExpression_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getAAlphabetsExpressionAccess().getAOrExpressionParserRuleCall_2()); 
    }
    this_AOrExpression_2=ruleAOrExpression
    { 
        $current = $this_AOrExpression_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleAAlphabetsTerminalExpression
entryRuleAAlphabetsTerminalExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAAlphabetsTerminalExpressionRule()); }
	 iv_ruleAAlphabetsTerminalExpression=ruleAAlphabetsTerminalExpression 
	 { $current=$iv_ruleAAlphabetsTerminalExpression.current; } 
	 EOF 
;

// Rule AAlphabetsTerminalExpression
ruleAAlphabetsTerminalExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAAlphabetsTerminalExpressionAccess().getAParanthesizedAlphabetsExpressionParserRuleCall_0()); 
    }
    this_AParanthesizedAlphabetsExpression_0=ruleAParanthesizedAlphabetsExpression
    { 
        $current = $this_AParanthesizedAlphabetsExpression_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getAAlphabetsTerminalExpressionAccess().getACaseExpressionParserRuleCall_1()); 
    }
    this_ACaseExpression_1=ruleACaseExpression
    { 
        $current = $this_ACaseExpression_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getAAlphabetsTerminalExpressionAccess().getAReduceExpressionParserRuleCall_2()); 
    }
    this_AReduceExpression_2=ruleAReduceExpression
    { 
        $current = $this_AReduceExpression_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getAAlphabetsTerminalExpressionAccess().getAMultiArgExpressionParserRuleCall_3()); 
    }
    this_AMultiArgExpression_3=ruleAMultiArgExpression
    { 
        $current = $this_AMultiArgExpression_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getAAlphabetsTerminalExpressionAccess().getAConstantExpressionParserRuleCall_4()); 
    }
    this_AConstantExpression_4=ruleAConstantExpression
    { 
        $current = $this_AConstantExpression_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getAAlphabetsTerminalExpressionAccess().getAVariableExpressionParserRuleCall_5()); 
    }
    this_AVariableExpression_5=ruleAVariableExpression
    { 
        $current = $this_AVariableExpression_5.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getAAlphabetsTerminalExpressionAccess().getAIndexExpressionParserRuleCall_6()); 
    }
    this_AIndexExpression_6=ruleAIndexExpression
    { 
        $current = $this_AIndexExpression_6.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getAAlphabetsTerminalExpressionAccess().getADependenceExpressionParserRuleCall_7()); 
    }
    this_ADependenceExpression_7=ruleADependenceExpression
    { 
        $current = $this_ADependenceExpression_7.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getAAlphabetsTerminalExpressionAccess().getADependenceInArrayNotationParserRuleCall_8()); 
    }
    this_ADependenceInArrayNotation_8=ruleADependenceInArrayNotation
    { 
        $current = $this_ADependenceInArrayNotation_8.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleAParanthesizedAlphabetsExpression
entryRuleAParanthesizedAlphabetsExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAParanthesizedAlphabetsExpressionRule()); }
	 iv_ruleAParanthesizedAlphabetsExpression=ruleAParanthesizedAlphabetsExpression 
	 { $current=$iv_ruleAParanthesizedAlphabetsExpression.current; } 
	 EOF 
;

// Rule AParanthesizedAlphabetsExpression
ruleAParanthesizedAlphabetsExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='(' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getAParanthesizedAlphabetsExpressionAccess().getLeftParenthesisKeyword_0());
    }

    { 
        newCompositeNode(grammarAccess.getAParanthesizedAlphabetsExpressionAccess().getAAlphabetsExpressionParserRuleCall_1()); 
    }
    this_AAlphabetsExpression_1=ruleAAlphabetsExpression
    { 
        $current = $this_AAlphabetsExpression_1.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_2=')' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAParanthesizedAlphabetsExpressionAccess().getRightParenthesisKeyword_2());
    }
)
;





// Entry rule entryRuleAOrExpression
entryRuleAOrExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAOrExpressionRule()); }
	 iv_ruleAOrExpression=ruleAOrExpression 
	 { $current=$iv_ruleAOrExpression.current; } 
	 EOF 
;

// Rule AOrExpression
ruleAOrExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAOrExpressionAccess().getAAndExpressionParserRuleCall_0()); 
    }
    this_AAndExpression_0=ruleAAndExpression
    { 
        $current = $this_AAndExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getAOrExpressionAccess().getAOrExpressionLeftAction_1_0(),
            $current);
    }
)(
(
(
		lv_operator_2_1=RULE_OP_OR
		{
			newLeafNode(lv_operator_2_1, grammarAccess.getAOrExpressionAccess().getOperatorOP_ORTerminalRuleCall_1_1_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAOrExpressionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"operator",
        		lv_operator_2_1, 
        		"OP_OR");
	    }

    |		lv_operator_2_2=RULE_XOP_OR
		{
			newLeafNode(lv_operator_2_2, grammarAccess.getAOrExpressionAccess().getOperatorXOP_ORTerminalRuleCall_1_1_0_1()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAOrExpressionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"operator",
        		lv_operator_2_2, 
        		"XOP_OR");
	    }

)

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAOrExpressionAccess().getRightAAndExpressionParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleAAndExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAOrExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"AAndExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleAAndExpression
entryRuleAAndExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAAndExpressionRule()); }
	 iv_ruleAAndExpression=ruleAAndExpression 
	 { $current=$iv_ruleAAndExpression.current; } 
	 EOF 
;

// Rule AAndExpression
ruleAAndExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAAndExpressionAccess().getARelationalExpressionParserRuleCall_0()); 
    }
    this_ARelationalExpression_0=ruleARelationalExpression
    { 
        $current = $this_ARelationalExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getAAndExpressionAccess().getAAndExpressionLeftAction_1_0(),
            $current);
    }
)(
(
(
		lv_operator_2_1=RULE_OP_AND
		{
			newLeafNode(lv_operator_2_1, grammarAccess.getAAndExpressionAccess().getOperatorOP_ANDTerminalRuleCall_1_1_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAAndExpressionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"operator",
        		lv_operator_2_1, 
        		"OP_AND");
	    }

    |		lv_operator_2_2=RULE_OP_NAND
		{
			newLeafNode(lv_operator_2_2, grammarAccess.getAAndExpressionAccess().getOperatorOP_NANDTerminalRuleCall_1_1_0_1()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAAndExpressionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"operator",
        		lv_operator_2_2, 
        		"OP_NAND");
	    }

)

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAAndExpressionAccess().getRightARelationalExpressionParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleARelationalExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAAndExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"ARelationalExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleARelationalExpression
entryRuleARelationalExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getARelationalExpressionRule()); }
	 iv_ruleARelationalExpression=ruleARelationalExpression 
	 { $current=$iv_ruleARelationalExpression.current; } 
	 EOF 
;

// Rule ARelationalExpression
ruleARelationalExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getARelationalExpressionAccess().getAAdditiveExpressionParserRuleCall_0()); 
    }
    this_AAdditiveExpression_0=ruleAAdditiveExpression
    { 
        $current = $this_AAdditiveExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getARelationalExpressionAccess().getARelationalExpressionLeftAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getARelationalExpressionAccess().getOperatorRelationalOpParserRuleCall_1_1_0()); 
	    }
		lv_operator_2_0=ruleRelationalOp		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getARelationalExpressionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_2_0, 
        		"RelationalOp");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getARelationalExpressionAccess().getRightAAdditiveExpressionParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleAAdditiveExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getARelationalExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"AAdditiveExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleAAdditiveExpression
entryRuleAAdditiveExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAAdditiveExpressionRule()); }
	 iv_ruleAAdditiveExpression=ruleAAdditiveExpression 
	 { $current=$iv_ruleAAdditiveExpression.current; } 
	 EOF 
;

// Rule AAdditiveExpression
ruleAAdditiveExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAAdditiveExpressionAccess().getAMultiplicativeExpressionParserRuleCall_0()); 
    }
    this_AMultiplicativeExpression_0=ruleAMultiplicativeExpression
    { 
        $current = $this_AMultiplicativeExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getAAdditiveExpressionAccess().getAAdditiveExpressionLeftAction_1_0(),
            $current);
    }
)(
(
(
		lv_op_2_1=RULE_OP_PLUS
		{
			newLeafNode(lv_op_2_1, grammarAccess.getAAdditiveExpressionAccess().getOpOP_PLUSTerminalRuleCall_1_1_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAAdditiveExpressionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"op",
        		lv_op_2_1, 
        		"OP_PLUS");
	    }

    |		lv_op_2_2=RULE_OP_MINUS
		{
			newLeafNode(lv_op_2_2, grammarAccess.getAAdditiveExpressionAccess().getOpOP_MINUSTerminalRuleCall_1_1_0_1()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAAdditiveExpressionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"op",
        		lv_op_2_2, 
        		"OP_MINUS");
	    }

)

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAAdditiveExpressionAccess().getRightAMultiplicativeExpressionParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleAMultiplicativeExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAAdditiveExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"AMultiplicativeExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleAMultiplicativeExpression
entryRuleAMultiplicativeExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAMultiplicativeExpressionRule()); }
	 iv_ruleAMultiplicativeExpression=ruleAMultiplicativeExpression 
	 { $current=$iv_ruleAMultiplicativeExpression.current; } 
	 EOF 
;

// Rule AMultiplicativeExpression
ruleAMultiplicativeExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAMultiplicativeExpressionAccess().getAMinMaxExpressionParserRuleCall_0()); 
    }
    this_AMinMaxExpression_0=ruleAMinMaxExpression
    { 
        $current = $this_AMinMaxExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getAMultiplicativeExpressionAccess().getAMultiplicativeExpressionLeftAction_1_0(),
            $current);
    }
)(
(
(
		lv_op_2_1=RULE_OP_MUL
		{
			newLeafNode(lv_op_2_1, grammarAccess.getAMultiplicativeExpressionAccess().getOpOP_MULTerminalRuleCall_1_1_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAMultiplicativeExpressionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"op",
        		lv_op_2_1, 
        		"OP_MUL");
	    }

    |		lv_op_2_2=RULE_OP_DIV
		{
			newLeafNode(lv_op_2_2, grammarAccess.getAMultiplicativeExpressionAccess().getOpOP_DIVTerminalRuleCall_1_1_0_1()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAMultiplicativeExpressionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"op",
        		lv_op_2_2, 
        		"OP_DIV");
	    }

)

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAMultiplicativeExpressionAccess().getRightAMinMaxExpressionParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleAMinMaxExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAMultiplicativeExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"AMinMaxExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleAMinMaxExpression
entryRuleAMinMaxExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAMinMaxExpressionRule()); }
	 iv_ruleAMinMaxExpression=ruleAMinMaxExpression 
	 { $current=$iv_ruleAMinMaxExpression.current; } 
	 EOF 
;

// Rule AMinMaxExpression
ruleAMinMaxExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAMinMaxExpressionAccess().getAUnaryOrTerminalExpressionParserRuleCall_0()); 
    }
    this_AUnaryOrTerminalExpression_0=ruleAUnaryOrTerminalExpression
    { 
        $current = $this_AUnaryOrTerminalExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getAMinMaxExpressionAccess().getAMinMaxExpressionLeftAction_1_0(),
            $current);
    }
)(
(
(
		lv_op_2_1=RULE_OP_MIN
		{
			newLeafNode(lv_op_2_1, grammarAccess.getAMinMaxExpressionAccess().getOpOP_MINTerminalRuleCall_1_1_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAMinMaxExpressionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"op",
        		lv_op_2_1, 
        		"OP_MIN");
	    }

    |		lv_op_2_2=RULE_OP_MAX
		{
			newLeafNode(lv_op_2_2, grammarAccess.getAMinMaxExpressionAccess().getOpOP_MAXTerminalRuleCall_1_1_0_1()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAMinMaxExpressionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"op",
        		lv_op_2_2, 
        		"OP_MAX");
	    }

)

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAMinMaxExpressionAccess().getRightAUnaryOrTerminalExpressionParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleAUnaryOrTerminalExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAMinMaxExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"AUnaryOrTerminalExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleAUnaryOrTerminalExpression
entryRuleAUnaryOrTerminalExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAUnaryOrTerminalExpressionRule()); }
	 iv_ruleAUnaryOrTerminalExpression=ruleAUnaryOrTerminalExpression 
	 { $current=$iv_ruleAUnaryOrTerminalExpression.current; } 
	 EOF 
;

// Rule AUnaryOrTerminalExpression
ruleAUnaryOrTerminalExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAUnaryOrTerminalExpressionAccess().getAUnaryExpressionParserRuleCall_0()); 
    }
    this_AUnaryExpression_0=ruleAUnaryExpression
    { 
        $current = $this_AUnaryExpression_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getAUnaryOrTerminalExpressionAccess().getAAlphabetsTerminalExpressionParserRuleCall_1()); 
    }
    this_AAlphabetsTerminalExpression_1=ruleAAlphabetsTerminalExpression
    { 
        $current = $this_AAlphabetsTerminalExpression_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleAUnaryExpression
entryRuleAUnaryExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAUnaryExpressionRule()); }
	 iv_ruleAUnaryExpression=ruleAUnaryExpression 
	 { $current=$iv_ruleAUnaryExpression.current; } 
	 EOF 
;

// Rule AUnaryExpression
ruleAUnaryExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAUnaryExpressionAccess().getANotExpressionParserRuleCall_0()); 
    }
    this_ANotExpression_0=ruleANotExpression
    { 
        $current = $this_ANotExpression_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getAUnaryExpressionAccess().getANegateExpressionParserRuleCall_1()); 
    }
    this_ANegateExpression_1=ruleANegateExpression
    { 
        $current = $this_ANegateExpression_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleANotExpression
entryRuleANotExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getANotExpressionRule()); }
	 iv_ruleANotExpression=ruleANotExpression 
	 { $current=$iv_ruleANotExpression.current; } 
	 EOF 
;

// Rule ANotExpression
ruleANotExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_op_0_0=	'not' 
    {
        newLeafNode(lv_op_0_0, grammarAccess.getANotExpressionAccess().getOpNotKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getANotExpressionRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_0_0, "not");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getANotExpressionAccess().getExprAAlphabetsTerminalExpressionParserRuleCall_1_0()); 
	    }
		lv_expr_1_0=ruleAAlphabetsTerminalExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getANotExpressionRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_1_0, 
        		"AAlphabetsTerminalExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleANegateExpression
entryRuleANegateExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getANegateExpressionRule()); }
	 iv_ruleANegateExpression=ruleANegateExpression 
	 { $current=$iv_ruleANegateExpression.current; } 
	 EOF 
;

// Rule ANegateExpression
ruleANegateExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_op_0_0=RULE_OP_MINUS
		{
			newLeafNode(lv_op_0_0, grammarAccess.getANegateExpressionAccess().getOpOP_MINUSTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getANegateExpressionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"op",
        		lv_op_0_0, 
        		"OP_MINUS");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getANegateExpressionAccess().getExprAAlphabetsTerminalExpressionParserRuleCall_1_0()); 
	    }
		lv_expr_1_0=ruleAAlphabetsTerminalExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getANegateExpressionRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_1_0, 
        		"AAlphabetsTerminalExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleACaseExpression
entryRuleACaseExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getACaseExpressionRule()); }
	 iv_ruleACaseExpression=ruleACaseExpression 
	 { $current=$iv_ruleACaseExpression.current; } 
	 EOF 
;

// Rule ACaseExpression
ruleACaseExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='case' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getACaseExpressionAccess().getCaseKeyword_0());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getACaseExpressionAccess().getExprsAAlphabetsExpressionParserRuleCall_1_0_0()); 
	    }
		lv_exprs_1_0=ruleAAlphabetsExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getACaseExpressionRule());
	        }
       		add(
       			$current, 
       			"exprs",
        		lv_exprs_1_0, 
        		"AAlphabetsExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=';' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getACaseExpressionAccess().getSemicolonKeyword_1_1());
    }
)+	otherlv_3='esac' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getACaseExpressionAccess().getEsacKeyword_2());
    }
)
;





// Entry rule entryRuleADependenceExpression
entryRuleADependenceExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getADependenceExpressionRule()); }
	 iv_ruleADependenceExpression=ruleADependenceExpression 
	 { $current=$iv_ruleADependenceExpression.current; } 
	 EOF 
;

// Rule ADependenceExpression
ruleADependenceExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getADependenceExpressionAccess().getFuncAFunctionParserRuleCall_0_0()); 
	    }
		lv_func_0_0=ruleAFunction		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getADependenceExpressionRule());
	        }
       		set(
       			$current, 
       			"func",
        		lv_func_0_0, 
        		"AFunction");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='@' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getADependenceExpressionAccess().getCommercialAtKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getADependenceExpressionAccess().getExprAAlphabetsTerminalExpressionParserRuleCall_2_0()); 
	    }
		lv_expr_2_0=ruleAAlphabetsTerminalExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getADependenceExpressionRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_2_0, 
        		"AAlphabetsTerminalExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleADependenceInArrayNotation
entryRuleADependenceInArrayNotation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getADependenceInArrayNotationRule()); }
	 iv_ruleADependenceInArrayNotation=ruleADependenceInArrayNotation 
	 { $current=$iv_ruleADependenceInArrayNotation.current; } 
	 EOF 
;

// Rule ADependenceInArrayNotation
ruleADependenceInArrayNotation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getADependenceInArrayNotationAccess().getVarVariableIdentifierParserRuleCall_0_0()); 
	    }
		lv_var_0_0=ruleVariableIdentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getADependenceInArrayNotationRule());
	        }
       		set(
       			$current, 
       			"var",
        		lv_var_0_0, 
        		"VariableIdentifier");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='[' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getADependenceInArrayNotationAccess().getLeftSquareBracketKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getADependenceInArrayNotationAccess().getDepAIndexAffineExpressionListParserRuleCall_2_0()); 
	    }
		lv_dep_2_0=ruleAIndexAffineExpressionList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getADependenceInArrayNotationRule());
	        }
       		set(
       			$current, 
       			"dep",
        		lv_dep_2_0, 
        		"AIndexAffineExpressionList");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=']' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getADependenceInArrayNotationAccess().getRightSquareBracketKeyword_3());
    }
)
;





// Entry rule entryRuleAIfExpression
entryRuleAIfExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAIfExpressionRule()); }
	 iv_ruleAIfExpression=ruleAIfExpression 
	 { $current=$iv_ruleAIfExpression.current; } 
	 EOF 
;

// Rule AIfExpression
ruleAIfExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='if' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getAIfExpressionAccess().getIfKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAIfExpressionAccess().getCondAAlphabetsExpressionParserRuleCall_1_0()); 
	    }
		lv_cond_1_0=ruleAAlphabetsExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAIfExpressionRule());
	        }
       		set(
       			$current, 
       			"cond",
        		lv_cond_1_0, 
        		"AAlphabetsExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='then' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAIfExpressionAccess().getThenKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAIfExpressionAccess().getThenAAlphabetsExpressionParserRuleCall_3_0()); 
	    }
		lv_then_3_0=ruleAAlphabetsExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAIfExpressionRule());
	        }
       		set(
       			$current, 
       			"then",
        		lv_then_3_0, 
        		"AAlphabetsExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4='else' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getAIfExpressionAccess().getElseKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAIfExpressionAccess().getElseAAlphabetsExpressionParserRuleCall_5_0()); 
	    }
		lv_else_5_0=ruleAAlphabetsExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAIfExpressionRule());
	        }
       		set(
       			$current, 
       			"else",
        		lv_else_5_0, 
        		"AAlphabetsExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleAIndexExpression
entryRuleAIndexExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAIndexExpressionRule()); }
	 iv_ruleAIndexExpression=ruleAIndexExpression 
	 { $current=$iv_ruleAIndexExpression.current; } 
	 EOF 
;

// Rule AIndexExpression
ruleAIndexExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='[' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getAIndexExpressionAccess().getLeftSquareBracketKeyword_0_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAIndexExpressionAccess().getFuncIndexAffineExpressionParserRuleCall_0_1_0()); 
	    }
		lv_func_1_0=ruleIndexAffineExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAIndexExpressionRule());
	        }
       		set(
       			$current, 
       			"func",
        		lv_func_1_0, 
        		"IndexAffineExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=']' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAIndexExpressionAccess().getRightSquareBracketKeyword_0_2());
    }
)
    |(	otherlv_3='val(' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getAIndexExpressionAccess().getValKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAIndexExpressionAccess().getIndexesAIndexListParserRuleCall_1_1_0()); 
	    }
		lv_indexes_4_0=ruleAIndexList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAIndexExpressionRule());
	        }
       		set(
       			$current, 
       			"indexes",
        		lv_indexes_4_0, 
        		"AIndexList");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5='->' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getAIndexExpressionAccess().getHyphenMinusGreaterThanSignKeyword_1_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAIndexExpressionAccess().getFuncIndexAffineExpressionParserRuleCall_1_3_0()); 
	    }
		lv_func_6_0=ruleIndexAffineExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAIndexExpressionRule());
	        }
       		set(
       			$current, 
       			"func",
        		lv_func_6_0, 
        		"IndexAffineExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_7=')' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getAIndexExpressionAccess().getRightParenthesisKeyword_1_4());
    }
))
;





// Entry rule entryRuleAReduceExpression
entryRuleAReduceExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAReduceExpressionRule()); }
	 iv_ruleAReduceExpression=ruleAReduceExpression 
	 { $current=$iv_ruleAReduceExpression.current; } 
	 EOF 
;

// Rule AReduceExpression
ruleAReduceExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='reduce' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getAReduceExpressionAccess().getReduceKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAReduceExpressionAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAReduceExpressionAccess().getOpReductionOpParserRuleCall_2_0()); 
	    }
		lv_op_2_0=ruleReductionOp		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAReduceExpressionRule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_2_0, 
        		"ReductionOp");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getAReduceExpressionAccess().getCommaKeyword_3());
    }
(
(
(
		{ 
	        newCompositeNode(grammarAccess.getAReduceExpressionAccess().getProjectionAFunctionParserRuleCall_4_0_0()); 
	    }
		lv_projection_4_1=ruleAFunction		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAReduceExpressionRule());
	        }
       		set(
       			$current, 
       			"projection",
        		lv_projection_4_1, 
        		"AFunction");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getAReduceExpressionAccess().getProjectionAFunctionInArrayNotationParserRuleCall_4_0_1()); 
	    }
		lv_projection_4_2=ruleAFunctionInArrayNotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAReduceExpressionRule());
	        }
       		set(
       			$current, 
       			"projection",
        		lv_projection_4_2, 
        		"AFunctionInArrayNotation");
	        afterParserOrEnumRuleCall();
	    }

)

)
)	otherlv_5=',' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getAReduceExpressionAccess().getCommaKeyword_5());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAReduceExpressionAccess().getExprAAlphabetsExpressionParserRuleCall_6_0()); 
	    }
		lv_expr_6_0=ruleAAlphabetsExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAReduceExpressionRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_6_0, 
        		"AAlphabetsExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_7=')' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getAReduceExpressionAccess().getRightParenthesisKeyword_7());
    }
)
;





// Entry rule entryRuleARestrictExpression
entryRuleARestrictExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getARestrictExpressionRule()); }
	 iv_ruleARestrictExpression=ruleARestrictExpression 
	 { $current=$iv_ruleARestrictExpression.current; } 
	 EOF 
;

// Rule ARestrictExpression
ruleARestrictExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getARestrictExpressionAccess().getDomainADomainParserRuleCall_0_0()); 
	    }
		lv_domain_0_0=ruleADomain		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getARestrictExpressionRule());
	        }
       		set(
       			$current, 
       			"domain",
        		lv_domain_0_0, 
        		"ADomain");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getARestrictExpressionAccess().getColonKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getARestrictExpressionAccess().getExprAAlphabetsExpressionParserRuleCall_2_0()); 
	    }
		lv_expr_2_0=ruleAAlphabetsExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getARestrictExpressionRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_2_0, 
        		"AAlphabetsExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleAVariableExpression
entryRuleAVariableExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAVariableExpressionRule()); }
	 iv_ruleAVariableExpression=ruleAVariableExpression 
	 { $current=$iv_ruleAVariableExpression.current; } 
	 EOF 
;

// Rule AVariableExpression
ruleAVariableExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getAVariableExpressionAccess().getVarVariableIdentifierParserRuleCall_0()); 
	    }
		lv_var_0_0=ruleVariableIdentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAVariableExpressionRule());
	        }
       		set(
       			$current, 
       			"var",
        		lv_var_0_0, 
        		"VariableIdentifier");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleAConstantExpression
entryRuleAConstantExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAConstantExpressionRule()); }
	 iv_ruleAConstantExpression=ruleAConstantExpression 
	 { $current=$iv_ruleAConstantExpression.current; } 
	 EOF 
;

// Rule AConstantExpression
ruleAConstantExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAConstantExpressionAccess().getABooleanExpressionParserRuleCall_0()); 
    }
    this_ABooleanExpression_0=ruleABooleanExpression
    { 
        $current = $this_ABooleanExpression_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getAConstantExpressionAccess().getARealExpressionParserRuleCall_1()); 
    }
    this_ARealExpression_1=ruleARealExpression
    { 
        $current = $this_ARealExpression_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getAConstantExpressionAccess().getAIntegerExpressionParserRuleCall_2()); 
    }
    this_AIntegerExpression_2=ruleAIntegerExpression
    { 
        $current = $this_AIntegerExpression_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleABooleanExpression
entryRuleABooleanExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getABooleanExpressionRule()); }
	 iv_ruleABooleanExpression=ruleABooleanExpression 
	 { $current=$iv_ruleABooleanExpression.current; } 
	 EOF 
;

// Rule ABooleanExpression
ruleABooleanExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_value_0_0=RULE_BOOLEAN
		{
			newLeafNode(lv_value_0_0, grammarAccess.getABooleanExpressionAccess().getValueBOOLEANTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getABooleanExpressionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"BOOLEAN");
	    }

)
)
;





// Entry rule entryRuleAIntegerExpression
entryRuleAIntegerExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAIntegerExpressionRule()); }
	 iv_ruleAIntegerExpression=ruleAIntegerExpression 
	 { $current=$iv_ruleAIntegerExpression.current; } 
	 EOF 
;

// Rule AIntegerExpression
ruleAIntegerExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_value_0_0=RULE_INT
		{
			newLeafNode(lv_value_0_0, grammarAccess.getAIntegerExpressionAccess().getValueINTTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAIntegerExpressionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"INT");
	    }

)
)
;





// Entry rule entryRuleARealExpression
entryRuleARealExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getARealExpressionRule()); }
	 iv_ruleARealExpression=ruleARealExpression 
	 { $current=$iv_ruleARealExpression.current; } 
	 EOF 
;

// Rule ARealExpression
ruleARealExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_value_0_0=RULE_REAL
		{
			newLeafNode(lv_value_0_0, grammarAccess.getARealExpressionAccess().getValueREALTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getARealExpressionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"REAL");
	    }

)
)
;





// Entry rule entryRuleAMultiArgExpression
entryRuleAMultiArgExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAMultiArgExpressionRule()); }
	 iv_ruleAMultiArgExpression=ruleAMultiArgExpression 
	 { $current=$iv_ruleAMultiArgExpression.current; } 
	 EOF 
;

// Rule AMultiArgExpression
ruleAMultiArgExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAMultiArgExpressionAccess().getAMultiArgArithmeticExpressionParserRuleCall_0()); 
    }
    this_AMultiArgArithmeticExpression_0=ruleAMultiArgArithmeticExpression
    { 
        $current = $this_AMultiArgArithmeticExpression_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getAMultiArgExpressionAccess().getAMultiArgLogicalExpressionParserRuleCall_1()); 
    }
    this_AMultiArgLogicalExpression_1=ruleAMultiArgLogicalExpression
    { 
        $current = $this_AMultiArgLogicalExpression_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getAMultiArgExpressionAccess().getAExternalFunctionCallParserRuleCall_2()); 
    }
    this_AExternalFunctionCall_2=ruleAExternalFunctionCall
    { 
        $current = $this_AExternalFunctionCall_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleAMultiArgArithmeticExpression
entryRuleAMultiArgArithmeticExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAMultiArgArithmeticExpressionRule()); }
	 iv_ruleAMultiArgArithmeticExpression=ruleAMultiArgArithmeticExpression 
	 { $current=$iv_ruleAMultiArgArithmeticExpression.current; } 
	 EOF 
;

// Rule AMultiArgArithmeticExpression
ruleAMultiArgArithmeticExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getAMultiArgArithmeticExpressionAccess().getOpArithmeticOpParserRuleCall_0_0()); 
	    }
		lv_op_0_0=ruleArithmeticOp		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAMultiArgArithmeticExpressionRule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_0_0, 
        		"ArithmeticOp");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAMultiArgArithmeticExpressionAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAMultiArgArithmeticExpressionAccess().getExprsAAlphabetsExpressionParserRuleCall_2_0()); 
	    }
		lv_exprs_2_0=ruleAAlphabetsExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAMultiArgArithmeticExpressionRule());
	        }
       		add(
       			$current, 
       			"exprs",
        		lv_exprs_2_0, 
        		"AAlphabetsExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getAMultiArgArithmeticExpressionAccess().getCommaKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAMultiArgArithmeticExpressionAccess().getExprsAAlphabetsExpressionParserRuleCall_3_1_0()); 
	    }
		lv_exprs_4_0=ruleAAlphabetsExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAMultiArgArithmeticExpressionRule());
	        }
       		add(
       			$current, 
       			"exprs",
        		lv_exprs_4_0, 
        		"AAlphabetsExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))+	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getAMultiArgArithmeticExpressionAccess().getRightParenthesisKeyword_4());
    }
)
;





// Entry rule entryRuleAMultiArgLogicalExpression
entryRuleAMultiArgLogicalExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAMultiArgLogicalExpressionRule()); }
	 iv_ruleAMultiArgLogicalExpression=ruleAMultiArgLogicalExpression 
	 { $current=$iv_ruleAMultiArgLogicalExpression.current; } 
	 EOF 
;

// Rule AMultiArgLogicalExpression
ruleAMultiArgLogicalExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getAMultiArgLogicalExpressionAccess().getOpLogicalOpParserRuleCall_0_0()); 
	    }
		lv_op_0_0=ruleLogicalOp		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAMultiArgLogicalExpressionRule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_0_0, 
        		"LogicalOp");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAMultiArgLogicalExpressionAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAMultiArgLogicalExpressionAccess().getExprsAAlphabetsExpressionParserRuleCall_2_0()); 
	    }
		lv_exprs_2_0=ruleAAlphabetsExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAMultiArgLogicalExpressionRule());
	        }
       		add(
       			$current, 
       			"exprs",
        		lv_exprs_2_0, 
        		"AAlphabetsExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getAMultiArgLogicalExpressionAccess().getCommaKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAMultiArgLogicalExpressionAccess().getExprsAAlphabetsExpressionParserRuleCall_3_1_0()); 
	    }
		lv_exprs_4_0=ruleAAlphabetsExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAMultiArgLogicalExpressionRule());
	        }
       		add(
       			$current, 
       			"exprs",
        		lv_exprs_4_0, 
        		"AAlphabetsExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))+	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getAMultiArgLogicalExpressionAccess().getRightParenthesisKeyword_4());
    }
)
;





// Entry rule entryRuleAExternalFunctionCall
entryRuleAExternalFunctionCall returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAExternalFunctionCallRule()); }
	 iv_ruleAExternalFunctionCall=ruleAExternalFunctionCall 
	 { $current=$iv_ruleAExternalFunctionCall.current; } 
	 EOF 
;

// Rule AExternalFunctionCall
ruleAExternalFunctionCall returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_func_0_0=RULE_ID
		{
			newLeafNode(lv_func_0_0, grammarAccess.getAExternalFunctionCallAccess().getFuncIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAExternalFunctionCallRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"func",
        		lv_func_0_0, 
        		"ID");
	    }

)
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAExternalFunctionCallAccess().getLeftParenthesisKeyword_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getAExternalFunctionCallAccess().getExprsAAlphabetsExpressionParserRuleCall_2_0_0()); 
	    }
		lv_exprs_2_0=ruleAAlphabetsExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAExternalFunctionCallRule());
	        }
       		add(
       			$current, 
       			"exprs",
        		lv_exprs_2_0, 
        		"AAlphabetsExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getAExternalFunctionCallAccess().getCommaKeyword_2_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAExternalFunctionCallAccess().getExprsAAlphabetsExpressionParserRuleCall_2_1_1_0()); 
	    }
		lv_exprs_4_0=ruleAAlphabetsExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAExternalFunctionCallRule());
	        }
       		add(
       			$current, 
       			"exprs",
        		lv_exprs_4_0, 
        		"AAlphabetsExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getAExternalFunctionCallAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleIndexIdentifier
entryRuleIndexIdentifier returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getIndexIdentifierRule()); } 
	 iv_ruleIndexIdentifier=ruleIndexIdentifier 
	 { $current=$iv_ruleIndexIdentifier.current.getText(); }  
	 EOF 
;

// Rule IndexIdentifier
ruleIndexIdentifier returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getIndexIdentifierAccess().getIDTerminalRuleCall()); 
    }

    ;





// Entry rule entryRuleAIndexList
entryRuleAIndexList returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAIndexListRule()); }
	 iv_ruleAIndexList=ruleAIndexList 
	 { $current=$iv_ruleAIndexList.current; } 
	 EOF 
;

// Rule AIndexList
ruleAIndexList returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAIndexListAccess().getAIndexListAction_0(),
            $current);
    }
)((
(
		{ 
	        newCompositeNode(grammarAccess.getAIndexListAccess().getIdsIndexIdentifierParserRuleCall_1_0_0()); 
	    }
		lv_ids_1_0=ruleIndexIdentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAIndexListRule());
	        }
       		add(
       			$current, 
       			"ids",
        		lv_ids_1_0, 
        		"IndexIdentifier");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAIndexListAccess().getCommaKeyword_1_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAIndexListAccess().getIdsIndexIdentifierParserRuleCall_1_1_1_0()); 
	    }
		lv_ids_3_0=ruleIndexIdentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAIndexListRule());
	        }
       		add(
       			$current, 
       			"ids",
        		lv_ids_3_0, 
        		"IndexIdentifier");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?)
;





// Entry rule entryRuleIndexAffineExpression
entryRuleIndexAffineExpression returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getIndexAffineExpressionRule()); } 
	 iv_ruleIndexAffineExpression=ruleIndexAffineExpression 
	 { $current=$iv_ruleIndexAffineExpression.current.getText(); }  
	 EOF 
;

// Rule IndexAffineExpression
ruleIndexAffineExpression returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((    this_OP_MINUS_0=RULE_OP_MINUS    {
		$current.merge(this_OP_MINUS_0);
    }

    { 
    newLeafNode(this_OP_MINUS_0, grammarAccess.getIndexAffineExpressionAccess().getOP_MINUSTerminalRuleCall_0()); 
    }
)?
    { 
        newCompositeNode(grammarAccess.getIndexAffineExpressionAccess().getIndexAffineExpressionTerminalParserRuleCall_1()); 
    }
    this_IndexAffineExpressionTerminal_1=ruleIndexAffineExpressionTerminal    {
		$current.merge(this_IndexAffineExpressionTerminal_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
((    this_OP_PLUS_2=RULE_OP_PLUS    {
		$current.merge(this_OP_PLUS_2);
    }

    { 
    newLeafNode(this_OP_PLUS_2, grammarAccess.getIndexAffineExpressionAccess().getOP_PLUSTerminalRuleCall_2_0_0()); 
    }

    |    this_OP_MINUS_3=RULE_OP_MINUS    {
		$current.merge(this_OP_MINUS_3);
    }

    { 
    newLeafNode(this_OP_MINUS_3, grammarAccess.getIndexAffineExpressionAccess().getOP_MINUSTerminalRuleCall_2_0_1()); 
    }
)
    { 
        newCompositeNode(grammarAccess.getIndexAffineExpressionAccess().getIndexAffineExpressionParserRuleCall_2_1()); 
    }
    this_IndexAffineExpression_4=ruleIndexAffineExpression    {
		$current.merge(this_IndexAffineExpression_4);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*)
    ;





// Entry rule entryRuleIndexAffineExpressionTerminal
entryRuleIndexAffineExpressionTerminal returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getIndexAffineExpressionTerminalRule()); } 
	 iv_ruleIndexAffineExpressionTerminal=ruleIndexAffineExpressionTerminal 
	 { $current=$iv_ruleIndexAffineExpressionTerminal.current.getText(); }  
	 EOF 
;

// Rule IndexAffineExpressionTerminal
ruleIndexAffineExpressionTerminal returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_INT_0=RULE_INT    {
		$current.merge(this_INT_0);
    }

    { 
    newLeafNode(this_INT_0, grammarAccess.getIndexAffineExpressionTerminalAccess().getINTTerminalRuleCall_0()); 
    }

    |((    this_INT_1=RULE_INT    {
		$current.merge(this_INT_1);
    }

    { 
    newLeafNode(this_INT_1, grammarAccess.getIndexAffineExpressionTerminalAccess().getINTTerminalRuleCall_1_0()); 
    }
)?
    { 
        newCompositeNode(grammarAccess.getIndexAffineExpressionTerminalAccess().getIndexIdentifierParserRuleCall_1_1()); 
    }
    this_IndexIdentifier_2=ruleIndexIdentifier    {
		$current.merge(this_IndexIdentifier_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
))
    ;





// Entry rule entryRuleAIndexAffineExpressionList
entryRuleAIndexAffineExpressionList returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAIndexAffineExpressionListRule()); }
	 iv_ruleAIndexAffineExpressionList=ruleAIndexAffineExpressionList 
	 { $current=$iv_ruleAIndexAffineExpressionList.current; } 
	 EOF 
;

// Rule AIndexAffineExpressionList
ruleAIndexAffineExpressionList returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAIndexAffineExpressionListAccess().getAIndexAffineExpressionListAction_0(),
            $current);
    }
)((
(
		{ 
	        newCompositeNode(grammarAccess.getAIndexAffineExpressionListAccess().getExprsIndexAffineExpressionParserRuleCall_1_0_0()); 
	    }
		lv_exprs_1_0=ruleIndexAffineExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAIndexAffineExpressionListRule());
	        }
       		add(
       			$current, 
       			"exprs",
        		lv_exprs_1_0, 
        		"IndexAffineExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAIndexAffineExpressionListAccess().getCommaKeyword_1_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAIndexAffineExpressionListAccess().getExprsIndexAffineExpressionParserRuleCall_1_1_1_0()); 
	    }
		lv_exprs_3_0=ruleIndexAffineExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAIndexAffineExpressionListRule());
	        }
       		add(
       			$current, 
       			"exprs",
        		lv_exprs_3_0, 
        		"IndexAffineExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?)
;





// Entry rule entryRuleAFunction
entryRuleAFunction returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAFunctionRule()); }
	 iv_ruleAFunction=ruleAFunction 
	 { $current=$iv_ruleAFunction.current; } 
	 EOF 
;

// Rule AFunction
ruleAFunction returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='(' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getAFunctionAccess().getLeftParenthesisKeyword_0_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAFunctionAccess().getIndexesAIndexListParserRuleCall_0_1_0()); 
	    }
		lv_indexes_1_0=ruleAIndexList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAFunctionRule());
	        }
       		set(
       			$current, 
       			"indexes",
        		lv_indexes_1_0, 
        		"AIndexList");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='->' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAFunctionAccess().getHyphenMinusGreaterThanSignKeyword_0_2());
    }
	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getAFunctionAccess().getRightParenthesisKeyword_0_3());
    }
)
    |(	otherlv_4='(' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getAFunctionAccess().getLeftParenthesisKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAFunctionAccess().getIndexesAIndexListParserRuleCall_1_1_0()); 
	    }
		lv_indexes_5_0=ruleAIndexList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAFunctionRule());
	        }
       		set(
       			$current, 
       			"indexes",
        		lv_indexes_5_0, 
        		"AIndexList");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_6='->' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getAFunctionAccess().getHyphenMinusGreaterThanSignKeyword_1_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAFunctionAccess().getFuncAIndexAffineExpressionListParserRuleCall_1_3_0()); 
	    }
		lv_func_7_0=ruleAIndexAffineExpressionList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAFunctionRule());
	        }
       		set(
       			$current, 
       			"func",
        		lv_func_7_0, 
        		"AIndexAffineExpressionList");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_8=')' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getAFunctionAccess().getRightParenthesisKeyword_1_4());
    }
))
;





// Entry rule entryRuleAFunctionInArrayNotation
entryRuleAFunctionInArrayNotation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAFunctionInArrayNotationRule()); }
	 iv_ruleAFunctionInArrayNotation=ruleAFunctionInArrayNotation 
	 { $current=$iv_ruleAFunctionInArrayNotation.current; } 
	 EOF 
;

// Rule AFunctionInArrayNotation
ruleAFunctionInArrayNotation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='[' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getAFunctionInArrayNotationAccess().getLeftSquareBracketKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAFunctionInArrayNotationAccess().getNewIdsAIndexAffineExpressionListParserRuleCall_1_0()); 
	    }
		lv_newIds_1_0=ruleAIndexAffineExpressionList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAFunctionInArrayNotationRule());
	        }
       		set(
       			$current, 
       			"newIds",
        		lv_newIds_1_0, 
        		"AIndexAffineExpressionList");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=']' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAFunctionInArrayNotationAccess().getRightSquareBracketKeyword_2());
    }
)
;





// Entry rule entryRuleAType
entryRuleAType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getATypeRule()); }
	 iv_ruleAType=ruleAType 
	 { $current=$iv_ruleAType.current; } 
	 EOF 
;

// Rule AType
ruleAType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_unsigned_0_0=	'unsigned' 
    {
        newLeafNode(lv_unsigned_0_0, grammarAccess.getATypeAccess().getUnsignedUnsignedKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getATypeRule());
	        }
       		setWithLastConsumed($current, "unsigned", lv_unsigned_0_0, "unsigned");
	    }

)
)?(
(
(
		{ 
	        newCompositeNode(grammarAccess.getATypeAccess().getTypeATypeIntegerParserRuleCall_1_0_0()); 
	    }
		lv_type_1_1=ruleATypeInteger		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getATypeRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_1_1, 
        		"ATypeInteger");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getATypeAccess().getTypeATypeFloatParserRuleCall_1_0_1()); 
	    }
		lv_type_1_2=ruleATypeFloat		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getATypeRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_1_2, 
        		"ATypeFloat");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getATypeAccess().getTypeATypeBooleanParserRuleCall_1_0_2()); 
	    }
		lv_type_1_3=ruleATypeBoolean		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getATypeRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_1_3, 
        		"ATypeBoolean");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getATypeAccess().getTypeATypeCharParserRuleCall_1_0_3()); 
	    }
		lv_type_1_4=ruleATypeChar		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getATypeRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_1_4, 
        		"ATypeChar");
	        afterParserOrEnumRuleCall();
	    }

)

)
))
;





// Entry rule entryRuleATypeInteger
entryRuleATypeInteger returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getATypeIntegerRule()); } 
	 iv_ruleATypeInteger=ruleATypeInteger 
	 { $current=$iv_ruleATypeInteger.current.getText(); }  
	 EOF 
;

// Rule ATypeInteger
ruleATypeInteger returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='int' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getATypeIntegerAccess().getIntKeyword_0()); 
    }

    |
	kw='longlong' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getATypeIntegerAccess().getLonglongKeyword_1()); 
    }

    |
	kw='long' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getATypeIntegerAccess().getLongKeyword_2()); 
    }

    |
	kw='short' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getATypeIntegerAccess().getShortKeyword_3()); 
    }
)
    ;





// Entry rule entryRuleATypeBoolean
entryRuleATypeBoolean returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getATypeBooleanRule()); } 
	 iv_ruleATypeBoolean=ruleATypeBoolean 
	 { $current=$iv_ruleATypeBoolean.current.getText(); }  
	 EOF 
;

// Rule ATypeBoolean
ruleATypeBoolean returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='bool' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getATypeBooleanAccess().getBoolKeyword()); 
    }

    ;





// Entry rule entryRuleATypeFloat
entryRuleATypeFloat returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getATypeFloatRule()); } 
	 iv_ruleATypeFloat=ruleATypeFloat 
	 { $current=$iv_ruleATypeFloat.current.getText(); }  
	 EOF 
;

// Rule ATypeFloat
ruleATypeFloat returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='float' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getATypeFloatAccess().getFloatKeyword_0()); 
    }

    |
	kw='double' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getATypeFloatAccess().getDoubleKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleATypeChar
entryRuleATypeChar returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getATypeCharRule()); } 
	 iv_ruleATypeChar=ruleATypeChar 
	 { $current=$iv_ruleATypeChar.current.getText(); }  
	 EOF 
;

// Rule ATypeChar
ruleATypeChar returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='char' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getATypeCharAccess().getCharKeyword()); 
    }

    ;





// Entry rule entryRuleReductionOp
entryRuleReductionOp returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getReductionOpRule()); } 
	 iv_ruleReductionOp=ruleReductionOp 
	 { $current=$iv_ruleReductionOp.current.getText(); }  
	 EOF 
;

// Rule ReductionOp
ruleReductionOp returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_OP_AND_0=RULE_OP_AND    {
		$current.merge(this_OP_AND_0);
    }

    { 
    newLeafNode(this_OP_AND_0, grammarAccess.getReductionOpAccess().getOP_ANDTerminalRuleCall_0()); 
    }

    |    this_OP_MAX_1=RULE_OP_MAX    {
		$current.merge(this_OP_MAX_1);
    }

    { 
    newLeafNode(this_OP_MAX_1, grammarAccess.getReductionOpAccess().getOP_MAXTerminalRuleCall_1()); 
    }

    |    this_OP_MIN_2=RULE_OP_MIN    {
		$current.merge(this_OP_MIN_2);
    }

    { 
    newLeafNode(this_OP_MIN_2, grammarAccess.getReductionOpAccess().getOP_MINTerminalRuleCall_2()); 
    }

    |    this_OP_MUL_3=RULE_OP_MUL    {
		$current.merge(this_OP_MUL_3);
    }

    { 
    newLeafNode(this_OP_MUL_3, grammarAccess.getReductionOpAccess().getOP_MULTerminalRuleCall_3()); 
    }

    |    this_OP_OR_4=RULE_OP_OR    {
		$current.merge(this_OP_OR_4);
    }

    { 
    newLeafNode(this_OP_OR_4, grammarAccess.getReductionOpAccess().getOP_ORTerminalRuleCall_4()); 
    }

    |    this_OP_PLUS_5=RULE_OP_PLUS    {
		$current.merge(this_OP_PLUS_5);
    }

    { 
    newLeafNode(this_OP_PLUS_5, grammarAccess.getReductionOpAccess().getOP_PLUSTerminalRuleCall_5()); 
    }

    |    this_XOP_OR_6=RULE_XOP_OR    {
		$current.merge(this_XOP_OR_6);
    }

    { 
    newLeafNode(this_XOP_OR_6, grammarAccess.getReductionOpAccess().getXOP_ORTerminalRuleCall_6()); 
    }
)
    ;





// Entry rule entryRuleArithmeticOp
entryRuleArithmeticOp returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getArithmeticOpRule()); } 
	 iv_ruleArithmeticOp=ruleArithmeticOp 
	 { $current=$iv_ruleArithmeticOp.current.getText(); }  
	 EOF 
;

// Rule ArithmeticOp
ruleArithmeticOp returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_OP_MAX_0=RULE_OP_MAX    {
		$current.merge(this_OP_MAX_0);
    }

    { 
    newLeafNode(this_OP_MAX_0, grammarAccess.getArithmeticOpAccess().getOP_MAXTerminalRuleCall_0()); 
    }

    |    this_OP_MIN_1=RULE_OP_MIN    {
		$current.merge(this_OP_MIN_1);
    }

    { 
    newLeafNode(this_OP_MIN_1, grammarAccess.getArithmeticOpAccess().getOP_MINTerminalRuleCall_1()); 
    }

    |    this_OP_MUL_2=RULE_OP_MUL    {
		$current.merge(this_OP_MUL_2);
    }

    { 
    newLeafNode(this_OP_MUL_2, grammarAccess.getArithmeticOpAccess().getOP_MULTerminalRuleCall_2()); 
    }

    |    this_OP_PLUS_3=RULE_OP_PLUS    {
		$current.merge(this_OP_PLUS_3);
    }

    { 
    newLeafNode(this_OP_PLUS_3, grammarAccess.getArithmeticOpAccess().getOP_PLUSTerminalRuleCall_3()); 
    }
)
    ;





// Entry rule entryRuleLogicalOp
entryRuleLogicalOp returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getLogicalOpRule()); } 
	 iv_ruleLogicalOp=ruleLogicalOp 
	 { $current=$iv_ruleLogicalOp.current.getText(); }  
	 EOF 
;

// Rule LogicalOp
ruleLogicalOp returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_OP_AND_0=RULE_OP_AND    {
		$current.merge(this_OP_AND_0);
    }

    { 
    newLeafNode(this_OP_AND_0, grammarAccess.getLogicalOpAccess().getOP_ANDTerminalRuleCall_0()); 
    }

    |    this_OP_OR_1=RULE_OP_OR    {
		$current.merge(this_OP_OR_1);
    }

    { 
    newLeafNode(this_OP_OR_1, grammarAccess.getLogicalOpAccess().getOP_ORTerminalRuleCall_1()); 
    }

    |    this_XOP_OR_2=RULE_XOP_OR    {
		$current.merge(this_XOP_OR_2);
    }

    { 
    newLeafNode(this_XOP_OR_2, grammarAccess.getLogicalOpAccess().getXOP_ORTerminalRuleCall_2()); 
    }
)
    ;





// Entry rule entryRuleRelationalOp
entryRuleRelationalOp returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getRelationalOpRule()); } 
	 iv_ruleRelationalOp=ruleRelationalOp 
	 { $current=$iv_ruleRelationalOp.current.getText(); }  
	 EOF 
;

// Rule RelationalOp
ruleRelationalOp returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_OP_EQ_0=RULE_OP_EQ    {
		$current.merge(this_OP_EQ_0);
    }

    { 
    newLeafNode(this_OP_EQ_0, grammarAccess.getRelationalOpAccess().getOP_EQTerminalRuleCall_0()); 
    }

    |    this_OP_GE_1=RULE_OP_GE    {
		$current.merge(this_OP_GE_1);
    }

    { 
    newLeafNode(this_OP_GE_1, grammarAccess.getRelationalOpAccess().getOP_GETerminalRuleCall_1()); 
    }

    |    this_OP_GT_2=RULE_OP_GT    {
		$current.merge(this_OP_GT_2);
    }

    { 
    newLeafNode(this_OP_GT_2, grammarAccess.getRelationalOpAccess().getOP_GTTerminalRuleCall_2()); 
    }

    |    this_OP_LE_3=RULE_OP_LE    {
		$current.merge(this_OP_LE_3);
    }

    { 
    newLeafNode(this_OP_LE_3, grammarAccess.getRelationalOpAccess().getOP_LETerminalRuleCall_3()); 
    }

    |    this_OP_LT_4=RULE_OP_LT    {
		$current.merge(this_OP_LT_4);
    }

    { 
    newLeafNode(this_OP_LT_4, grammarAccess.getRelationalOpAccess().getOP_LTTerminalRuleCall_4()); 
    }

    |    this_OP_NE_5=RULE_OP_NE    {
		$current.merge(this_OP_NE_5);
    }

    { 
    newLeafNode(this_OP_NE_5, grammarAccess.getRelationalOpAccess().getOP_NETerminalRuleCall_5()); 
    }
)
    ;





RULE_OP_AND : 'and';

RULE_OP_MAX : 'max';

RULE_OP_MIN : 'min';

RULE_OP_MUL : '*';

RULE_OP_OR : 'or';

RULE_OP_PLUS : '+';

RULE_XOP_OR : 'xor';

RULE_OP_MINUS : '-';

RULE_OP_DIV : '/';

RULE_OP_MOD : '%';

RULE_OP_NAND : 'nand';

RULE_OP_EQ : '==';

RULE_OP_GE : '>=';

RULE_OP_GT : '>';

RULE_OP_LE : '<=';

RULE_OP_LT : '<';

RULE_OP_NE : '!=';

RULE_BOOLEAN : ('true'|'false');

RULE_REAL : ('0'..'9')+ '.' ('0'..'9')+;

RULE_INTERSECTION : '&&';

RULE_UNION : '||';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


