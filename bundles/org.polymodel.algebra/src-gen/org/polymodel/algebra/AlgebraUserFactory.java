package org.polymodel.algebra;

import java.util.List;


/* PROTECTED REGION ID(algebra_user_factory_imports) ENABLED START */
// protected imports, you should add here required imports
// that won't be removed after regeneration of the mapping code
/* PROTECTED REGION END */

/**
* User factory for algebra
* -- Generated by TOM mapping EMF generator --
*/

public class AlgebraUserFactory {
	
	/* PROTECTED REGION ID(algebra_user_factory_members) ENABLED START */
	/* PROTECTED REGION END */

	// packageListBis
	public static org.polymodel.algebra.AlgebraFactory algebraFactory = org.polymodel.algebra.AlgebraFactory.eINSTANCE;
	public static org.polymodel.algebra.affine.AffineFactory affineFactory = org.polymodel.algebra.affine.AffineFactory.eINSTANCE;
	public static org.polymodel.algebra.quasiAffine.QuasiAffineFactory quasiAffineFactory = org.polymodel.algebra.quasiAffine.QuasiAffineFactory.eINSTANCE;
	public static org.polymodel.algebra.reductions.ReductionsFactory reductionsFactory = org.polymodel.algebra.reductions.ReductionsFactory.eINSTANCE;
	public static org.polymodel.algebra.polynomials.PolynomialsFactory polynomialsFactory = org.polymodel.algebra.polynomials.PolynomialsFactory.eINSTANCE;
	
	// User operators
		
	/** Module base **/
	// Operator var
	public static org.polymodel.algebra.Variable var(String _name) {
		org.polymodel.algebra.Variable o = algebraFactory.createVariable();
		o.setName(_name);
		
		/* PROTECTED REGION ID(algebra_user_factory_class_op_var) ENABLED START */
		/* PROTECTED REGION END */
		
		return o;
	}
		
	// Operator composite
	public static org.polymodel.algebra.CompositeIntExpression composite(org.polymodel.algebra.CompositeOperator _operator, org.polymodel.algebra.IntExpression _left, org.polymodel.algebra.IntExpression _right) {
		org.polymodel.algebra.CompositeIntExpression o = algebraFactory.createCompositeIntExpression();
		o.setOperator(_operator);
		o.setLeft(_left);
		o.setRight(_right);
		
		/* PROTECTED REGION ID(algebra_user_factory_class_op_composite) ENABLED START */
		/* PROTECTED REGION END */
		
		return o;
	}
		
	/** Module affine **/
	// Operator affine
	public static org.polymodel.algebra.affine.AffineExpression affine(List<org.polymodel.algebra.affine.AffineTerm> _terms) {
		org.polymodel.algebra.affine.AffineExpression o = affineFactory.createAffineExpression();
		for(int i = 0 ; i < _terms.size() ; ++i) {
			o.getTerms().add(_terms.get(i));
		}
		
		/* PROTECTED REGION ID(algebra_user_factory_class_op_affine) ENABLED START */
		/* PROTECTED REGION END */
		
		return o;
	}
		
	// Operator term
	public static org.polymodel.algebra.affine.AffineTerm term(long _coef, org.polymodel.algebra.Variable _variable) {
		org.polymodel.algebra.affine.AffineTerm o = affineFactory.createAffineTerm();
		o.setCoef(_coef);
		o.setVariable(_variable);
		
		/* PROTECTED REGION ID(algebra_user_factory_class_op_term) ENABLED START */
		/* PROTECTED REGION END */
		
		return o;
	}
		
	// Operator constant
	public static org.polymodel.algebra.affine.AffineTerm constant(long _coef) {
		org.polymodel.algebra.affine.AffineTerm o = affineFactory.createAffineTerm();
		o.setCoef(_coef);
		o.setVariable(null);
		
		/* PROTECTED REGION ID(algebra_user_factory_class_op_constant) ENABLED START */
		/* PROTECTED REGION END */
		
		return o;
	}
		
	/** Module quasiaffine **/
	// Operator qaffine
	public static org.polymodel.algebra.quasiAffine.QuasiAffineExpression qaffine(List<org.polymodel.algebra.quasiAffine.QuasiAffineTerm> _terms) {
		org.polymodel.algebra.quasiAffine.QuasiAffineExpression o = quasiAffineFactory.createQuasiAffineExpression();
		for(int i = 0 ; i < _terms.size() ; ++i) {
			o.getTerms().add(_terms.get(i));
		}
		
		/* PROTECTED REGION ID(algebra_user_factory_class_op_qaffine) ENABLED START */
		/* PROTECTED REGION END */
		
		return o;
	}
		
	// Operator qterm
	public static org.polymodel.algebra.quasiAffine.SimpleQuasiAffineTerm qterm(org.polymodel.algebra.affine.AffineExpression _expression) {
		org.polymodel.algebra.quasiAffine.SimpleQuasiAffineTerm o = quasiAffineFactory.createSimpleQuasiAffineTerm();
		o.setExpression(_expression);
		
		/* PROTECTED REGION ID(algebra_user_factory_class_op_qterm) ENABLED START */
		/* PROTECTED REGION END */
		
		return o;
	}
		
	// Operator mul
	public static org.polymodel.algebra.quasiAffine.SimpleQuasiAffineTerm mul(org.polymodel.algebra.affine.AffineExpression _expression, long _coef) {
		org.polymodel.algebra.quasiAffine.SimpleQuasiAffineTerm o = quasiAffineFactory.createSimpleQuasiAffineTerm();
		o.setExpression(_expression);
		o.setCoef(_coef);
		o.setOperator(org.polymodel.algebra.quasiAffine.QuasiAffineOperator.MUL);
		
		/* PROTECTED REGION ID(algebra_user_factory_class_op_mul) ENABLED START */
		/* PROTECTED REGION END */
		
		return o;
	}
		
	// Operator mod
	public static org.polymodel.algebra.quasiAffine.SimpleQuasiAffineTerm mod(org.polymodel.algebra.affine.AffineExpression _expression, long _coef) {
		org.polymodel.algebra.quasiAffine.SimpleQuasiAffineTerm o = quasiAffineFactory.createSimpleQuasiAffineTerm();
		o.setExpression(_expression);
		o.setCoef(_coef);
		o.setOperator(org.polymodel.algebra.quasiAffine.QuasiAffineOperator.MOD);
		
		/* PROTECTED REGION ID(algebra_user_factory_class_op_mod) ENABLED START */
		/* PROTECTED REGION END */
		
		return o;
	}
		
	// Operator ceil
	public static org.polymodel.algebra.quasiAffine.SimpleQuasiAffineTerm ceil(org.polymodel.algebra.affine.AffineExpression _expression, long _coef) {
		org.polymodel.algebra.quasiAffine.SimpleQuasiAffineTerm o = quasiAffineFactory.createSimpleQuasiAffineTerm();
		o.setExpression(_expression);
		o.setCoef(_coef);
		o.setOperator(org.polymodel.algebra.quasiAffine.QuasiAffineOperator.CEIL);
		
		/* PROTECTED REGION ID(algebra_user_factory_class_op_ceil) ENABLED START */
		/* PROTECTED REGION END */
		
		return o;
	}
		
	// Operator floor
	public static org.polymodel.algebra.quasiAffine.SimpleQuasiAffineTerm floor(org.polymodel.algebra.affine.AffineExpression _expression, long _coef) {
		org.polymodel.algebra.quasiAffine.SimpleQuasiAffineTerm o = quasiAffineFactory.createSimpleQuasiAffineTerm();
		o.setExpression(_expression);
		o.setCoef(_coef);
		o.setOperator(org.polymodel.algebra.quasiAffine.QuasiAffineOperator.FLOOR);
		
		/* PROTECTED REGION ID(algebra_user_factory_class_op_floor) ENABLED START */
		/* PROTECTED REGION END */
		
		return o;
	}
		
	// Operator div
	public static org.polymodel.algebra.quasiAffine.SimpleQuasiAffineTerm div(org.polymodel.algebra.affine.AffineExpression _expression, long _coef) {
		org.polymodel.algebra.quasiAffine.SimpleQuasiAffineTerm o = quasiAffineFactory.createSimpleQuasiAffineTerm();
		o.setExpression(_expression);
		o.setCoef(_coef);
		o.setOperator(org.polymodel.algebra.quasiAffine.QuasiAffineOperator.DIV);
		
		/* PROTECTED REGION ID(algebra_user_factory_class_op_div) ENABLED START */
		/* PROTECTED REGION END */
		
		return o;
	}
		
	// Operator nqterm
	public static org.polymodel.algebra.quasiAffine.NestedQuasiAffineTerm nqterm(org.polymodel.algebra.quasiAffine.QuasiAffineExpression _expression) {
		org.polymodel.algebra.quasiAffine.NestedQuasiAffineTerm o = quasiAffineFactory.createNestedQuasiAffineTerm();
		o.setExpression(_expression);
		
		/* PROTECTED REGION ID(algebra_user_factory_class_op_nqterm) ENABLED START */
		/* PROTECTED REGION END */
		
		return o;
	}
		
	// Operator nmul
	public static org.polymodel.algebra.quasiAffine.NestedQuasiAffineTerm nmul(org.polymodel.algebra.quasiAffine.QuasiAffineExpression _expression, long _coef) {
		org.polymodel.algebra.quasiAffine.NestedQuasiAffineTerm o = quasiAffineFactory.createNestedQuasiAffineTerm();
		o.setExpression(_expression);
		o.setCoef(_coef);
		o.setOperator(org.polymodel.algebra.quasiAffine.QuasiAffineOperator.MUL);
		
		/* PROTECTED REGION ID(algebra_user_factory_class_op_nmul) ENABLED START */
		/* PROTECTED REGION END */
		
		return o;
	}
		
	// Operator nmod
	public static org.polymodel.algebra.quasiAffine.NestedQuasiAffineTerm nmod(org.polymodel.algebra.quasiAffine.QuasiAffineExpression _expression, long _coef) {
		org.polymodel.algebra.quasiAffine.NestedQuasiAffineTerm o = quasiAffineFactory.createNestedQuasiAffineTerm();
		o.setExpression(_expression);
		o.setCoef(_coef);
		o.setOperator(org.polymodel.algebra.quasiAffine.QuasiAffineOperator.MOD);
		
		/* PROTECTED REGION ID(algebra_user_factory_class_op_nmod) ENABLED START */
		/* PROTECTED REGION END */
		
		return o;
	}
		
	// Operator nceil
	public static org.polymodel.algebra.quasiAffine.NestedQuasiAffineTerm nceil(org.polymodel.algebra.quasiAffine.QuasiAffineExpression _expression, long _coef) {
		org.polymodel.algebra.quasiAffine.NestedQuasiAffineTerm o = quasiAffineFactory.createNestedQuasiAffineTerm();
		o.setExpression(_expression);
		o.setCoef(_coef);
		o.setOperator(org.polymodel.algebra.quasiAffine.QuasiAffineOperator.CEIL);
		
		/* PROTECTED REGION ID(algebra_user_factory_class_op_nceil) ENABLED START */
		/* PROTECTED REGION END */
		
		return o;
	}
		
	// Operator nfloor
	public static org.polymodel.algebra.quasiAffine.NestedQuasiAffineTerm nfloor(org.polymodel.algebra.quasiAffine.QuasiAffineExpression _expression, long _coef) {
		org.polymodel.algebra.quasiAffine.NestedQuasiAffineTerm o = quasiAffineFactory.createNestedQuasiAffineTerm();
		o.setExpression(_expression);
		o.setCoef(_coef);
		o.setOperator(org.polymodel.algebra.quasiAffine.QuasiAffineOperator.FLOOR);
		
		/* PROTECTED REGION ID(algebra_user_factory_class_op_nfloor) ENABLED START */
		/* PROTECTED REGION END */
		
		return o;
	}
		
	// Operator ndiv
	public static org.polymodel.algebra.quasiAffine.NestedQuasiAffineTerm ndiv(org.polymodel.algebra.quasiAffine.QuasiAffineExpression _expression, long _coef) {
		org.polymodel.algebra.quasiAffine.NestedQuasiAffineTerm o = quasiAffineFactory.createNestedQuasiAffineTerm();
		o.setExpression(_expression);
		o.setCoef(_coef);
		o.setOperator(org.polymodel.algebra.quasiAffine.QuasiAffineOperator.DIV);
		
		/* PROTECTED REGION ID(algebra_user_factory_class_op_ndiv) ENABLED START */
		/* PROTECTED REGION END */
		
		return o;
	}
		
	/** Module reductions **/
	// Operator reduction
	public static org.polymodel.algebra.reductions.ReductionExpression reduction(List<org.polymodel.algebra.IntExpression> _expressions, org.polymodel.algebra.reductions.ReductionOperator _operator) {
		org.polymodel.algebra.reductions.ReductionExpression o = reductionsFactory.createReductionExpression();
		for(int i = 0 ; i < _expressions.size() ; ++i) {
			o.getExpressions().add(_expressions.get(i));
		}
		o.setOperator(_operator);
		
		/* PROTECTED REGION ID(algebra_user_factory_class_op_reduction) ENABLED START */
		/* PROTECTED REGION END */
		
		return o;
	}
		
	// Operator prod
	public static org.polymodel.algebra.reductions.ReductionExpression prod(List<org.polymodel.algebra.IntExpression> _expressions) {
		org.polymodel.algebra.reductions.ReductionExpression o = reductionsFactory.createReductionExpression();
		for(int i = 0 ; i < _expressions.size() ; ++i) {
			o.getExpressions().add(_expressions.get(i));
		}
		o.setOperator(org.polymodel.algebra.reductions.ReductionOperator.PROD);
		
		/* PROTECTED REGION ID(algebra_user_factory_class_op_prod) ENABLED START */
		/* PROTECTED REGION END */
		
		return o;
	}
		
	// Operator sum
	public static org.polymodel.algebra.reductions.ReductionExpression sum(List<org.polymodel.algebra.IntExpression> _expressions) {
		org.polymodel.algebra.reductions.ReductionExpression o = reductionsFactory.createReductionExpression();
		for(int i = 0 ; i < _expressions.size() ; ++i) {
			o.getExpressions().add(_expressions.get(i));
		}
		o.setOperator(org.polymodel.algebra.reductions.ReductionOperator.SUM);
		
		/* PROTECTED REGION ID(algebra_user_factory_class_op_sum) ENABLED START */
		/* PROTECTED REGION END */
		
		return o;
	}
		
	// Operator max
	public static org.polymodel.algebra.reductions.ReductionExpression max(List<org.polymodel.algebra.IntExpression> _expressions) {
		org.polymodel.algebra.reductions.ReductionExpression o = reductionsFactory.createReductionExpression();
		for(int i = 0 ; i < _expressions.size() ; ++i) {
			o.getExpressions().add(_expressions.get(i));
		}
		o.setOperator(org.polymodel.algebra.reductions.ReductionOperator.MAX);
		
		/* PROTECTED REGION ID(algebra_user_factory_class_op_max) ENABLED START */
		/* PROTECTED REGION END */
		
		return o;
	}
		
	// Operator min
	public static org.polymodel.algebra.reductions.ReductionExpression min(List<org.polymodel.algebra.IntExpression> _expressions) {
		org.polymodel.algebra.reductions.ReductionExpression o = reductionsFactory.createReductionExpression();
		for(int i = 0 ; i < _expressions.size() ; ++i) {
			o.getExpressions().add(_expressions.get(i));
		}
		o.setOperator(org.polymodel.algebra.reductions.ReductionOperator.MIN);
		
		/* PROTECTED REGION ID(algebra_user_factory_class_op_min) ENABLED START */
		/* PROTECTED REGION END */
		
		return o;
	}
		
	/** Module polynomial **/
	// Operator polynomial
	public static org.polymodel.algebra.polynomials.PolynomialExpression polynomial(List<org.polymodel.algebra.polynomials.PolynomialTerm> _terms) {
		org.polymodel.algebra.polynomials.PolynomialExpression o = polynomialsFactory.createPolynomialExpression();
		for(int i = 0 ; i < _terms.size() ; ++i) {
			o.getTerms().add(_terms.get(i));
		}
		
		/* PROTECTED REGION ID(algebra_user_factory_class_op_polynomial) ENABLED START */
		/* PROTECTED REGION END */
		
		return o;
	}
		
	// Operator pterm
	public static org.polymodel.algebra.polynomials.PolynomialTerm pterm(long _numerator, long _denominator, List<org.polymodel.algebra.polynomials.PolynomialVariable> _variables) {
		org.polymodel.algebra.polynomials.PolynomialTerm o = polynomialsFactory.createPolynomialTerm();
		o.setNumerator(_numerator);
		o.setDenominator(_denominator);
		for(int i = 0 ; i < _variables.size() ; ++i) {
			o.getVariables().add(_variables.get(i));
		}
		
		/* PROTECTED REGION ID(algebra_user_factory_class_op_pterm) ENABLED START */
		/* PROTECTED REGION END */
		
		return o;
	}
		
	// Operator pvar
	public static org.polymodel.algebra.polynomials.PolynomialVariable pvar(org.polymodel.algebra.Variable _variable, long _exponent) {
		org.polymodel.algebra.polynomials.PolynomialVariable o = polynomialsFactory.createPolynomialVariable();
		o.setVariable(_variable);
		o.setExponent(_exponent);
		
		/* PROTECTED REGION ID(algebra_user_factory_class_op_pvar) ENABLED START */
		/* PROTECTED REGION END */
		
		return o;
	}
		
	/** Module domains **/
	// Operator contraint
	public static org.polymodel.algebra.IntConstraint contraint(org.polymodel.algebra.IntExpression _lhs, org.polymodel.algebra.ComparisonOperator _comparisonOperator, org.polymodel.algebra.IntExpression _rhs) {
		org.polymodel.algebra.IntConstraint o = algebraFactory.createIntConstraint();
		o.setLhs(_lhs);
		o.setComparisonOperator(_comparisonOperator);
		o.setRhs(_rhs);
		
		/* PROTECTED REGION ID(algebra_user_factory_class_op_contraint) ENABLED START */
		/* PROTECTED REGION END */
		
		return o;
	}
		
	// Operator eq
	public static org.polymodel.algebra.IntConstraint eq(org.polymodel.algebra.IntExpression _lhs, org.polymodel.algebra.IntExpression _rhs) {
		org.polymodel.algebra.IntConstraint o = algebraFactory.createIntConstraint();
		o.setLhs(_lhs);
		o.setRhs(_rhs);
		o.setComparisonOperator(org.polymodel.algebra.ComparisonOperator.EQ);
		
		/* PROTECTED REGION ID(algebra_user_factory_class_op_eq) ENABLED START */
		/* PROTECTED REGION END */
		
		return o;
	}
		
	// Operator ne
	public static org.polymodel.algebra.IntConstraint ne(org.polymodel.algebra.IntExpression _lhs, org.polymodel.algebra.IntExpression _rhs) {
		org.polymodel.algebra.IntConstraint o = algebraFactory.createIntConstraint();
		o.setLhs(_lhs);
		o.setRhs(_rhs);
		o.setComparisonOperator(org.polymodel.algebra.ComparisonOperator.NE);
		
		/* PROTECTED REGION ID(algebra_user_factory_class_op_ne) ENABLED START */
		/* PROTECTED REGION END */
		
		return o;
	}
		
	// Operator ge
	public static org.polymodel.algebra.IntConstraint ge(org.polymodel.algebra.IntExpression _lhs, org.polymodel.algebra.IntExpression _rhs) {
		org.polymodel.algebra.IntConstraint o = algebraFactory.createIntConstraint();
		o.setLhs(_lhs);
		o.setRhs(_rhs);
		o.setComparisonOperator(org.polymodel.algebra.ComparisonOperator.GE);
		
		/* PROTECTED REGION ID(algebra_user_factory_class_op_ge) ENABLED START */
		/* PROTECTED REGION END */
		
		return o;
	}
		
	// Operator le
	public static org.polymodel.algebra.IntConstraint le(org.polymodel.algebra.IntExpression _lhs, org.polymodel.algebra.IntExpression _rhs) {
		org.polymodel.algebra.IntConstraint o = algebraFactory.createIntConstraint();
		o.setLhs(_lhs);
		o.setRhs(_rhs);
		o.setComparisonOperator(org.polymodel.algebra.ComparisonOperator.LE);
		
		/* PROTECTED REGION ID(algebra_user_factory_class_op_le) ENABLED START */
		/* PROTECTED REGION END */
		
		return o;
	}
		
	// Operator gt
	public static org.polymodel.algebra.IntConstraint gt(org.polymodel.algebra.IntExpression _lhs, org.polymodel.algebra.IntExpression _rhs) {
		org.polymodel.algebra.IntConstraint o = algebraFactory.createIntConstraint();
		o.setLhs(_lhs);
		o.setRhs(_rhs);
		o.setComparisonOperator(org.polymodel.algebra.ComparisonOperator.GT);
		
		/* PROTECTED REGION ID(algebra_user_factory_class_op_gt) ENABLED START */
		/* PROTECTED REGION END */
		
		return o;
	}
		
	// Operator lt
	public static org.polymodel.algebra.IntConstraint lt(org.polymodel.algebra.IntExpression _lhs, org.polymodel.algebra.IntExpression _rhs) {
		org.polymodel.algebra.IntConstraint o = algebraFactory.createIntConstraint();
		o.setLhs(_lhs);
		o.setRhs(_rhs);
		o.setComparisonOperator(org.polymodel.algebra.ComparisonOperator.LT);
		
		/* PROTECTED REGION ID(algebra_user_factory_class_op_lt) ENABLED START */
		/* PROTECTED REGION END */
		
		return o;
	}
		
	// Operator system
	public static org.polymodel.algebra.IntConstraintSystem system(List<org.polymodel.algebra.IntConstraint> _constraints) {
		org.polymodel.algebra.IntConstraintSystem o = algebraFactory.createIntConstraintSystem();
		for(int i = 0 ; i < _constraints.size() ; ++i) {
			o.getConstraints().add(_constraints.get(i));
		}
		
		/* PROTECTED REGION ID(algebra_user_factory_class_op_system) ENABLED START */
		/* PROTECTED REGION END */
		
		return o;
	}
		
	
	/*
	* Default TOM Operators for algebra mapping. Each class that has a terminal type has also a default factory function.
	*/
	
	public static org.polymodel.algebra.IntTerm intTerm(long _coef) {
		org.polymodel.algebra.IntTerm o = algebraFactory.createIntTerm();
		o.setCoef(_coef);
		
		/* PROTECTED REGION ID(algebra_user_factory_default_op_IntTerm) ENABLED START */
		/* PROTECTED REGION END */
		
		return o;
	}
	
	public static org.polymodel.algebra.Variable variable(String _name) {
		org.polymodel.algebra.Variable o = algebraFactory.createVariable();
		o.setName(_name);
		
		/* PROTECTED REGION ID(algebra_user_factory_default_op_Variable) ENABLED START */
		/* PROTECTED REGION END */
		
		return o;
	}
	
	public static org.polymodel.algebra.IntConstraint intConstraint(org.polymodel.algebra.ComparisonOperator _comparisonOperator,org.polymodel.algebra.IntExpression _lhs, org.polymodel.algebra.IntExpression _rhs) {
		org.polymodel.algebra.IntConstraint o = algebraFactory.createIntConstraint();
		o.setComparisonOperator(_comparisonOperator);
		o.setLhs(_lhs);
		o.setRhs(_rhs);
		
		/* PROTECTED REGION ID(algebra_user_factory_default_op_IntConstraint) ENABLED START */
		/* PROTECTED REGION END */
		
		return o;
	}
	
	public static org.polymodel.algebra.IntConstraintSystem intConstraintSystem(List<org.polymodel.algebra.IntConstraint> _constraints) {
		org.polymodel.algebra.IntConstraintSystem o = algebraFactory.createIntConstraintSystem();
		for(int i = 0 ; i < _constraints.size() ; ++i) {
			o.getConstraints().add(_constraints.get(i));
		}
		
		/* PROTECTED REGION ID(algebra_user_factory_default_op_IntConstraintSystem) ENABLED START */
		/* PROTECTED REGION END */
		
		return o;
	}
	public static org.polymodel.algebra.IntConstraintSystem intConstraintSystem(org.polymodel.algebra.IntConstraint... _constraints) {
		org.polymodel.algebra.IntConstraintSystem o = algebraFactory.createIntConstraintSystem();
		/* PROTECTED REGION ID(algebra_user_factory_default_op_IntConstraintSystem) ENABLED START */
		/* PROTECTED REGION END */
		for(int i = 0 ; i < _constraints.length ; ++i) {
			o.getConstraints().add(_constraints[i]);
		}
		
		return o;
	}
	
	public static org.polymodel.algebra.CompositeIntExpression compositeIntExpression(org.polymodel.algebra.CompositeOperator _operator,org.polymodel.algebra.IntExpression _left, org.polymodel.algebra.IntExpression _right) {
		org.polymodel.algebra.CompositeIntExpression o = algebraFactory.createCompositeIntExpression();
		o.setOperator(_operator);
		o.setLeft(_left);
		o.setRight(_right);
		
		/* PROTECTED REGION ID(algebra_user_factory_default_op_CompositeIntExpression) ENABLED START */
		/* PROTECTED REGION END */
		
		return o;
	}
	
	public static org.polymodel.algebra.affine.AffineExpression affineExpression(List<org.polymodel.algebra.affine.AffineTerm> _terms) {
		org.polymodel.algebra.affine.AffineExpression o = affineFactory.createAffineExpression();
		for(int i = 0 ; i < _terms.size() ; ++i) {
			o.getTerms().add(_terms.get(i));
		}
		
		/* PROTECTED REGION ID(algebra_user_factory_default_op_AffineExpression) ENABLED START */
		/* PROTECTED REGION END */
		
		return o;
	}
	
	public static org.polymodel.algebra.affine.AffineTerm affineTerm(long _coef,org.polymodel.algebra.Variable _variable) {
		org.polymodel.algebra.affine.AffineTerm o = affineFactory.createAffineTerm();
		o.setCoef(_coef);
		o.setVariable(_variable);
		
		/* PROTECTED REGION ID(algebra_user_factory_default_op_AffineTerm) ENABLED START */
		/* PROTECTED REGION END */
		
		return o;
	}
	
	public static org.polymodel.algebra.quasiAffine.QuasiAffineExpression quasiAffineExpression(List<org.polymodel.algebra.quasiAffine.QuasiAffineTerm> _terms) {
		org.polymodel.algebra.quasiAffine.QuasiAffineExpression o = quasiAffineFactory.createQuasiAffineExpression();
		for(int i = 0 ; i < _terms.size() ; ++i) {
			o.getTerms().add(_terms.get(i));
		}
		
		/* PROTECTED REGION ID(algebra_user_factory_default_op_QuasiAffineExpression) ENABLED START */
		/* PROTECTED REGION END */
		
		return o;
	}
	
	public static org.polymodel.algebra.quasiAffine.SimpleQuasiAffineTerm simpleQuasiAffineTerm(long _coef, org.polymodel.algebra.quasiAffine.QuasiAffineOperator _operator,org.polymodel.algebra.affine.AffineExpression _expression) {
		org.polymodel.algebra.quasiAffine.SimpleQuasiAffineTerm o = quasiAffineFactory.createSimpleQuasiAffineTerm();
		o.setCoef(_coef);
		o.setOperator(_operator);
		o.setExpression(_expression);
		
		/* PROTECTED REGION ID(algebra_user_factory_default_op_SimpleQuasiAffineTerm) ENABLED START */
		/* PROTECTED REGION END */
		
		return o;
	}
	
	public static org.polymodel.algebra.quasiAffine.NestedQuasiAffineTerm nestedQuasiAffineTerm(long _coef, org.polymodel.algebra.quasiAffine.QuasiAffineOperator _operator,org.polymodel.algebra.quasiAffine.QuasiAffineExpression _expression) {
		org.polymodel.algebra.quasiAffine.NestedQuasiAffineTerm o = quasiAffineFactory.createNestedQuasiAffineTerm();
		o.setCoef(_coef);
		o.setOperator(_operator);
		o.setExpression(_expression);
		
		/* PROTECTED REGION ID(algebra_user_factory_default_op_NestedQuasiAffineTerm) ENABLED START */
		/* PROTECTED REGION END */
		
		return o;
	}
	
	public static org.polymodel.algebra.polynomials.PolynomialExpression polynomialExpression(List<org.polymodel.algebra.polynomials.PolynomialTerm> _terms) {
		org.polymodel.algebra.polynomials.PolynomialExpression o = polynomialsFactory.createPolynomialExpression();
		for(int i = 0 ; i < _terms.size() ; ++i) {
			o.getTerms().add(_terms.get(i));
		}
		
		/* PROTECTED REGION ID(algebra_user_factory_default_op_PolynomialExpression) ENABLED START */
		/* PROTECTED REGION END */
		
		return o;
	}
	
	public static org.polymodel.algebra.polynomials.PolynomialVariable polynomialVariable(long _exponent,org.polymodel.algebra.Variable _variable) {
		org.polymodel.algebra.polynomials.PolynomialVariable o = polynomialsFactory.createPolynomialVariable();
		o.setExponent(_exponent);
		o.setVariable(_variable);
		
		/* PROTECTED REGION ID(algebra_user_factory_default_op_PolynomialVariable) ENABLED START */
		/* PROTECTED REGION END */
		
		return o;
	}
	
	public static org.polymodel.algebra.polynomials.PolynomialTerm polynomialTerm(long _numerator, long _denominator,List<org.polymodel.algebra.polynomials.PolynomialVariable> _variables) {
		org.polymodel.algebra.polynomials.PolynomialTerm o = polynomialsFactory.createPolynomialTerm();
		o.setNumerator(_numerator);
		o.setDenominator(_denominator);
		for(int i = 0 ; i < _variables.size() ; ++i) {
			o.getVariables().add(_variables.get(i));
		}
		
		/* PROTECTED REGION ID(algebra_user_factory_default_op_PolynomialTerm) ENABLED START */
		/* PROTECTED REGION END */
		
		return o;
	}
	
	public static org.polymodel.algebra.reductions.ReductionExpression reductionExpression(org.polymodel.algebra.reductions.ReductionOperator _operator,List<org.polymodel.algebra.IntExpression> _expressions) {
		org.polymodel.algebra.reductions.ReductionExpression o = reductionsFactory.createReductionExpression();
		o.setOperator(_operator);
		for(int i = 0 ; i < _expressions.size() ; ++i) {
			o.getExpressions().add(_expressions.get(i));
		}
		
		/* PROTECTED REGION ID(algebra_user_factory_default_op_ReductionExpression) ENABLED START */
		/* PROTECTED REGION END */
		
		return o;
	}
	
	
	/* PROTECTED REGION ID(algebra_mapping_user_custom_methodsalgebra) ENABLED START */
	
	/*
	* Custom factory functions that won't be removed at regeneration of mapping code
	*/
	
	/* PROTECTED REGION END */
}
