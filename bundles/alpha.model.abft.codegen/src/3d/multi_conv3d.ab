affine init { _P,_N0,_N1,_N2,_K0,_K1,_K2,_PK0,_PK1,_PK2 | 0<_P,_N0,_N1,_N2,_K0,_K1,_K2,_PK0,_PK1,_PK2 }
	input
		double kernel { i,j,k | -_K0<=i<=_K0 && -_K1<=j<=_K1 && -_K2<=k<=_K2 };
	output
		double padded_kernel { i,j,k | -_PK0<=i<=_PK0 && -_PK1<=j<=_PK1 && -_PK2<=k<=_PK2 };
		//double padded_kernel_cp { i,j,k | -_PK0<=i<=_PK0 && -_PK1<=j<=_PK1 && -_PK2<=k<=_PK2 };
		double patch { i,j,k | -_PK0<=i<_N0+_PK0 && -_PK1<=j<_N1+_PK1 && -_PK2<=k<_N2+_PK2 };
		//double patch_cp { i,j,k | -_PK0<=i<_N0+_PK0 && -_PK1<=j<_N1+_PK1 && -_PK2<=k<_N2+_PK2 };
	let
		padded_kernel[i,j,k] = case
			{|-_K0<=i<=_K0 && -_K1<=j<=_K1 && -_K2<=k<=_K2} : kernel[i,j,k];
			{|-_K0>i} || {|i>_K0} || {|-_K1>j} || {|j>_K1} || {|-_K2>k} || {|k>_K2} : 0.0;
		esac;
		
		patch[i,j,k] = case 
			{|0<=i<_N0 && 0<=j<_N1 && 0<=k<_N2} : 1.0;
			{|0>i} || {|i>=_N0} || {|0>j} || {|j>=_N1} || {|0>k} || {|k>=_N2} : 0.0;
		esac;
.

affine conv { _K0,_K1,_K2,_L0,_L1,_L2 | 0<_K0<=_L0 && 0<_K1<=_L1 && 0<_K2<=_L2}
	input
		double kernel { i,j,k | -_K0<=i<=_K0 && -_K1<=j<=_K1 && -_K2<=k<=_K2 };
		double arr { i,j,k | 0<=i<_L0 && 0<=j<_L1 && 0<=k<_L2 };
	output
		double out { i,j,k | 0<=i<_L0 && 0<=j<_L1 && 0<=k<_L2 };
	let	
		out[i,j,k] = reduce(+, (i,j,k,p,q,r->i,j,k), {|0<=i+p<_L0 && 0<=j+q<_L1 && 0<=k+r<_L2} : arr[i+p,j+q,k+r] * kernel[-p,-q,-r]);
.