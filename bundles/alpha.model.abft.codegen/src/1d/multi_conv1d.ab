affine init { _P0,_N0,_K0,_PK0 | 0<_P0,_N0,_K0,_PK0 }
	input
		double kernel { i | -_K0<=i<=_K0 };
	output
		double padded_kernel { i | -_PK0<=i<=_PK0 };
		//double padded_kernel_cp { i | -_PK0<=i<=_PK0 };
		double patch { i | -_PK0<=i<_N0+_PK0};
		//double patch_cp { i | -_PK0<=i<_N0+_PK0};
	let
		padded_kernel[i] = case
			{|i<-_K0} : 0.0; 
			{|-_K0<=i<=_K0} : kernel[i];
			{|_K0<i} : 0.0;
		esac;
		
		patch[i] = case 
			{|i<0} : 0.0; 
			{|0<=i<_N0} : 1.0;
			{|_N0<=i} : 0.0;
		esac;
.

affine conv { _K0,_L0 | 0<_K0<=_L0 }
	input
		double kernel { i | -_K0<=i<=_K0 };
		double arr { i | 0<=i<_L0 };
	output
		double out { i | 0<=i<_L0 };
	let		
		out[i] = reduce(+, (i,p->i), {|0<=i+p<_L0} : arr[i+p] * kernel[-p]);
.