/*
 * generated by Xtext
 */
package edu.csu.melange.alphabets.xtext.formatting;

import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.formatting.impl.AbstractDeclarativeFormatter;
import org.eclipse.xtext.formatting.impl.FormattingConfig;
import org.eclipse.xtext.util.Pair;

/**
 * This class contains custom formatting description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation/latest/xtext.html#formatting
 * on how and when to use it 
 * 
 * Also see {@link org.eclipse.xtext.xtext.XtextFormattingTokenSerializer} as an example
 */
public class AlphabetsFormatter extends AbstractDeclarativeFormatter {
	
	@Override
	protected void configureFormatting(FormattingConfig c) {
		edu.csu.melange.alphabets.xtext.services.AlphabetsGrammarAccess f = (edu.csu.melange.alphabets.xtext.services.AlphabetsGrammarAccess) getGrammarAccess();

		c.setAutoLinewrap(120);

		c.setLinewrap().after(f.getAVariableDeclarationRule());
//		c.setLinewrap().after(f.getAEquationRule());
//		c.setLinewrap().around(f.getAStandardEquationRule());
//		c.setLinewrap().around(f.getAUseEquationRule());

		c.setNoSpace().around(f.getAIndexListRule());
		c.setNoSpace().around(f.getAIndexExpressionRule());
		c.setNoSpace().around(f.getAIndexAffineExpressionListRule());
		

		for (Keyword key : f.findKeywords("case")) {
			c.setLinewrap().after(key);
			c.setIndentationIncrement().after(key);
		}
		for (Keyword key : f.findKeywords("esac")) {
			c.setIndentationDecrement().before(key);
		}
		for (Keyword key : f.findKeywords(";")) {
			c.setLinewrap().after(key);
		}
		for (Keyword key : f.findKeywords(",")) {
			c.setNoSpace().around(key);
		}

		for (Keyword key : f.findKeywords("given", "input")) {
			c.setIndentationIncrement().before(key);
		}
		for (Keyword key : f.findKeywords("given", "returns", "using", "through", "input", "output", "local", "let")) {
			c.setLinewrap().around(key);
			c.setIndentationIncrement().after(key);
		}
		for (Keyword key : f.findKeywords("returns", "using", "through", "output", "local", "let", ".")) {
			c.setIndentationDecrement().before(key);
		}
		for (Keyword key : f.findKeywords(".")) {
			c.setLinewrap().after(key);
			c.setIndentationDecrement().before(key);
		}
		c.setIndentationDecrement().after(f.getAAffineSystemRule());
		
		
		
		c.setLinewrap().after(f.getSL_COMMENTRule());
		
	    for (Pair<Keyword, Keyword> pair : f.findKeywordPairs("(", ")")) {
	      c.setNoSpace().after(pair.getFirst());
	      c.setNoSpace().before(pair.getSecond());
	    }
	    for (Pair<Keyword, Keyword> pair : f.findKeywordPairs("[", "]")) {
	    	  c.setNoSpace().before(pair.getFirst());
		      c.setNoSpace().after(pair.getFirst());
		      c.setNoSpace().before(pair.getSecond());
	    }
	    
		c.setNoSpace().after(f.getAEquationRule());
	}
}
