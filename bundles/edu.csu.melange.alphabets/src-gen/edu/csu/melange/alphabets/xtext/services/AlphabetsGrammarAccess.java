/*
* generated by Xtext
*/
package edu.csu.melange.alphabets.xtext.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class AlphabetsGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class AProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AProgram");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExternalFunctionsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExternalFunctionsAExternalFunctionDeclarationParserRuleCall_0_0 = (RuleCall)cExternalFunctionsAssignment_0.eContents().get(0);
		private final Assignment cSystemsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSystemsAAffineSystemParserRuleCall_1_0 = (RuleCall)cSystemsAssignment_1.eContents().get(0);
		
		////Root node is called Start in alphabets
		//AProgram:
		//	externalFunctions+=AExternalFunctionDeclaration* systems+=AAffineSystem+;
		public ParserRule getRule() { return rule; }

		//externalFunctions+=AExternalFunctionDeclaration* systems+=AAffineSystem+
		public Group getGroup() { return cGroup; }

		//externalFunctions+=AExternalFunctionDeclaration*
		public Assignment getExternalFunctionsAssignment_0() { return cExternalFunctionsAssignment_0; }

		//AExternalFunctionDeclaration
		public RuleCall getExternalFunctionsAExternalFunctionDeclarationParserRuleCall_0_0() { return cExternalFunctionsAExternalFunctionDeclarationParserRuleCall_0_0; }

		//systems+=AAffineSystem+
		public Assignment getSystemsAssignment_1() { return cSystemsAssignment_1; }

		//AAffineSystem
		public RuleCall getSystemsAAffineSystemParserRuleCall_1_0() { return cSystemsAAffineSystemParserRuleCall_1_0; }
	}

	public class AExternalFunctionDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AExternalFunctionDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOutputAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOutputATypeParserRuleCall_0_0 = (RuleCall)cOutputAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameAExternalFunctionIdentifierParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cInputsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cInputsATypeParserRuleCall_3_0 = (RuleCall)cInputsAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cInputsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cInputsATypeParserRuleCall_4_1_0 = (RuleCall)cInputsAssignment_4_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//AExternalFunctionDeclaration:
		//	output=AType name=AExternalFunctionIdentifier "(" inputs+=AType? ("," inputs+=AType)* ")" ";";
		public ParserRule getRule() { return rule; }

		//output=AType name=AExternalFunctionIdentifier "(" inputs+=AType? ("," inputs+=AType)* ")" ";"
		public Group getGroup() { return cGroup; }

		//output=AType
		public Assignment getOutputAssignment_0() { return cOutputAssignment_0; }

		//AType
		public RuleCall getOutputATypeParserRuleCall_0_0() { return cOutputATypeParserRuleCall_0_0; }

		//name=AExternalFunctionIdentifier
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//AExternalFunctionIdentifier
		public RuleCall getNameAExternalFunctionIdentifierParserRuleCall_1_0() { return cNameAExternalFunctionIdentifierParserRuleCall_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//inputs+=AType?
		public Assignment getInputsAssignment_3() { return cInputsAssignment_3; }

		//AType
		public RuleCall getInputsATypeParserRuleCall_3_0() { return cInputsATypeParserRuleCall_3_0; }

		//("," inputs+=AType)*
		public Group getGroup_4() { return cGroup_4; }

		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }

		//inputs+=AType
		public Assignment getInputsAssignment_4_1() { return cInputsAssignment_4_1; }

		//AType
		public RuleCall getInputsATypeParserRuleCall_4_1_0() { return cInputsATypeParserRuleCall_4_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }

		//";"
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}

	public class AExternalFunctionIdentifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AExternalFunctionIdentifier");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//AExternalFunctionIdentifier:
		//	name=ID;
		public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class AAffineSystemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AAffineSystem");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAAffineSystemAParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAAffineSystemBParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//AAffineSystem:
		//	AAffineSystemA | AAffineSystemB;
		public ParserRule getRule() { return rule; }

		//AAffineSystemA | AAffineSystemB
		public Alternatives getAlternatives() { return cAlternatives; }

		//AAffineSystemA
		public RuleCall getAAffineSystemAParserRuleCall_0() { return cAAffineSystemAParserRuleCall_0; }

		//AAffineSystemB
		public RuleCall getAAffineSystemBParserRuleCall_1() { return cAAffineSystemBParserRuleCall_1; }
	}

	public class AAffineSystemAElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AAffineSystemA");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAffineKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSystemIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cParametersAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cParametersADomainParserRuleCall_2_0 = (RuleCall)cParametersAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cGroup_3.eContents().get(0);
		private final Keyword cInputKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final Assignment cInputDeclarationsAssignment_3_0_1 = (Assignment)cGroup_3_0.eContents().get(1);
		private final RuleCall cInputDeclarationsAInputDeclarationParserRuleCall_3_0_1_0 = (RuleCall)cInputDeclarationsAssignment_3_0_1.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cOutputKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cOutputDeclarationsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cOutputDeclarationsAOutputDeclarationParserRuleCall_3_1_1_0 = (RuleCall)cOutputDeclarationsAssignment_3_1_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cLocalKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cLocalvarDeclarationsAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cLocalvarDeclarationsALocalDeclarationParserRuleCall_3_2_1_0 = (RuleCall)cLocalvarDeclarationsAssignment_3_2_1.eContents().get(0);
		private final Group cGroup_3_3 = (Group)cGroup_3.eContents().get(3);
		private final Keyword cOverKeyword_3_3_0 = (Keyword)cGroup_3_3.eContents().get(0);
		private final Assignment cWhileDeclarationAssignment_3_3_1 = (Assignment)cGroup_3_3.eContents().get(1);
		private final RuleCall cWhileDeclarationAWhileDeclarationParserRuleCall_3_3_1_0 = (RuleCall)cWhileDeclarationAssignment_3_3_1.eContents().get(0);
		private final Group cGroup_3_4 = (Group)cGroup_3.eContents().get(4);
		private final Keyword cLetKeyword_3_4_0 = (Keyword)cGroup_3_4.eContents().get(0);
		private final Group cGroup_3_4_1 = (Group)cGroup_3_4.eContents().get(1);
		private final Assignment cEquationsAssignment_3_4_1_0 = (Assignment)cGroup_3_4_1.eContents().get(0);
		private final RuleCall cEquationsAEquationParserRuleCall_3_4_1_0_0 = (RuleCall)cEquationsAssignment_3_4_1_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_4_1_1 = (Keyword)cGroup_3_4_1.eContents().get(1);
		private final Keyword cFullStopKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//AAffineSystemA returns AAffineSystem:
		//	"affine" name=SystemID parameters=ADomain (("input" inputDeclarations+=AInputDeclaration*)? ("output"
		//	outputDeclarations+=AOutputDeclaration*)? ("local" localvarDeclarations+=ALocalDeclaration*)? ("over"
		//	whileDeclaration=AWhileDeclaration)? ("let" (equations+=AEquation ";")*)?) ".";
		public ParserRule getRule() { return rule; }

		//"affine" name=SystemID parameters=ADomain (("input" inputDeclarations+=AInputDeclaration*)? ("output"
		//outputDeclarations+=AOutputDeclaration*)? ("local" localvarDeclarations+=ALocalDeclaration*)? ("over"
		//whileDeclaration=AWhileDeclaration)? ("let" (equations+=AEquation ";")*)?) "."
		public Group getGroup() { return cGroup; }

		//"affine"
		public Keyword getAffineKeyword_0() { return cAffineKeyword_0; }

		//name=SystemID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//SystemID
		public RuleCall getNameSystemIDParserRuleCall_1_0() { return cNameSystemIDParserRuleCall_1_0; }

		//parameters=ADomain
		public Assignment getParametersAssignment_2() { return cParametersAssignment_2; }

		//ADomain
		public RuleCall getParametersADomainParserRuleCall_2_0() { return cParametersADomainParserRuleCall_2_0; }

		//("input" inputDeclarations+=AInputDeclaration*)? ("output" outputDeclarations+=AOutputDeclaration*)? ("local"
		//localvarDeclarations+=ALocalDeclaration*)? ("over" whileDeclaration=AWhileDeclaration)? ("let" (equations+=AEquation
		//";")*)?
		public Group getGroup_3() { return cGroup_3; }

		//("input" inputDeclarations+=AInputDeclaration*)?
		public Group getGroup_3_0() { return cGroup_3_0; }

		//"input"
		public Keyword getInputKeyword_3_0_0() { return cInputKeyword_3_0_0; }

		//inputDeclarations+=AInputDeclaration*
		public Assignment getInputDeclarationsAssignment_3_0_1() { return cInputDeclarationsAssignment_3_0_1; }

		//AInputDeclaration
		public RuleCall getInputDeclarationsAInputDeclarationParserRuleCall_3_0_1_0() { return cInputDeclarationsAInputDeclarationParserRuleCall_3_0_1_0; }

		//("output" outputDeclarations+=AOutputDeclaration*)?
		public Group getGroup_3_1() { return cGroup_3_1; }

		//"output"
		public Keyword getOutputKeyword_3_1_0() { return cOutputKeyword_3_1_0; }

		//outputDeclarations+=AOutputDeclaration*
		public Assignment getOutputDeclarationsAssignment_3_1_1() { return cOutputDeclarationsAssignment_3_1_1; }

		//AOutputDeclaration
		public RuleCall getOutputDeclarationsAOutputDeclarationParserRuleCall_3_1_1_0() { return cOutputDeclarationsAOutputDeclarationParserRuleCall_3_1_1_0; }

		//("local" localvarDeclarations+=ALocalDeclaration*)?
		public Group getGroup_3_2() { return cGroup_3_2; }

		//"local"
		public Keyword getLocalKeyword_3_2_0() { return cLocalKeyword_3_2_0; }

		//localvarDeclarations+=ALocalDeclaration*
		public Assignment getLocalvarDeclarationsAssignment_3_2_1() { return cLocalvarDeclarationsAssignment_3_2_1; }

		//ALocalDeclaration
		public RuleCall getLocalvarDeclarationsALocalDeclarationParserRuleCall_3_2_1_0() { return cLocalvarDeclarationsALocalDeclarationParserRuleCall_3_2_1_0; }

		//("over" whileDeclaration=AWhileDeclaration)?
		public Group getGroup_3_3() { return cGroup_3_3; }

		//"over"
		public Keyword getOverKeyword_3_3_0() { return cOverKeyword_3_3_0; }

		//whileDeclaration=AWhileDeclaration
		public Assignment getWhileDeclarationAssignment_3_3_1() { return cWhileDeclarationAssignment_3_3_1; }

		//AWhileDeclaration
		public RuleCall getWhileDeclarationAWhileDeclarationParserRuleCall_3_3_1_0() { return cWhileDeclarationAWhileDeclarationParserRuleCall_3_3_1_0; }

		//("let" (equations+=AEquation ";")*)?
		public Group getGroup_3_4() { return cGroup_3_4; }

		//"let"
		public Keyword getLetKeyword_3_4_0() { return cLetKeyword_3_4_0; }

		//(equations+=AEquation ";")*
		public Group getGroup_3_4_1() { return cGroup_3_4_1; }

		//equations+=AEquation
		public Assignment getEquationsAssignment_3_4_1_0() { return cEquationsAssignment_3_4_1_0; }

		//AEquation
		public RuleCall getEquationsAEquationParserRuleCall_3_4_1_0_0() { return cEquationsAEquationParserRuleCall_3_4_1_0_0; }

		//";"
		public Keyword getSemicolonKeyword_3_4_1_1() { return cSemicolonKeyword_3_4_1_1; }

		//"."
		public Keyword getFullStopKeyword_4() { return cFullStopKeyword_4; }
	}

	public class AAffineSystemBElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AAffineSystemB");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAffineKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSystemIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cParametersAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cParametersADomainParserRuleCall_2_0 = (RuleCall)cParametersAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cGroup_3.eContents().get(0);
		private final Keyword cGivenKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final Assignment cInputDeclarationsAssignment_3_0_1 = (Assignment)cGroup_3_0.eContents().get(1);
		private final RuleCall cInputDeclarationsAInputDeclarationParserRuleCall_3_0_1_0 = (RuleCall)cInputDeclarationsAssignment_3_0_1.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cReturnsKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cOutputDeclarationsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cOutputDeclarationsAOutputDeclarationParserRuleCall_3_1_1_0 = (RuleCall)cOutputDeclarationsAssignment_3_1_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cUsingKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cLocalvarDeclarationsAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cLocalvarDeclarationsALocalDeclarationParserRuleCall_3_2_1_0 = (RuleCall)cLocalvarDeclarationsAssignment_3_2_1.eContents().get(0);
		private final Group cGroup_3_3 = (Group)cGroup_3.eContents().get(3);
		private final Keyword cThroughKeyword_3_3_0 = (Keyword)cGroup_3_3.eContents().get(0);
		private final Group cGroup_3_3_1 = (Group)cGroup_3_3.eContents().get(1);
		private final Assignment cEquationsAssignment_3_3_1_0 = (Assignment)cGroup_3_3_1.eContents().get(0);
		private final RuleCall cEquationsAEquationParserRuleCall_3_3_1_0_0 = (RuleCall)cEquationsAssignment_3_3_1_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_3_1_1 = (Keyword)cGroup_3_3_1.eContents().get(1);
		private final Keyword cFullStopKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//AAffineSystemB returns AAffineSystem:
		//	"affine" name=SystemID parameters=ADomain (("given" inputDeclarations+=AInputDeclaration*)? ("returns"
		//	outputDeclarations+=AOutputDeclaration*)? ("using" localvarDeclarations+=ALocalDeclaration*)? ("through"
		//	(equations+=AEquation ";")*)?) ".";
		public ParserRule getRule() { return rule; }

		//"affine" name=SystemID parameters=ADomain (("given" inputDeclarations+=AInputDeclaration*)? ("returns"
		//outputDeclarations+=AOutputDeclaration*)? ("using" localvarDeclarations+=ALocalDeclaration*)? ("through"
		//(equations+=AEquation ";")*)?) "."
		public Group getGroup() { return cGroup; }

		//"affine"
		public Keyword getAffineKeyword_0() { return cAffineKeyword_0; }

		//name=SystemID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//SystemID
		public RuleCall getNameSystemIDParserRuleCall_1_0() { return cNameSystemIDParserRuleCall_1_0; }

		//parameters=ADomain
		public Assignment getParametersAssignment_2() { return cParametersAssignment_2; }

		//ADomain
		public RuleCall getParametersADomainParserRuleCall_2_0() { return cParametersADomainParserRuleCall_2_0; }

		//("given" inputDeclarations+=AInputDeclaration*)? ("returns" outputDeclarations+=AOutputDeclaration*)? ("using"
		//localvarDeclarations+=ALocalDeclaration*)? ("through" (equations+=AEquation ";")*)?
		public Group getGroup_3() { return cGroup_3; }

		//("given" inputDeclarations+=AInputDeclaration*)?
		public Group getGroup_3_0() { return cGroup_3_0; }

		//"given"
		public Keyword getGivenKeyword_3_0_0() { return cGivenKeyword_3_0_0; }

		//inputDeclarations+=AInputDeclaration*
		public Assignment getInputDeclarationsAssignment_3_0_1() { return cInputDeclarationsAssignment_3_0_1; }

		//AInputDeclaration
		public RuleCall getInputDeclarationsAInputDeclarationParserRuleCall_3_0_1_0() { return cInputDeclarationsAInputDeclarationParserRuleCall_3_0_1_0; }

		//("returns" outputDeclarations+=AOutputDeclaration*)?
		public Group getGroup_3_1() { return cGroup_3_1; }

		//"returns"
		public Keyword getReturnsKeyword_3_1_0() { return cReturnsKeyword_3_1_0; }

		//outputDeclarations+=AOutputDeclaration*
		public Assignment getOutputDeclarationsAssignment_3_1_1() { return cOutputDeclarationsAssignment_3_1_1; }

		//AOutputDeclaration
		public RuleCall getOutputDeclarationsAOutputDeclarationParserRuleCall_3_1_1_0() { return cOutputDeclarationsAOutputDeclarationParserRuleCall_3_1_1_0; }

		//("using" localvarDeclarations+=ALocalDeclaration*)?
		public Group getGroup_3_2() { return cGroup_3_2; }

		//"using"
		public Keyword getUsingKeyword_3_2_0() { return cUsingKeyword_3_2_0; }

		//localvarDeclarations+=ALocalDeclaration*
		public Assignment getLocalvarDeclarationsAssignment_3_2_1() { return cLocalvarDeclarationsAssignment_3_2_1; }

		//ALocalDeclaration
		public RuleCall getLocalvarDeclarationsALocalDeclarationParserRuleCall_3_2_1_0() { return cLocalvarDeclarationsALocalDeclarationParserRuleCall_3_2_1_0; }

		//("through" (equations+=AEquation ";")*)?
		public Group getGroup_3_3() { return cGroup_3_3; }

		//"through"
		public Keyword getThroughKeyword_3_3_0() { return cThroughKeyword_3_3_0; }

		//(equations+=AEquation ";")*
		public Group getGroup_3_3_1() { return cGroup_3_3_1; }

		//equations+=AEquation
		public Assignment getEquationsAssignment_3_3_1_0() { return cEquationsAssignment_3_3_1_0; }

		//AEquation
		public RuleCall getEquationsAEquationParserRuleCall_3_3_1_0_0() { return cEquationsAEquationParserRuleCall_3_3_1_0_0; }

		//";"
		public Keyword getSemicolonKeyword_3_3_1_1() { return cSemicolonKeyword_3_3_1_1; }

		//"."
		public Keyword getFullStopKeyword_4() { return cFullStopKeyword_4; }
	}

	public class AVariableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AVariableDeclaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAOutputDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAInputDeclarationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cALocalDeclarationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//AVariableDeclaration:
		//	AOutputDeclaration | AInputDeclaration | ALocalDeclaration;
		public ParserRule getRule() { return rule; }

		//AOutputDeclaration | AInputDeclaration | ALocalDeclaration
		public Alternatives getAlternatives() { return cAlternatives; }

		//AOutputDeclaration
		public RuleCall getAOutputDeclarationParserRuleCall_0() { return cAOutputDeclarationParserRuleCall_0; }

		//AInputDeclaration
		public RuleCall getAInputDeclarationParserRuleCall_1() { return cAInputDeclarationParserRuleCall_1; }

		//ALocalDeclaration
		public RuleCall getALocalDeclarationParserRuleCall_2() { return cALocalDeclarationParserRuleCall_2; }
	}

	public class AOutputDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AOutputDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeATypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cIdentifierListAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdentifierListAIdentifierListParserRuleCall_1_0 = (RuleCall)cIdentifierListAssignment_1.eContents().get(0);
		private final Assignment cDomainAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDomainADomainParserRuleCall_2_0 = (RuleCall)cDomainAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//AOutputDeclaration:
		//	type=AType identifierList=AIdentifierList domain=ADomain? ";";
		public ParserRule getRule() { return rule; }

		//type=AType identifierList=AIdentifierList domain=ADomain? ";"
		public Group getGroup() { return cGroup; }

		//type=AType
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//AType
		public RuleCall getTypeATypeParserRuleCall_0_0() { return cTypeATypeParserRuleCall_0_0; }

		//identifierList=AIdentifierList
		public Assignment getIdentifierListAssignment_1() { return cIdentifierListAssignment_1; }

		//AIdentifierList
		public RuleCall getIdentifierListAIdentifierListParserRuleCall_1_0() { return cIdentifierListAIdentifierListParserRuleCall_1_0; }

		//domain=ADomain?
		public Assignment getDomainAssignment_2() { return cDomainAssignment_2; }

		//ADomain
		public RuleCall getDomainADomainParserRuleCall_2_0() { return cDomainADomainParserRuleCall_2_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class AInputDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AInputDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeATypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cIdentifierListAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdentifierListAIdentifierListParserRuleCall_1_0 = (RuleCall)cIdentifierListAssignment_1.eContents().get(0);
		private final Assignment cDomainAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDomainADomainParserRuleCall_2_0 = (RuleCall)cDomainAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//AInputDeclaration:
		//	type=AType identifierList=AIdentifierList domain=ADomain? ";";
		public ParserRule getRule() { return rule; }

		//type=AType identifierList=AIdentifierList domain=ADomain? ";"
		public Group getGroup() { return cGroup; }

		//type=AType
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//AType
		public RuleCall getTypeATypeParserRuleCall_0_0() { return cTypeATypeParserRuleCall_0_0; }

		//identifierList=AIdentifierList
		public Assignment getIdentifierListAssignment_1() { return cIdentifierListAssignment_1; }

		//AIdentifierList
		public RuleCall getIdentifierListAIdentifierListParserRuleCall_1_0() { return cIdentifierListAIdentifierListParserRuleCall_1_0; }

		//domain=ADomain?
		public Assignment getDomainAssignment_2() { return cDomainAssignment_2; }

		//ADomain
		public RuleCall getDomainADomainParserRuleCall_2_0() { return cDomainADomainParserRuleCall_2_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class ALocalDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ALocalDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeATypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cIdentifierListAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdentifierListAIdentifierListParserRuleCall_1_0 = (RuleCall)cIdentifierListAssignment_1.eContents().get(0);
		private final Assignment cDomainAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDomainADomainParserRuleCall_2_0 = (RuleCall)cDomainAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ALocalDeclaration:
		//	type=AType identifierList=AIdentifierList domain=ADomain? ";";
		public ParserRule getRule() { return rule; }

		//type=AType identifierList=AIdentifierList domain=ADomain? ";"
		public Group getGroup() { return cGroup; }

		//type=AType
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//AType
		public RuleCall getTypeATypeParserRuleCall_0_0() { return cTypeATypeParserRuleCall_0_0; }

		//identifierList=AIdentifierList
		public Assignment getIdentifierListAssignment_1() { return cIdentifierListAssignment_1; }

		//AIdentifierList
		public RuleCall getIdentifierListAIdentifierListParserRuleCall_1_0() { return cIdentifierListAIdentifierListParserRuleCall_1_0; }

		//domain=ADomain?
		public Assignment getDomainAssignment_2() { return cDomainAssignment_2; }

		//ADomain
		public RuleCall getDomainADomainParserRuleCall_2_0() { return cDomainADomainParserRuleCall_2_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class AWhileDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AWhileDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTimeDomainAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTimeDomainADomainParserRuleCall_0_0 = (RuleCall)cTimeDomainAssignment_0.eContents().get(0);
		private final Keyword cWhileKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCondAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCondAAlphabetsExpressionParserRuleCall_2_0 = (RuleCall)cCondAssignment_2.eContents().get(0);
		
		//AWhileDeclaration:
		//	timeDomain=ADomain "while" cond=AAlphabetsExpression;
		public ParserRule getRule() { return rule; }

		//timeDomain=ADomain "while" cond=AAlphabetsExpression
		public Group getGroup() { return cGroup; }

		//timeDomain=ADomain
		public Assignment getTimeDomainAssignment_0() { return cTimeDomainAssignment_0; }

		//ADomain
		public RuleCall getTimeDomainADomainParserRuleCall_0_0() { return cTimeDomainADomainParserRuleCall_0_0; }

		//"while"
		public Keyword getWhileKeyword_1() { return cWhileKeyword_1; }

		//cond=AAlphabetsExpression
		public Assignment getCondAssignment_2() { return cCondAssignment_2; }

		//AAlphabetsExpression
		public RuleCall getCondAAlphabetsExpressionParserRuleCall_2_0() { return cCondAAlphabetsExpressionParserRuleCall_2_0; }
	}

	public class AIdentifierListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AIdentifierList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdentifiersAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdentifiersVariableIdentifierParserRuleCall_0_0 = (RuleCall)cIdentifiersAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cIdentifiersAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cIdentifiersVariableIdentifierParserRuleCall_1_1_0 = (RuleCall)cIdentifiersAssignment_1_1.eContents().get(0);
		
		//AIdentifierList:
		//	identifiers+=VariableIdentifier ("," identifiers+=VariableIdentifier)*;
		public ParserRule getRule() { return rule; }

		//identifiers+=VariableIdentifier ("," identifiers+=VariableIdentifier)*
		public Group getGroup() { return cGroup; }

		//identifiers+=VariableIdentifier
		public Assignment getIdentifiersAssignment_0() { return cIdentifiersAssignment_0; }

		//VariableIdentifier
		public RuleCall getIdentifiersVariableIdentifierParserRuleCall_0_0() { return cIdentifiersVariableIdentifierParserRuleCall_0_0; }

		//("," identifiers+=VariableIdentifier)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//identifiers+=VariableIdentifier
		public Assignment getIdentifiersAssignment_1_1() { return cIdentifiersAssignment_1_1; }

		//VariableIdentifier
		public RuleCall getIdentifiersVariableIdentifierParserRuleCall_1_1_0() { return cIdentifiersVariableIdentifierParserRuleCall_1_1_0; }
	}

	public class VariableIdentifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableIdentifier");
		private final RuleCall cIDTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//VariableIdentifier:
		//	ID;
		public ParserRule getRule() { return rule; }

		//ID
		public RuleCall getIDTerminalRuleCall() { return cIDTerminalRuleCall; }
	}

	public class ADomainElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ADomain");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPolyhedraAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPolyhedraAPolyhedronParserRuleCall_0_0 = (RuleCall)cPolyhedraAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cUNIONTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cPolyhedraAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cPolyhedraAPolyhedronParserRuleCall_1_1_0 = (RuleCall)cPolyhedraAssignment_1_1.eContents().get(0);
		
		//////// Domains ////////
		////Domains are unions of single polyhedron
		//ADomain:
		//	polyhedra+=APolyhedron (UNION polyhedra+=APolyhedron)*;
		public ParserRule getRule() { return rule; }

		//polyhedra+=APolyhedron (UNION polyhedra+=APolyhedron)*
		public Group getGroup() { return cGroup; }

		//polyhedra+=APolyhedron
		public Assignment getPolyhedraAssignment_0() { return cPolyhedraAssignment_0; }

		//APolyhedron
		public RuleCall getPolyhedraAPolyhedronParserRuleCall_0_0() { return cPolyhedraAPolyhedronParserRuleCall_0_0; }

		//(UNION polyhedra+=APolyhedron)*
		public Group getGroup_1() { return cGroup_1; }

		//UNION
		public RuleCall getUNIONTerminalRuleCall_1_0() { return cUNIONTerminalRuleCall_1_0; }

		//polyhedra+=APolyhedron
		public Assignment getPolyhedraAssignment_1_1() { return cPolyhedraAssignment_1_1; }

		//APolyhedron
		public RuleCall getPolyhedraAPolyhedronParserRuleCall_1_1_0() { return cPolyhedraAPolyhedronParserRuleCall_1_1_0; }
	}

	public class APolyhedronElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "APolyhedron");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIndexesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIndexesAIndexListParserRuleCall_1_0 = (RuleCall)cIndexesAssignment_1.eContents().get(0);
		private final Keyword cVerticalLineKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cConstraintsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cConstraintsInEqualityParserRuleCall_3_0_0 = (RuleCall)cConstraintsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final RuleCall cINTERSECTIONTerminalRuleCall_3_1_0 = (RuleCall)cGroup_3_1.eContents().get(0);
		private final Assignment cConstraintsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cConstraintsInEqualityParserRuleCall_3_1_1_0 = (RuleCall)cConstraintsAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		////TerminalDomain : 
		////	ConstraintsDomain;
		////  |
		////ParenthesisDomain 
		////| NegatedDomain;
		////No negated domains in alphabets	
		////NegatedDomain:
		////	'~' exp=TerminalDomain;
		////No parenthesised domains in alphabets	
		////ParenthesisDomain : 
		////	'(' Domain ')' ; 
		//APolyhedron:
		//	"{" indexes=AIndexList //(indexList=IndexDefinitionList)? 
		//	"|" (constraints+=InEquality (INTERSECTION constraints+=InEquality)*)? "}";
		public ParserRule getRule() { return rule; }

		//"{" indexes=AIndexList //(indexList=IndexDefinitionList)? 
		//"|" (constraints+=InEquality (INTERSECTION constraints+=InEquality)*)? "}"
		public Group getGroup() { return cGroup; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }

		//indexes=AIndexList
		public Assignment getIndexesAssignment_1() { return cIndexesAssignment_1; }

		//AIndexList
		public RuleCall getIndexesAIndexListParserRuleCall_1_0() { return cIndexesAIndexListParserRuleCall_1_0; }

		////(indexList=IndexDefinitionList)? 
		//"|"
		public Keyword getVerticalLineKeyword_2() { return cVerticalLineKeyword_2; }

		//(constraints+=InEquality (INTERSECTION constraints+=InEquality)*)?
		public Group getGroup_3() { return cGroup_3; }

		//constraints+=InEquality
		public Assignment getConstraintsAssignment_3_0() { return cConstraintsAssignment_3_0; }

		//InEquality
		public RuleCall getConstraintsInEqualityParserRuleCall_3_0_0() { return cConstraintsInEqualityParserRuleCall_3_0_0; }

		//(INTERSECTION constraints+=InEquality)*
		public Group getGroup_3_1() { return cGroup_3_1; }

		//INTERSECTION
		public RuleCall getINTERSECTIONTerminalRuleCall_3_1_0() { return cINTERSECTIONTerminalRuleCall_3_1_0; }

		//constraints+=InEquality
		public Assignment getConstraintsAssignment_3_1_1() { return cConstraintsAssignment_3_1_1; }

		//InEquality
		public RuleCall getConstraintsInEqualityParserRuleCall_3_1_1_0() { return cConstraintsInEqualityParserRuleCall_3_1_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class InEqualityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InEquality");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cIDListParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cIDExpressionParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cRelationalOpParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final RuleCall cIDListParserRuleCall_1_1_0 = (RuleCall)cAlternatives_1_1.eContents().get(0);
		private final RuleCall cIDExpressionParserRuleCall_1_1_1 = (RuleCall)cAlternatives_1_1.eContents().get(1);
		
		////Constraint that is just a string == InEquality
		//InEquality:
		//	(IDList //INTEGER RelationalOp INTEGER;
		//	//InEqID RelationalOp InEqID;
		//	| IDExpression) (RelationalOp (IDList | IDExpression))+;
		public ParserRule getRule() { return rule; }

		//(IDList //INTEGER RelationalOp INTEGER;
		////InEqID RelationalOp InEqID;
		//| IDExpression) (RelationalOp (IDList | IDExpression))+
		public Group getGroup() { return cGroup; }

		//IDList //INTEGER RelationalOp INTEGER;
		////InEqID RelationalOp InEqID;
		//| IDExpression
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//IDList
		public RuleCall getIDListParserRuleCall_0_0() { return cIDListParserRuleCall_0_0; }

		//IDExpression
		public RuleCall getIDExpressionParserRuleCall_0_1() { return cIDExpressionParserRuleCall_0_1; }

		//(RelationalOp (IDList | IDExpression))+
		public Group getGroup_1() { return cGroup_1; }

		//RelationalOp
		public RuleCall getRelationalOpParserRuleCall_1_0() { return cRelationalOpParserRuleCall_1_0; }

		//IDList | IDExpression
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }

		//IDList
		public RuleCall getIDListParserRuleCall_1_1_0() { return cIDListParserRuleCall_1_1_0; }

		//IDExpression
		public RuleCall getIDExpressionParserRuleCall_1_1_1() { return cIDExpressionParserRuleCall_1_1_1; }
	}

	public class IDListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IDList");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cInEqIDParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Keyword cCommaKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final RuleCall cInEqIDParserRuleCall_0_1_1 = (RuleCall)cGroup_0_1.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cInEqIDParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final RuleCall cInEqIDParserRuleCall_1_2_1 = (RuleCall)cGroup_1_2.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		////IDList|IDExpression RelationalOp IDList|IDExpression;
		//IDList:
		//	InEqID ("," InEqID)* | "(" InEqID ("," InEqID)* ")";
		public ParserRule getRule() { return rule; }

		//InEqID ("," InEqID)* | "(" InEqID ("," InEqID)* ")"
		public Alternatives getAlternatives() { return cAlternatives; }

		//InEqID ("," InEqID)*
		public Group getGroup_0() { return cGroup_0; }

		//InEqID
		public RuleCall getInEqIDParserRuleCall_0_0() { return cInEqIDParserRuleCall_0_0; }

		//("," InEqID)*
		public Group getGroup_0_1() { return cGroup_0_1; }

		//","
		public Keyword getCommaKeyword_0_1_0() { return cCommaKeyword_0_1_0; }

		//InEqID
		public RuleCall getInEqIDParserRuleCall_0_1_1() { return cInEqIDParserRuleCall_0_1_1; }

		//"(" InEqID ("," InEqID)* ")"
		public Group getGroup_1() { return cGroup_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }

		//InEqID
		public RuleCall getInEqIDParserRuleCall_1_1() { return cInEqIDParserRuleCall_1_1; }

		//("," InEqID)*
		public Group getGroup_1_2() { return cGroup_1_2; }

		//","
		public Keyword getCommaKeyword_1_2_0() { return cCommaKeyword_1_2_0; }

		//InEqID
		public RuleCall getInEqIDParserRuleCall_1_2_1() { return cInEqIDParserRuleCall_1_2_1; }

		//")"
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }
	}

	public class IDExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IDExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cInEqIDParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final RuleCall cPlusOpTerminalRuleCall_1_0_0 = (RuleCall)cAlternatives_1_0.eContents().get(0);
		private final RuleCall cMinusOpTerminalRuleCall_1_0_1 = (RuleCall)cAlternatives_1_0.eContents().get(1);
		private final RuleCall cInEqIDParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//IDExpression:
		//	InEqID ((PlusOp | MinusOp) InEqID)+;
		public ParserRule getRule() { return rule; }

		//InEqID ((PlusOp | MinusOp) InEqID)+
		public Group getGroup() { return cGroup; }

		//InEqID
		public RuleCall getInEqIDParserRuleCall_0() { return cInEqIDParserRuleCall_0; }

		//((PlusOp | MinusOp) InEqID)+
		public Group getGroup_1() { return cGroup_1; }

		//PlusOp | MinusOp
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//PlusOp
		public RuleCall getPlusOpTerminalRuleCall_1_0_0() { return cPlusOpTerminalRuleCall_1_0_0; }

		//MinusOp
		public RuleCall getMinusOpTerminalRuleCall_1_0_1() { return cMinusOpTerminalRuleCall_1_0_1; }

		//InEqID
		public RuleCall getInEqIDParserRuleCall_1_1() { return cInEqIDParserRuleCall_1_1; }
	}

	public class InEqIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InEqID");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMinusOpTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_1_1_0 = (RuleCall)cGroup_1_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1_1 = (RuleCall)cGroup_1_1.eContents().get(1);
		
		////IDs in inequalities may have integer prefix for multiplication	
		//InEqID:
		//	MinusOp? (INT+ | INT* ID);
		public ParserRule getRule() { return rule; }

		//MinusOp? (INT+ | INT* ID)
		public Group getGroup() { return cGroup; }

		//MinusOp?
		public RuleCall getMinusOpTerminalRuleCall_0() { return cMinusOpTerminalRuleCall_0; }

		//INT+ | INT* ID
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//INT+
		public RuleCall getINTTerminalRuleCall_1_0() { return cINTTerminalRuleCall_1_0; }

		//INT* ID
		public Group getGroup_1_1() { return cGroup_1_1; }

		//INT*
		public RuleCall getINTTerminalRuleCall_1_1_0() { return cINTTerminalRuleCall_1_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1_1() { return cIDTerminalRuleCall_1_1_1; }
	}

	public class AEquationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AEquation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAStandardEquationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAUseEquationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		////Constraint that is complicated	
		////Constraint:
		////	lhsIndices+=IndexAdditiveExpression ( ',' lhsIndices+=IndexAdditiveExpression)* 
		////	op1=RelationalOp
		////	midIndices+=IndexAdditiveExpression ( ',' midIndices+=IndexAdditiveExpression)*
		////	(
		////		op2=RelationalOp
		////		rhsIndices+=IndexAdditiveExpression ( ',' rhsIndices+=IndexAdditiveExpression)*
		////	)?
		////	;
		///////// Equations //////
		//AEquation:
		//	AStandardEquation | AUseEquation;
		public ParserRule getRule() { return rule; }

		//AStandardEquation | AUseEquation
		public Alternatives getAlternatives() { return cAlternatives; }

		//AStandardEquation
		public RuleCall getAStandardEquationParserRuleCall_0() { return cAStandardEquationParserRuleCall_0; }

		//AUseEquation
		public RuleCall getAUseEquationParserRuleCall_1() { return cAUseEquationParserRuleCall_1; }
	}

	public class AStandardEquationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AStandardEquation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVarAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVarIDTerminalRuleCall_0_0 = (RuleCall)cVarAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cIndexesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cIndexesAIndexListParserRuleCall_1_1_0 = (RuleCall)cIndexesAssignment_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExprAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExprAAlphabetsExpressionParserRuleCall_3_0 = (RuleCall)cExprAssignment_3.eContents().get(0);
		
		//AStandardEquation: //(indexList=IndexDefinitionList)? 
		////var=LHSVariableReference ('[' (rhsIds+=IndexReference (',' rhsIds+=IndexReference)* )?']')? '=' exp=AlphabetsExpression ';';
		//	var=ID ("[" indexes=AIndexList "]")? "=" expr=AAlphabetsExpression;
		public ParserRule getRule() { return rule; }

		////(indexList=IndexDefinitionList)? 
		////var=LHSVariableReference ('[' (rhsIds+=IndexReference (',' rhsIds+=IndexReference)* )?']')? '=' exp=AlphabetsExpression ';';
		//var=ID ("[" indexes=AIndexList "]")? "=" expr=AAlphabetsExpression
		public Group getGroup() { return cGroup; }

		////(indexList=IndexDefinitionList)? 
		////var=LHSVariableReference ('[' (rhsIds+=IndexReference (',' rhsIds+=IndexReference)* )?']')? '=' exp=AlphabetsExpression ';';
		//var=ID
		public Assignment getVarAssignment_0() { return cVarAssignment_0; }

		//ID
		public RuleCall getVarIDTerminalRuleCall_0_0() { return cVarIDTerminalRuleCall_0_0; }

		//("[" indexes=AIndexList "]")?
		public Group getGroup_1() { return cGroup_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketKeyword_1_0; }

		//indexes=AIndexList
		public Assignment getIndexesAssignment_1_1() { return cIndexesAssignment_1_1; }

		//AIndexList
		public RuleCall getIndexesAIndexListParserRuleCall_1_1_0() { return cIndexesAIndexListParserRuleCall_1_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_2() { return cRightSquareBracketKeyword_1_2; }

		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }

		//expr=AAlphabetsExpression
		public Assignment getExprAssignment_3() { return cExprAssignment_3; }

		//AAlphabetsExpression
		public RuleCall getExprAAlphabetsExpressionParserRuleCall_3_0() { return cExprAAlphabetsExpressionParserRuleCall_3_0; }
	}

	public class AUseEquationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AUseEquation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExtDomAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExtDomADomainParserRuleCall_1_0 = (RuleCall)cExtDomAssignment_1.eContents().get(0);
		private final Assignment cNameSubSysAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameSubSysIDTerminalRuleCall_2_0 = (RuleCall)cNameSubSysAssignment_2.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cParamAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cParamAIndexAffineExpressionListParserRuleCall_4_0 = (RuleCall)cParamAssignment_4.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cLeftParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cInputsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cInputsAAlphabetsExpressionParserRuleCall_7_0 = (RuleCall)cInputsAssignment_7.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cCommaKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cInputsAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cInputsAAlphabetsExpressionParserRuleCall_8_1_0 = (RuleCall)cInputsAssignment_8_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Keyword cReturnsKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Keyword cLeftParenthesisKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Assignment cOutputsAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final RuleCall cOutputsAIdentifierListParserRuleCall_12_0 = (RuleCall)cOutputsAssignment_12.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_13 = (Keyword)cGroup.eContents().get(13);
		
		//AUseEquation:
		//	"use" extDom=ADomain? nameSubSys=ID "[" param=AIndexAffineExpressionList "]" "(" inputs+=AAlphabetsExpression? (","
		//	inputs+=AAlphabetsExpression)* ")" "returns" "(" outputs=AIdentifierList ")";
		public ParserRule getRule() { return rule; }

		//"use" extDom=ADomain? nameSubSys=ID "[" param=AIndexAffineExpressionList "]" "(" inputs+=AAlphabetsExpression? (","
		//inputs+=AAlphabetsExpression)* ")" "returns" "(" outputs=AIdentifierList ")"
		public Group getGroup() { return cGroup; }

		//"use"
		public Keyword getUseKeyword_0() { return cUseKeyword_0; }

		//extDom=ADomain?
		public Assignment getExtDomAssignment_1() { return cExtDomAssignment_1; }

		//ADomain
		public RuleCall getExtDomADomainParserRuleCall_1_0() { return cExtDomADomainParserRuleCall_1_0; }

		//nameSubSys=ID
		public Assignment getNameSubSysAssignment_2() { return cNameSubSysAssignment_2; }

		//ID
		public RuleCall getNameSubSysIDTerminalRuleCall_2_0() { return cNameSubSysIDTerminalRuleCall_2_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_3() { return cLeftSquareBracketKeyword_3; }

		//param=AIndexAffineExpressionList
		public Assignment getParamAssignment_4() { return cParamAssignment_4; }

		//AIndexAffineExpressionList
		public RuleCall getParamAIndexAffineExpressionListParserRuleCall_4_0() { return cParamAIndexAffineExpressionListParserRuleCall_4_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_5() { return cRightSquareBracketKeyword_5; }

		//"("
		public Keyword getLeftParenthesisKeyword_6() { return cLeftParenthesisKeyword_6; }

		//inputs+=AAlphabetsExpression?
		public Assignment getInputsAssignment_7() { return cInputsAssignment_7; }

		//AAlphabetsExpression
		public RuleCall getInputsAAlphabetsExpressionParserRuleCall_7_0() { return cInputsAAlphabetsExpressionParserRuleCall_7_0; }

		//("," inputs+=AAlphabetsExpression)*
		public Group getGroup_8() { return cGroup_8; }

		//","
		public Keyword getCommaKeyword_8_0() { return cCommaKeyword_8_0; }

		//inputs+=AAlphabetsExpression
		public Assignment getInputsAssignment_8_1() { return cInputsAssignment_8_1; }

		//AAlphabetsExpression
		public RuleCall getInputsAAlphabetsExpressionParserRuleCall_8_1_0() { return cInputsAAlphabetsExpressionParserRuleCall_8_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_9() { return cRightParenthesisKeyword_9; }

		//"returns"
		public Keyword getReturnsKeyword_10() { return cReturnsKeyword_10; }

		//"("
		public Keyword getLeftParenthesisKeyword_11() { return cLeftParenthesisKeyword_11; }

		//outputs=AIdentifierList
		public Assignment getOutputsAssignment_12() { return cOutputsAssignment_12; }

		//AIdentifierList
		public RuleCall getOutputsAIdentifierListParserRuleCall_12_0() { return cOutputsAIdentifierListParserRuleCall_12_0; }

		//")"
		public Keyword getRightParenthesisKeyword_13() { return cRightParenthesisKeyword_13; }
	}

	public class AAlphabetsExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AAlphabetsExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAIfExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cARestrictExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAOrExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		////AAffineExpressionList :
		////	expressions+=AAlphabetsExpression (',' expressions+=AAlphabetsExpression)*;
		//////// Expressions //////
		//AAlphabetsExpression:
		//	AIfExpression | ARestrictExpression | AOrExpression;
		public ParserRule getRule() { return rule; }

		//AIfExpression | ARestrictExpression | AOrExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//AIfExpression
		public RuleCall getAIfExpressionParserRuleCall_0() { return cAIfExpressionParserRuleCall_0; }

		//ARestrictExpression
		public RuleCall getARestrictExpressionParserRuleCall_1() { return cARestrictExpressionParserRuleCall_1; }

		//AOrExpression
		public RuleCall getAOrExpressionParserRuleCall_2() { return cAOrExpressionParserRuleCall_2; }
	}

	public class AAlphabetsTerminalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AAlphabetsTerminalExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAParanthesizedAlphabetsExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cACaseExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAReduceExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cAMultiArgExpressionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cAConstantExpressionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cAVariableExpressionParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cAIndexExpressionParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cADependenceExpressionParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cADependenceInArrayNotationParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		
		//AAlphabetsTerminalExpression returns AAlphabetsExpression:
		//	AParanthesizedAlphabetsExpression | ACaseExpression | AReduceExpression | AMultiArgExpression | AConstantExpression |
		//	AVariableExpression | AIndexExpression | ADependenceExpression | ADependenceInArrayNotation;
		public ParserRule getRule() { return rule; }

		//AParanthesizedAlphabetsExpression | ACaseExpression | AReduceExpression | AMultiArgExpression | AConstantExpression |
		//AVariableExpression | AIndexExpression | ADependenceExpression | ADependenceInArrayNotation
		public Alternatives getAlternatives() { return cAlternatives; }

		//AParanthesizedAlphabetsExpression
		public RuleCall getAParanthesizedAlphabetsExpressionParserRuleCall_0() { return cAParanthesizedAlphabetsExpressionParserRuleCall_0; }

		//ACaseExpression
		public RuleCall getACaseExpressionParserRuleCall_1() { return cACaseExpressionParserRuleCall_1; }

		//AReduceExpression
		public RuleCall getAReduceExpressionParserRuleCall_2() { return cAReduceExpressionParserRuleCall_2; }

		//AMultiArgExpression
		public RuleCall getAMultiArgExpressionParserRuleCall_3() { return cAMultiArgExpressionParserRuleCall_3; }

		//AConstantExpression
		public RuleCall getAConstantExpressionParserRuleCall_4() { return cAConstantExpressionParserRuleCall_4; }

		//AVariableExpression
		public RuleCall getAVariableExpressionParserRuleCall_5() { return cAVariableExpressionParserRuleCall_5; }

		//AIndexExpression
		public RuleCall getAIndexExpressionParserRuleCall_6() { return cAIndexExpressionParserRuleCall_6; }

		//ADependenceExpression
		public RuleCall getADependenceExpressionParserRuleCall_7() { return cADependenceExpressionParserRuleCall_7; }

		//ADependenceInArrayNotation
		public RuleCall getADependenceInArrayNotationParserRuleCall_8() { return cADependenceInArrayNotationParserRuleCall_8; }
	}

	public class AParanthesizedAlphabetsExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AParanthesizedAlphabetsExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cAAlphabetsExpressionParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//AParanthesizedAlphabetsExpression returns AAlphabetsExpression:
		//	"(" AAlphabetsExpression ")";
		public ParserRule getRule() { return rule; }

		//"(" AAlphabetsExpression ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//AAlphabetsExpression
		public RuleCall getAAlphabetsExpressionParserRuleCall_1() { return cAAlphabetsExpressionParserRuleCall_1; }

		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}

	public class AOrExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AOrExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAAndExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAOrExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOperatorAlternatives_1_1_0 = (Alternatives)cOperatorAssignment_1_1.eContents().get(0);
		private final RuleCall cOperatorOrOpTerminalRuleCall_1_1_0_0 = (RuleCall)cOperatorAlternatives_1_1_0.eContents().get(0);
		private final RuleCall cOperatorXorOpTerminalRuleCall_1_1_0_1 = (RuleCall)cOperatorAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAAndExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//AOrExpression returns AAlphabetsExpression:
		//	AAndExpression ({AOrExpression.left=current} operator=(OrOp | XorOp) right=AAndExpression)*;
		public ParserRule getRule() { return rule; }

		//AAndExpression ({AOrExpression.left=current} operator=(OrOp | XorOp) right=AAndExpression)*
		public Group getGroup() { return cGroup; }

		//AAndExpression
		public RuleCall getAAndExpressionParserRuleCall_0() { return cAAndExpressionParserRuleCall_0; }

		//({AOrExpression.left=current} operator=(OrOp | XorOp) right=AAndExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{AOrExpression.left=current}
		public Action getAOrExpressionLeftAction_1_0() { return cAOrExpressionLeftAction_1_0; }

		//operator=(OrOp | XorOp)
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }

		//OrOp | XorOp
		public Alternatives getOperatorAlternatives_1_1_0() { return cOperatorAlternatives_1_1_0; }

		//OrOp
		public RuleCall getOperatorOrOpTerminalRuleCall_1_1_0_0() { return cOperatorOrOpTerminalRuleCall_1_1_0_0; }

		//XorOp
		public RuleCall getOperatorXorOpTerminalRuleCall_1_1_0_1() { return cOperatorXorOpTerminalRuleCall_1_1_0_1; }

		//right=AAndExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//AAndExpression
		public RuleCall getRightAAndExpressionParserRuleCall_1_2_0() { return cRightAAndExpressionParserRuleCall_1_2_0; }
	}

	public class AAndExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AAndExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cARelationalExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAAndExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOperatorAlternatives_1_1_0 = (Alternatives)cOperatorAssignment_1_1.eContents().get(0);
		private final RuleCall cOperatorAndOpTerminalRuleCall_1_1_0_0 = (RuleCall)cOperatorAlternatives_1_1_0.eContents().get(0);
		private final RuleCall cOperatorNandOpTerminalRuleCall_1_1_0_1 = (RuleCall)cOperatorAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightARelationalExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//AAndExpression returns AAlphabetsExpression:
		//	ARelationalExpression ({AAndExpression.left=current} operator=(AndOp | NandOp) right=ARelationalExpression)*;
		public ParserRule getRule() { return rule; }

		//ARelationalExpression ({AAndExpression.left=current} operator=(AndOp | NandOp) right=ARelationalExpression)*
		public Group getGroup() { return cGroup; }

		//ARelationalExpression
		public RuleCall getARelationalExpressionParserRuleCall_0() { return cARelationalExpressionParserRuleCall_0; }

		//({AAndExpression.left=current} operator=(AndOp | NandOp) right=ARelationalExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{AAndExpression.left=current}
		public Action getAAndExpressionLeftAction_1_0() { return cAAndExpressionLeftAction_1_0; }

		//operator=(AndOp | NandOp)
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }

		//AndOp | NandOp
		public Alternatives getOperatorAlternatives_1_1_0() { return cOperatorAlternatives_1_1_0; }

		//AndOp
		public RuleCall getOperatorAndOpTerminalRuleCall_1_1_0_0() { return cOperatorAndOpTerminalRuleCall_1_1_0_0; }

		//NandOp
		public RuleCall getOperatorNandOpTerminalRuleCall_1_1_0_1() { return cOperatorNandOpTerminalRuleCall_1_1_0_1; }

		//right=ARelationalExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//ARelationalExpression
		public RuleCall getRightARelationalExpressionParserRuleCall_1_2_0() { return cRightARelationalExpressionParserRuleCall_1_2_0; }
	}

	public class ARelationalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ARelationalExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAAdditiveExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cARelationalExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorRelationalOpParserRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAAdditiveExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//ARelationalExpression returns AAlphabetsExpression:
		//	AAdditiveExpression ({ARelationalExpression.left=current} operator=RelationalOp right=AAdditiveExpression)*;
		public ParserRule getRule() { return rule; }

		//AAdditiveExpression ({ARelationalExpression.left=current} operator=RelationalOp right=AAdditiveExpression)*
		public Group getGroup() { return cGroup; }

		//AAdditiveExpression
		public RuleCall getAAdditiveExpressionParserRuleCall_0() { return cAAdditiveExpressionParserRuleCall_0; }

		//({ARelationalExpression.left=current} operator=RelationalOp right=AAdditiveExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{ARelationalExpression.left=current}
		public Action getARelationalExpressionLeftAction_1_0() { return cARelationalExpressionLeftAction_1_0; }

		//operator=RelationalOp
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }

		//RelationalOp
		public RuleCall getOperatorRelationalOpParserRuleCall_1_1_0() { return cOperatorRelationalOpParserRuleCall_1_1_0; }

		//right=AAdditiveExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//AAdditiveExpression
		public RuleCall getRightAAdditiveExpressionParserRuleCall_1_2_0() { return cRightAAdditiveExpressionParserRuleCall_1_2_0; }
	}

	public class AAdditiveExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AAdditiveExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAModuloExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAAdditiveExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final RuleCall cOpPlusOpTerminalRuleCall_1_1_0_0 = (RuleCall)cOpAlternatives_1_1_0.eContents().get(0);
		private final RuleCall cOpMinusOpTerminalRuleCall_1_1_0_1 = (RuleCall)cOpAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAModuloExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//AAdditiveExpression returns AAlphabetsExpression:
		//	AModuloExpression ({AAdditiveExpression.left=current} op=(PlusOp | MinusOp) right=AModuloExpression)*;
		public ParserRule getRule() { return rule; }

		//AModuloExpression ({AAdditiveExpression.left=current} op=(PlusOp | MinusOp) right=AModuloExpression)*
		public Group getGroup() { return cGroup; }

		//AModuloExpression
		public RuleCall getAModuloExpressionParserRuleCall_0() { return cAModuloExpressionParserRuleCall_0; }

		//({AAdditiveExpression.left=current} op=(PlusOp | MinusOp) right=AModuloExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{AAdditiveExpression.left=current}
		public Action getAAdditiveExpressionLeftAction_1_0() { return cAAdditiveExpressionLeftAction_1_0; }

		//op=(PlusOp | MinusOp)
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }

		//PlusOp | MinusOp
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }

		//PlusOp
		public RuleCall getOpPlusOpTerminalRuleCall_1_1_0_0() { return cOpPlusOpTerminalRuleCall_1_1_0_0; }

		//MinusOp
		public RuleCall getOpMinusOpTerminalRuleCall_1_1_0_1() { return cOpMinusOpTerminalRuleCall_1_1_0_1; }

		//right=AModuloExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//AModuloExpression
		public RuleCall getRightAModuloExpressionParserRuleCall_1_2_0() { return cRightAModuloExpressionParserRuleCall_1_2_0; }
	}

	public class AModuloExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AModuloExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAMultiplicativeExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAModuloExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOpModOpTerminalRuleCall_1_1_0 = (RuleCall)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAMultiplicativeExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//AModuloExpression returns AAlphabetsExpression:
		//	AMultiplicativeExpression ({AModuloExpression.left=current} op=ModOp right=AMultiplicativeExpression)*;
		public ParserRule getRule() { return rule; }

		//AMultiplicativeExpression ({AModuloExpression.left=current} op=ModOp right=AMultiplicativeExpression)*
		public Group getGroup() { return cGroup; }

		//AMultiplicativeExpression
		public RuleCall getAMultiplicativeExpressionParserRuleCall_0() { return cAMultiplicativeExpressionParserRuleCall_0; }

		//({AModuloExpression.left=current} op=ModOp right=AMultiplicativeExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{AModuloExpression.left=current}
		public Action getAModuloExpressionLeftAction_1_0() { return cAModuloExpressionLeftAction_1_0; }

		//op=ModOp
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }

		//ModOp
		public RuleCall getOpModOpTerminalRuleCall_1_1_0() { return cOpModOpTerminalRuleCall_1_1_0; }

		//right=AMultiplicativeExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//AMultiplicativeExpression
		public RuleCall getRightAMultiplicativeExpressionParserRuleCall_1_2_0() { return cRightAMultiplicativeExpressionParserRuleCall_1_2_0; }
	}

	public class AMultiplicativeExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AMultiplicativeExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAMinMaxExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAMultiplicativeExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final RuleCall cOpMulOpTerminalRuleCall_1_1_0_0 = (RuleCall)cOpAlternatives_1_1_0.eContents().get(0);
		private final RuleCall cOpDivOpTerminalRuleCall_1_1_0_1 = (RuleCall)cOpAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAMinMaxExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//AMultiplicativeExpression returns AAlphabetsExpression:
		//	AMinMaxExpression ({AMultiplicativeExpression.left=current} op=(MulOp | DivOp) right=AMinMaxExpression)*;
		public ParserRule getRule() { return rule; }

		//AMinMaxExpression ({AMultiplicativeExpression.left=current} op=(MulOp | DivOp) right=AMinMaxExpression)*
		public Group getGroup() { return cGroup; }

		//AMinMaxExpression
		public RuleCall getAMinMaxExpressionParserRuleCall_0() { return cAMinMaxExpressionParserRuleCall_0; }

		//({AMultiplicativeExpression.left=current} op=(MulOp | DivOp) right=AMinMaxExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{AMultiplicativeExpression.left=current}
		public Action getAMultiplicativeExpressionLeftAction_1_0() { return cAMultiplicativeExpressionLeftAction_1_0; }

		//op=(MulOp | DivOp)
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }

		//MulOp | DivOp
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }

		//MulOp
		public RuleCall getOpMulOpTerminalRuleCall_1_1_0_0() { return cOpMulOpTerminalRuleCall_1_1_0_0; }

		//DivOp
		public RuleCall getOpDivOpTerminalRuleCall_1_1_0_1() { return cOpDivOpTerminalRuleCall_1_1_0_1; }

		//right=AMinMaxExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//AMinMaxExpression
		public RuleCall getRightAMinMaxExpressionParserRuleCall_1_2_0() { return cRightAMinMaxExpressionParserRuleCall_1_2_0; }
	}

	public class AMinMaxExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AMinMaxExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAUnaryOrTerminalExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAMinMaxExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final RuleCall cOpMinOpTerminalRuleCall_1_1_0_0 = (RuleCall)cOpAlternatives_1_1_0.eContents().get(0);
		private final RuleCall cOpMaxOpTerminalRuleCall_1_1_0_1 = (RuleCall)cOpAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAUnaryOrTerminalExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//AMinMaxExpression returns AAlphabetsExpression:
		//	AUnaryOrTerminalExpression ({AMinMaxExpression.left=current} op=(MinOp | MaxOp) right=AUnaryOrTerminalExpression)*;
		public ParserRule getRule() { return rule; }

		//AUnaryOrTerminalExpression ({AMinMaxExpression.left=current} op=(MinOp | MaxOp) right=AUnaryOrTerminalExpression)*
		public Group getGroup() { return cGroup; }

		//AUnaryOrTerminalExpression
		public RuleCall getAUnaryOrTerminalExpressionParserRuleCall_0() { return cAUnaryOrTerminalExpressionParserRuleCall_0; }

		//({AMinMaxExpression.left=current} op=(MinOp | MaxOp) right=AUnaryOrTerminalExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{AMinMaxExpression.left=current}
		public Action getAMinMaxExpressionLeftAction_1_0() { return cAMinMaxExpressionLeftAction_1_0; }

		//op=(MinOp | MaxOp)
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }

		//MinOp | MaxOp
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }

		//MinOp
		public RuleCall getOpMinOpTerminalRuleCall_1_1_0_0() { return cOpMinOpTerminalRuleCall_1_1_0_0; }

		//MaxOp
		public RuleCall getOpMaxOpTerminalRuleCall_1_1_0_1() { return cOpMaxOpTerminalRuleCall_1_1_0_1; }

		//right=AUnaryOrTerminalExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//AUnaryOrTerminalExpression
		public RuleCall getRightAUnaryOrTerminalExpressionParserRuleCall_1_2_0() { return cRightAUnaryOrTerminalExpressionParserRuleCall_1_2_0; }
	}

	public class AUnaryOrTerminalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AUnaryOrTerminalExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAUnaryExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAAlphabetsTerminalExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//AUnaryOrTerminalExpression returns AAlphabetsExpression:
		//	AUnaryExpression | AAlphabetsTerminalExpression;
		public ParserRule getRule() { return rule; }

		//AUnaryExpression | AAlphabetsTerminalExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//AUnaryExpression
		public RuleCall getAUnaryExpressionParserRuleCall_0() { return cAUnaryExpressionParserRuleCall_0; }

		//AAlphabetsTerminalExpression
		public RuleCall getAAlphabetsTerminalExpressionParserRuleCall_1() { return cAAlphabetsTerminalExpressionParserRuleCall_1; }
	}

	public class AUnaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AUnaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cANotExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cANegateExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//AUnaryExpression returns AAlphabetsExpression:
		//	ANotExpression | ANegateExpression;
		public ParserRule getRule() { return rule; }

		//ANotExpression | ANegateExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//ANotExpression
		public RuleCall getANotExpressionParserRuleCall_0() { return cANotExpressionParserRuleCall_0; }

		//ANegateExpression
		public RuleCall getANegateExpressionParserRuleCall_1() { return cANegateExpressionParserRuleCall_1; }
	}

	public class ANotExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ANotExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOpAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cOpNotKeyword_0_0 = (Keyword)cOpAssignment_0.eContents().get(0);
		private final Assignment cExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExprAAlphabetsTerminalExpressionParserRuleCall_1_0 = (RuleCall)cExprAssignment_1.eContents().get(0);
		
		//ANotExpression:
		//	op="not" expr=AAlphabetsTerminalExpression;
		public ParserRule getRule() { return rule; }

		//op="not" expr=AAlphabetsTerminalExpression
		public Group getGroup() { return cGroup; }

		//op="not"
		public Assignment getOpAssignment_0() { return cOpAssignment_0; }

		//"not"
		public Keyword getOpNotKeyword_0_0() { return cOpNotKeyword_0_0; }

		//expr=AAlphabetsTerminalExpression
		public Assignment getExprAssignment_1() { return cExprAssignment_1; }

		//AAlphabetsTerminalExpression
		public RuleCall getExprAAlphabetsTerminalExpressionParserRuleCall_1_0() { return cExprAAlphabetsTerminalExpressionParserRuleCall_1_0; }
	}

	public class ANegateExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ANegateExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOpAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOpMinusOpTerminalRuleCall_0_0 = (RuleCall)cOpAssignment_0.eContents().get(0);
		private final Assignment cExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExprAAlphabetsTerminalExpressionParserRuleCall_1_0 = (RuleCall)cExprAssignment_1.eContents().get(0);
		
		//ANegateExpression:
		//	op=MinusOp expr=AAlphabetsTerminalExpression;
		public ParserRule getRule() { return rule; }

		//op=MinusOp expr=AAlphabetsTerminalExpression
		public Group getGroup() { return cGroup; }

		//op=MinusOp
		public Assignment getOpAssignment_0() { return cOpAssignment_0; }

		//MinusOp
		public RuleCall getOpMinusOpTerminalRuleCall_0_0() { return cOpMinusOpTerminalRuleCall_0_0; }

		//expr=AAlphabetsTerminalExpression
		public Assignment getExprAssignment_1() { return cExprAssignment_1; }

		//AAlphabetsTerminalExpression
		public RuleCall getExprAAlphabetsTerminalExpressionParserRuleCall_1_0() { return cExprAAlphabetsTerminalExpressionParserRuleCall_1_0; }
	}

	public class ACaseExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ACaseExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCaseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cExprsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cExprsAAlphabetsExpressionParserRuleCall_1_0_0 = (RuleCall)cExprsAssignment_1_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cEsacKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//////// Expressions //////	
		//ACaseExpression:
		//	"case" (exprs+=AAlphabetsExpression ";")+ "esac";
		public ParserRule getRule() { return rule; }

		//"case" (exprs+=AAlphabetsExpression ";")+ "esac"
		public Group getGroup() { return cGroup; }

		//"case"
		public Keyword getCaseKeyword_0() { return cCaseKeyword_0; }

		//(exprs+=AAlphabetsExpression ";")+
		public Group getGroup_1() { return cGroup_1; }

		//exprs+=AAlphabetsExpression
		public Assignment getExprsAssignment_1_0() { return cExprsAssignment_1_0; }

		//AAlphabetsExpression
		public RuleCall getExprsAAlphabetsExpressionParserRuleCall_1_0_0() { return cExprsAAlphabetsExpressionParserRuleCall_1_0_0; }

		//";"
		public Keyword getSemicolonKeyword_1_1() { return cSemicolonKeyword_1_1; }

		//"esac"
		public Keyword getEsacKeyword_2() { return cEsacKeyword_2; }
	}

	public class ADependenceExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ADependenceExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFuncAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFuncAFunctionParserRuleCall_0_0 = (RuleCall)cFuncAssignment_0.eContents().get(0);
		private final Keyword cCommercialAtKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExprAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExprAAlphabetsTerminalExpressionParserRuleCall_2_0 = (RuleCall)cExprAssignment_2.eContents().get(0);
		
		//ADependenceExpression:
		//	func=AFunction "@" expr=AAlphabetsTerminalExpression;
		public ParserRule getRule() { return rule; }

		//func=AFunction "@" expr=AAlphabetsTerminalExpression
		public Group getGroup() { return cGroup; }

		//func=AFunction
		public Assignment getFuncAssignment_0() { return cFuncAssignment_0; }

		//AFunction
		public RuleCall getFuncAFunctionParserRuleCall_0_0() { return cFuncAFunctionParserRuleCall_0_0; }

		//"@"
		public Keyword getCommercialAtKeyword_1() { return cCommercialAtKeyword_1; }

		//expr=AAlphabetsTerminalExpression
		public Assignment getExprAssignment_2() { return cExprAssignment_2; }

		//AAlphabetsTerminalExpression
		public RuleCall getExprAAlphabetsTerminalExpressionParserRuleCall_2_0() { return cExprAAlphabetsTerminalExpressionParserRuleCall_2_0; }
	}

	public class ADependenceInArrayNotationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ADependenceInArrayNotation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVarAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVarVariableIdentifierParserRuleCall_0_0 = (RuleCall)cVarAssignment_0.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDepAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDepAIndexAffineExpressionListParserRuleCall_2_0 = (RuleCall)cDepAssignment_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//////Array notation for AShow type syntax
		//ADependenceInArrayNotation:
		//	var=VariableIdentifier "[" dep=AIndexAffineExpressionList "]";
		public ParserRule getRule() { return rule; }

		//var=VariableIdentifier "[" dep=AIndexAffineExpressionList "]"
		public Group getGroup() { return cGroup; }

		//var=VariableIdentifier
		public Assignment getVarAssignment_0() { return cVarAssignment_0; }

		//VariableIdentifier
		public RuleCall getVarVariableIdentifierParserRuleCall_0_0() { return cVarVariableIdentifierParserRuleCall_0_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }

		//dep=AIndexAffineExpressionList
		public Assignment getDepAssignment_2() { return cDepAssignment_2; }

		//AIndexAffineExpressionList
		public RuleCall getDepAIndexAffineExpressionListParserRuleCall_2_0() { return cDepAIndexAffineExpressionListParserRuleCall_2_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}

	public class AIfExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AIfExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCondAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCondAAlphabetsExpressionParserRuleCall_1_0 = (RuleCall)cCondAssignment_1.eContents().get(0);
		private final Keyword cThenKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cThenAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cThenAAlphabetsExpressionParserRuleCall_3_0 = (RuleCall)cThenAssignment_3.eContents().get(0);
		private final Keyword cElseKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cElseAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cElseAAlphabetsExpressionParserRuleCall_5_0 = (RuleCall)cElseAssignment_5.eContents().get(0);
		
		//AIfExpression:
		//	"if" cond=AAlphabetsExpression "then" then=AAlphabetsExpression "else" else=AAlphabetsExpression;
		public ParserRule getRule() { return rule; }

		//"if" cond=AAlphabetsExpression "then" then=AAlphabetsExpression "else" else=AAlphabetsExpression
		public Group getGroup() { return cGroup; }

		//"if"
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }

		//cond=AAlphabetsExpression
		public Assignment getCondAssignment_1() { return cCondAssignment_1; }

		//AAlphabetsExpression
		public RuleCall getCondAAlphabetsExpressionParserRuleCall_1_0() { return cCondAAlphabetsExpressionParserRuleCall_1_0; }

		//"then"
		public Keyword getThenKeyword_2() { return cThenKeyword_2; }

		//then=AAlphabetsExpression
		public Assignment getThenAssignment_3() { return cThenAssignment_3; }

		//AAlphabetsExpression
		public RuleCall getThenAAlphabetsExpressionParserRuleCall_3_0() { return cThenAAlphabetsExpressionParserRuleCall_3_0; }

		//"else"
		public Keyword getElseKeyword_4() { return cElseKeyword_4; }

		//else=AAlphabetsExpression
		public Assignment getElseAssignment_5() { return cElseAssignment_5; }

		//AAlphabetsExpression
		public RuleCall getElseAAlphabetsExpressionParserRuleCall_5_0() { return cElseAAlphabetsExpressionParserRuleCall_5_0; }
	}

	public class AIndexExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AIndexExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cFuncAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cFuncIndexAffineExpressionParserRuleCall_0_1_0 = (RuleCall)cFuncAssignment_0_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cValKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cIndexesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cIndexesAIndexListParserRuleCall_1_1_0 = (RuleCall)cIndexesAssignment_1_1.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cFuncAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cFuncIndexAffineExpressionParserRuleCall_1_3_0 = (RuleCall)cFuncAssignment_1_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		
		//AIndexExpression:
		//	"[" func=IndexAffineExpression "]" | "val(" indexes=AIndexList "->" func=IndexAffineExpression ")";
		public ParserRule getRule() { return rule; }

		//"[" func=IndexAffineExpression "]" | "val(" indexes=AIndexList "->" func=IndexAffineExpression ")"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"[" func=IndexAffineExpression "]"
		public Group getGroup_0() { return cGroup_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0_0() { return cLeftSquareBracketKeyword_0_0; }

		//func=IndexAffineExpression
		public Assignment getFuncAssignment_0_1() { return cFuncAssignment_0_1; }

		//IndexAffineExpression
		public RuleCall getFuncIndexAffineExpressionParserRuleCall_0_1_0() { return cFuncIndexAffineExpressionParserRuleCall_0_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_0_2() { return cRightSquareBracketKeyword_0_2; }

		//"val(" indexes=AIndexList "->" func=IndexAffineExpression ")"
		public Group getGroup_1() { return cGroup_1; }

		//"val("
		public Keyword getValKeyword_1_0() { return cValKeyword_1_0; }

		//indexes=AIndexList
		public Assignment getIndexesAssignment_1_1() { return cIndexesAssignment_1_1; }

		//AIndexList
		public RuleCall getIndexesAIndexListParserRuleCall_1_1_0() { return cIndexesAIndexListParserRuleCall_1_1_0; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_1_2() { return cHyphenMinusGreaterThanSignKeyword_1_2; }

		//func=IndexAffineExpression
		public Assignment getFuncAssignment_1_3() { return cFuncAssignment_1_3; }

		//IndexAffineExpression
		public RuleCall getFuncIndexAffineExpressionParserRuleCall_1_3_0() { return cFuncIndexAffineExpressionParserRuleCall_1_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_4() { return cRightParenthesisKeyword_1_4; }
	}

	public class AReduceExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AReduceExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReduceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOpAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOpReductionOpParserRuleCall_2_0 = (RuleCall)cOpAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cProjectionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final Alternatives cProjectionAlternatives_4_0 = (Alternatives)cProjectionAssignment_4.eContents().get(0);
		private final RuleCall cProjectionAFunctionParserRuleCall_4_0_0 = (RuleCall)cProjectionAlternatives_4_0.eContents().get(0);
		private final RuleCall cProjectionAFunctionInArrayNotationParserRuleCall_4_0_1 = (RuleCall)cProjectionAlternatives_4_0.eContents().get(1);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cExprAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cExprAAlphabetsExpressionParserRuleCall_6_0 = (RuleCall)cExprAssignment_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//AReduceExpression:
		//	"reduce" "(" op=ReductionOp "," projection=(AFunction | AFunctionInArrayNotation) "," expr=AAlphabetsExpression ")";
		public ParserRule getRule() { return rule; }

		//"reduce" "(" op=ReductionOp "," projection=(AFunction | AFunctionInArrayNotation) "," expr=AAlphabetsExpression ")"
		public Group getGroup() { return cGroup; }

		//"reduce"
		public Keyword getReduceKeyword_0() { return cReduceKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//op=ReductionOp
		public Assignment getOpAssignment_2() { return cOpAssignment_2; }

		//ReductionOp
		public RuleCall getOpReductionOpParserRuleCall_2_0() { return cOpReductionOpParserRuleCall_2_0; }

		//","
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }

		//projection=(AFunction | AFunctionInArrayNotation)
		public Assignment getProjectionAssignment_4() { return cProjectionAssignment_4; }

		//AFunction | AFunctionInArrayNotation
		public Alternatives getProjectionAlternatives_4_0() { return cProjectionAlternatives_4_0; }

		//AFunction
		public RuleCall getProjectionAFunctionParserRuleCall_4_0_0() { return cProjectionAFunctionParserRuleCall_4_0_0; }

		//AFunctionInArrayNotation
		public RuleCall getProjectionAFunctionInArrayNotationParserRuleCall_4_0_1() { return cProjectionAFunctionInArrayNotationParserRuleCall_4_0_1; }

		//","
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }

		//expr=AAlphabetsExpression
		public Assignment getExprAssignment_6() { return cExprAssignment_6; }

		//AAlphabetsExpression
		public RuleCall getExprAAlphabetsExpressionParserRuleCall_6_0() { return cExprAAlphabetsExpressionParserRuleCall_6_0; }

		//")"
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
	}

	public class ARestrictExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ARestrictExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDomainAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDomainADomainParserRuleCall_0_0 = (RuleCall)cDomainAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExprAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExprAAlphabetsExpressionParserRuleCall_2_0 = (RuleCall)cExprAssignment_2.eContents().get(0);
		
		//ARestrictExpression:
		//	domain=ADomain ":" expr=AAlphabetsExpression;
		public ParserRule getRule() { return rule; }

		//domain=ADomain ":" expr=AAlphabetsExpression
		public Group getGroup() { return cGroup; }

		//domain=ADomain
		public Assignment getDomainAssignment_0() { return cDomainAssignment_0; }

		//ADomain
		public RuleCall getDomainADomainParserRuleCall_0_0() { return cDomainADomainParserRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//expr=AAlphabetsExpression
		public Assignment getExprAssignment_2() { return cExprAssignment_2; }

		//AAlphabetsExpression
		public RuleCall getExprAAlphabetsExpressionParserRuleCall_2_0() { return cExprAAlphabetsExpressionParserRuleCall_2_0; }
	}

	public class AVariableExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AVariableExpression");
		private final Assignment cVarAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cVarVariableIdentifierParserRuleCall_0 = (RuleCall)cVarAssignment.eContents().get(0);
		
		//AVariableExpression:
		//	var=VariableIdentifier;
		public ParserRule getRule() { return rule; }

		//var=VariableIdentifier
		public Assignment getVarAssignment() { return cVarAssignment; }

		//VariableIdentifier
		public RuleCall getVarVariableIdentifierParserRuleCall_0() { return cVarVariableIdentifierParserRuleCall_0; }
	}

	public class AConstantExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AConstantExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cABooleanExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cARealExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAIntegerExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//AConstantExpression:
		//	ABooleanExpression | ARealExpression | AIntegerExpression;
		public ParserRule getRule() { return rule; }

		//ABooleanExpression | ARealExpression | AIntegerExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//ABooleanExpression
		public RuleCall getABooleanExpressionParserRuleCall_0() { return cABooleanExpressionParserRuleCall_0; }

		//ARealExpression
		public RuleCall getARealExpressionParserRuleCall_1() { return cARealExpressionParserRuleCall_1; }

		//AIntegerExpression
		public RuleCall getAIntegerExpressionParserRuleCall_2() { return cAIntegerExpressionParserRuleCall_2; }
	}

	public class ABooleanExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ABooleanExpression");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueBOOLEANTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//ABooleanExpression:
		//	value=BOOLEAN;
		public ParserRule getRule() { return rule; }

		//value=BOOLEAN
		public Assignment getValueAssignment() { return cValueAssignment; }

		//BOOLEAN
		public RuleCall getValueBOOLEANTerminalRuleCall_0() { return cValueBOOLEANTerminalRuleCall_0; }
	}

	public class AIntegerExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AIntegerExpression");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//AIntegerExpression:
		//	value=INT;
		public ParserRule getRule() { return rule; }

		//value=INT
		public Assignment getValueAssignment() { return cValueAssignment; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_0() { return cValueINTTerminalRuleCall_0; }
	}

	public class ARealExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ARealExpression");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueREALTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//ARealExpression:
		//	value=REAL;
		public ParserRule getRule() { return rule; }

		//value=REAL
		public Assignment getValueAssignment() { return cValueAssignment; }

		//REAL
		public RuleCall getValueREALTerminalRuleCall_0() { return cValueREALTerminalRuleCall_0; }
	}

	public class AMultiArgExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AMultiArgExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAMultiArgArithmeticExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAMultiArgLogicalExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAExternalFunctionCallParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//AMultiArgExpression:
		//	AMultiArgArithmeticExpression | AMultiArgLogicalExpression | AExternalFunctionCall;
		public ParserRule getRule() { return rule; }

		//AMultiArgArithmeticExpression | AMultiArgLogicalExpression | AExternalFunctionCall
		public Alternatives getAlternatives() { return cAlternatives; }

		//AMultiArgArithmeticExpression
		public RuleCall getAMultiArgArithmeticExpressionParserRuleCall_0() { return cAMultiArgArithmeticExpressionParserRuleCall_0; }

		//AMultiArgLogicalExpression
		public RuleCall getAMultiArgLogicalExpressionParserRuleCall_1() { return cAMultiArgLogicalExpressionParserRuleCall_1; }

		//AExternalFunctionCall
		public RuleCall getAExternalFunctionCallParserRuleCall_2() { return cAExternalFunctionCallParserRuleCall_2; }
	}

	public class AMultiArgArithmeticExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AMultiArgArithmeticExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOpAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOpArithmeticOpParserRuleCall_0_0 = (RuleCall)cOpAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExprsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExprsAAlphabetsExpressionParserRuleCall_2_0 = (RuleCall)cExprsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cExprsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cExprsAAlphabetsExpressionParserRuleCall_3_1_0 = (RuleCall)cExprsAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//AMultiArgArithmeticExpression:
		//	op=ArithmeticOp "(" exprs+=AAlphabetsExpression ("," exprs+=AAlphabetsExpression)+ ")";
		public ParserRule getRule() { return rule; }

		//op=ArithmeticOp "(" exprs+=AAlphabetsExpression ("," exprs+=AAlphabetsExpression)+ ")"
		public Group getGroup() { return cGroup; }

		//op=ArithmeticOp
		public Assignment getOpAssignment_0() { return cOpAssignment_0; }

		//ArithmeticOp
		public RuleCall getOpArithmeticOpParserRuleCall_0_0() { return cOpArithmeticOpParserRuleCall_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//exprs+=AAlphabetsExpression
		public Assignment getExprsAssignment_2() { return cExprsAssignment_2; }

		//AAlphabetsExpression
		public RuleCall getExprsAAlphabetsExpressionParserRuleCall_2_0() { return cExprsAAlphabetsExpressionParserRuleCall_2_0; }

		//("," exprs+=AAlphabetsExpression)+
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//exprs+=AAlphabetsExpression
		public Assignment getExprsAssignment_3_1() { return cExprsAssignment_3_1; }

		//AAlphabetsExpression
		public RuleCall getExprsAAlphabetsExpressionParserRuleCall_3_1_0() { return cExprsAAlphabetsExpressionParserRuleCall_3_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class AMultiArgLogicalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AMultiArgLogicalExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOpAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOpLogicalOpParserRuleCall_0_0 = (RuleCall)cOpAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExprsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExprsAAlphabetsExpressionParserRuleCall_2_0 = (RuleCall)cExprsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cExprsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cExprsAAlphabetsExpressionParserRuleCall_3_1_0 = (RuleCall)cExprsAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//AMultiArgLogicalExpression:
		//	op=LogicalOp "(" exprs+=AAlphabetsExpression ("," exprs+=AAlphabetsExpression)+ ")";
		public ParserRule getRule() { return rule; }

		//op=LogicalOp "(" exprs+=AAlphabetsExpression ("," exprs+=AAlphabetsExpression)+ ")"
		public Group getGroup() { return cGroup; }

		//op=LogicalOp
		public Assignment getOpAssignment_0() { return cOpAssignment_0; }

		//LogicalOp
		public RuleCall getOpLogicalOpParserRuleCall_0_0() { return cOpLogicalOpParserRuleCall_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//exprs+=AAlphabetsExpression
		public Assignment getExprsAssignment_2() { return cExprsAssignment_2; }

		//AAlphabetsExpression
		public RuleCall getExprsAAlphabetsExpressionParserRuleCall_2_0() { return cExprsAAlphabetsExpressionParserRuleCall_2_0; }

		//("," exprs+=AAlphabetsExpression)+
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//exprs+=AAlphabetsExpression
		public Assignment getExprsAssignment_3_1() { return cExprsAssignment_3_1; }

		//AAlphabetsExpression
		public RuleCall getExprsAAlphabetsExpressionParserRuleCall_3_1_0() { return cExprsAAlphabetsExpressionParserRuleCall_3_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class AExternalFunctionCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AExternalFunctionCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFuncAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFuncIDTerminalRuleCall_0_0 = (RuleCall)cFuncAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cExprsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cExprsAAlphabetsExpressionParserRuleCall_2_0_0 = (RuleCall)cExprsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cExprsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cExprsAAlphabetsExpressionParserRuleCall_2_1_1_0 = (RuleCall)cExprsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//AExternalFunctionCall:
		//	func=ID "(" (exprs+=AAlphabetsExpression ("," exprs+=AAlphabetsExpression)*)? ")";
		public ParserRule getRule() { return rule; }

		//func=ID "(" (exprs+=AAlphabetsExpression ("," exprs+=AAlphabetsExpression)*)? ")"
		public Group getGroup() { return cGroup; }

		//func=ID
		public Assignment getFuncAssignment_0() { return cFuncAssignment_0; }

		//ID
		public RuleCall getFuncIDTerminalRuleCall_0_0() { return cFuncIDTerminalRuleCall_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//(exprs+=AAlphabetsExpression ("," exprs+=AAlphabetsExpression)*)?
		public Group getGroup_2() { return cGroup_2; }

		//exprs+=AAlphabetsExpression
		public Assignment getExprsAssignment_2_0() { return cExprsAssignment_2_0; }

		//AAlphabetsExpression
		public RuleCall getExprsAAlphabetsExpressionParserRuleCall_2_0_0() { return cExprsAAlphabetsExpressionParserRuleCall_2_0_0; }

		//("," exprs+=AAlphabetsExpression)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }

		//exprs+=AAlphabetsExpression
		public Assignment getExprsAssignment_2_1_1() { return cExprsAssignment_2_1_1; }

		//AAlphabetsExpression
		public RuleCall getExprsAAlphabetsExpressionParserRuleCall_2_1_1_0() { return cExprsAAlphabetsExpressionParserRuleCall_2_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class IndexIdentifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IndexIdentifier");
		private final RuleCall cIDTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		////////////////////////////////////////////////////////////
		////////// Dependance functions and IndexExpressions ///////
		////////////////////////////////////////////////////////////
		//IndexIdentifier:
		//	ID;
		public ParserRule getRule() { return rule; }

		//ID
		public RuleCall getIDTerminalRuleCall() { return cIDTerminalRuleCall; }
	}

	public class AIndexListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AIndexList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAIndexListAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cIdsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cIdsIndexIdentifierParserRuleCall_1_0_0 = (RuleCall)cIdsAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cIdsAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cIdsIndexIdentifierParserRuleCall_1_1_1_0 = (RuleCall)cIdsAssignment_1_1_1.eContents().get(0);
		
		//AIndexList:
		//	{AIndexList} (ids+=IndexIdentifier ("," ids+=IndexIdentifier)*)?;
		public ParserRule getRule() { return rule; }

		//{AIndexList} (ids+=IndexIdentifier ("," ids+=IndexIdentifier)*)?
		public Group getGroup() { return cGroup; }

		//{AIndexList}
		public Action getAIndexListAction_0() { return cAIndexListAction_0; }

		//(ids+=IndexIdentifier ("," ids+=IndexIdentifier)*)?
		public Group getGroup_1() { return cGroup_1; }

		//ids+=IndexIdentifier
		public Assignment getIdsAssignment_1_0() { return cIdsAssignment_1_0; }

		//IndexIdentifier
		public RuleCall getIdsIndexIdentifierParserRuleCall_1_0_0() { return cIdsIndexIdentifierParserRuleCall_1_0_0; }

		//("," ids+=IndexIdentifier)*
		public Group getGroup_1_1() { return cGroup_1_1; }

		//","
		public Keyword getCommaKeyword_1_1_0() { return cCommaKeyword_1_1_0; }

		//ids+=IndexIdentifier
		public Assignment getIdsAssignment_1_1_1() { return cIdsAssignment_1_1_1; }

		//IndexIdentifier
		public RuleCall getIdsIndexIdentifierParserRuleCall_1_1_1_0() { return cIdsIndexIdentifierParserRuleCall_1_1_1_0; }
	}

	public class IndexAffineExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IndexAffineExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMinusOpTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cIndexAffineExpressionTerminalParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_2_0 = (Alternatives)cGroup_2.eContents().get(0);
		private final RuleCall cPlusOpTerminalRuleCall_2_0_0 = (RuleCall)cAlternatives_2_0.eContents().get(0);
		private final RuleCall cMinusOpTerminalRuleCall_2_0_1 = (RuleCall)cAlternatives_2_0.eContents().get(1);
		private final RuleCall cIndexAffineExpressionParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		
		////IndexAffineExpression:	
		////	MinusOp? (INTEGER | INTEGER? IndexIdentifier) ((PlusOp|MinusOp) IndexAffineExpressionTerminal)*;
		//IndexAffineExpression:
		//	MinusOp? IndexAffineExpressionTerminal ((PlusOp | MinusOp) IndexAffineExpression)*;
		public ParserRule getRule() { return rule; }

		//MinusOp? IndexAffineExpressionTerminal ((PlusOp | MinusOp) IndexAffineExpression)*
		public Group getGroup() { return cGroup; }

		//MinusOp?
		public RuleCall getMinusOpTerminalRuleCall_0() { return cMinusOpTerminalRuleCall_0; }

		//IndexAffineExpressionTerminal
		public RuleCall getIndexAffineExpressionTerminalParserRuleCall_1() { return cIndexAffineExpressionTerminalParserRuleCall_1; }

		//((PlusOp | MinusOp) IndexAffineExpression)*
		public Group getGroup_2() { return cGroup_2; }

		//PlusOp | MinusOp
		public Alternatives getAlternatives_2_0() { return cAlternatives_2_0; }

		//PlusOp
		public RuleCall getPlusOpTerminalRuleCall_2_0_0() { return cPlusOpTerminalRuleCall_2_0_0; }

		//MinusOp
		public RuleCall getMinusOpTerminalRuleCall_2_0_1() { return cMinusOpTerminalRuleCall_2_0_1; }

		//IndexAffineExpression
		public RuleCall getIndexAffineExpressionParserRuleCall_2_1() { return cIndexAffineExpressionParserRuleCall_2_1; }
	}

	public class IndexAffineExpressionTerminalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IndexAffineExpressionTerminal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final RuleCall cIndexIdentifierParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//IndexAffineExpressionTerminal:
		//	INT | INT? IndexIdentifier;
		public ParserRule getRule() { return rule; }

		//INT | INT? IndexIdentifier
		public Alternatives getAlternatives() { return cAlternatives; }

		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }

		//INT? IndexIdentifier
		public Group getGroup_1() { return cGroup_1; }

		//INT?
		public RuleCall getINTTerminalRuleCall_1_0() { return cINTTerminalRuleCall_1_0; }

		//IndexIdentifier
		public RuleCall getIndexIdentifierParserRuleCall_1_1() { return cIndexIdentifierParserRuleCall_1_1; }
	}

	public class AIndexAffineExpressionListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AIndexAffineExpressionList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAIndexAffineExpressionListAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cExprsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cExprsIndexAffineExpressionParserRuleCall_1_0_0 = (RuleCall)cExprsAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cExprsAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cExprsIndexAffineExpressionParserRuleCall_1_1_1_0 = (RuleCall)cExprsAssignment_1_1_1.eContents().get(0);
		
		//AIndexAffineExpressionList:
		//	{AIndexAffineExpressionList} (exprs+=IndexAffineExpression ("," exprs+=IndexAffineExpression)*)?;
		public ParserRule getRule() { return rule; }

		//{AIndexAffineExpressionList} (exprs+=IndexAffineExpression ("," exprs+=IndexAffineExpression)*)?
		public Group getGroup() { return cGroup; }

		//{AIndexAffineExpressionList}
		public Action getAIndexAffineExpressionListAction_0() { return cAIndexAffineExpressionListAction_0; }

		//(exprs+=IndexAffineExpression ("," exprs+=IndexAffineExpression)*)?
		public Group getGroup_1() { return cGroup_1; }

		//exprs+=IndexAffineExpression
		public Assignment getExprsAssignment_1_0() { return cExprsAssignment_1_0; }

		//IndexAffineExpression
		public RuleCall getExprsIndexAffineExpressionParserRuleCall_1_0_0() { return cExprsIndexAffineExpressionParserRuleCall_1_0_0; }

		//("," exprs+=IndexAffineExpression)*
		public Group getGroup_1_1() { return cGroup_1_1; }

		//","
		public Keyword getCommaKeyword_1_1_0() { return cCommaKeyword_1_1_0; }

		//exprs+=IndexAffineExpression
		public Assignment getExprsAssignment_1_1_1() { return cExprsAssignment_1_1_1; }

		//IndexAffineExpression
		public RuleCall getExprsIndexAffineExpressionParserRuleCall_1_1_1_0() { return cExprsIndexAffineExpressionParserRuleCall_1_1_1_0; }
	}

	public class AFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AFunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIndexesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIndexesAIndexListParserRuleCall_1_0 = (RuleCall)cIndexesAssignment_1.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFuncAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFuncAIndexAffineExpressionListParserRuleCall_3_0 = (RuleCall)cFuncAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//AFunction:
		//	"(" indexes=AIndexList "->" func=AIndexAffineExpressionList ")";
		public ParserRule getRule() { return rule; }

		//"(" indexes=AIndexList "->" func=AIndexAffineExpressionList ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//indexes=AIndexList
		public Assignment getIndexesAssignment_1() { return cIndexesAssignment_1; }

		//AIndexList
		public RuleCall getIndexesAIndexListParserRuleCall_1_0() { return cIndexesAIndexListParserRuleCall_1_0; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_2() { return cHyphenMinusGreaterThanSignKeyword_2; }

		//func=AIndexAffineExpressionList
		public Assignment getFuncAssignment_3() { return cFuncAssignment_3; }

		//AIndexAffineExpressionList
		public RuleCall getFuncAIndexAffineExpressionListParserRuleCall_3_0() { return cFuncAIndexAffineExpressionListParserRuleCall_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class AFunctionInArrayNotationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AFunctionInArrayNotation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNewIdsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNewIdsAIndexAffineExpressionListParserRuleCall_1_0 = (RuleCall)cNewIdsAssignment_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		////	('(' indexes=AIndexList '->' func=AIndexAffineExpressionList ')') | ('(' indexes=AIndexList '->' ')');
		//////Array notation for AShow type syntax
		//AFunctionInArrayNotation:
		//	"[" newIds=AIndexAffineExpressionList "]";
		public ParserRule getRule() { return rule; }

		//"[" newIds=AIndexAffineExpressionList "]"
		public Group getGroup() { return cGroup; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }

		//newIds=AIndexAffineExpressionList
		public Assignment getNewIdsAssignment_1() { return cNewIdsAssignment_1; }

		//AIndexAffineExpressionList
		public RuleCall getNewIdsAIndexAffineExpressionListParserRuleCall_1_0() { return cNewIdsAIndexAffineExpressionListParserRuleCall_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }
	}

	public class ATypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cUnsignedAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cUnsignedUnsignedKeyword_0_0 = (Keyword)cUnsignedAssignment_0.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cTypeAlternatives_1_0 = (Alternatives)cTypeAssignment_1.eContents().get(0);
		private final RuleCall cTypeATypeIntegerParserRuleCall_1_0_0 = (RuleCall)cTypeAlternatives_1_0.eContents().get(0);
		private final RuleCall cTypeATypeFloatParserRuleCall_1_0_1 = (RuleCall)cTypeAlternatives_1_0.eContents().get(1);
		private final RuleCall cTypeATypeBooleanParserRuleCall_1_0_2 = (RuleCall)cTypeAlternatives_1_0.eContents().get(2);
		private final RuleCall cTypeATypeCharParserRuleCall_1_0_3 = (RuleCall)cTypeAlternatives_1_0.eContents().get(3);
		
		////////ORIGINAL ONES//////
		//////IndexDefinitionContainer : Function | ConstraintsDomain;
		////
		//////IndexDefinitionList:
		//////		( indices+=IndexDefinition  (',' indices+=IndexDefinition)* ); 
		//////
		//////Function:
		//////	(name=ID)? '('
		//////		indexList=IndexDefinitionList 
		//////		'->' 
		//////		(indexExpList=IndexExpressionList)? ')';
		//////
		//////IndexExpressionList : 
		//////	exprIndexes+=IndexAdditiveExpression  (',' exprIndexes+=IndexAdditiveExpression)*;
		////	//SimpleIndexExpressionList | ParenthesisIndexExpressionList;		
		////		
		//////SimpleIndexExpressionList:
		//////	exprIndexes+=IndexAdditiveExpression  (',' exprIndexes+=IndexAdditiveExpression)*; 
		////		
		//////ParenthesisIndexExpressionList:
		//////	'(' indexExpList=SimpleIndexExpressionList ')';
		////
		//////IndexAdditiveExpression returns IndexExpression:
		//////	terms+=IndexExpressionTerminal (ops+=("+" | "-") terms+=IndexExpressionTerminal)*;
		//////
		//////IndexExpressionTerminal: IndexReference | IndexValueTerminal | IndexParenthesisExpression;
		//////
		//////IndexReference:
		//////	{NegCoefIndexTerminal} ('-'	coef=INT index=[IndexDefinition] ) |
		//////	{NegIndexTerminal} ('-' index=[IndexDefinition] ) |
		//////	{CoefIndexTerminal} (coef=INT index=[IndexDefinition] ) |
		//////	{IndexTerminal} (index=[IndexDefinition] ) ;
		//////
		//////IndexValueTerminal:
		//////	{NegConstantTerminal} (('-' num=INT)  )|
		//////	{ConstantTerminal} ((num=INT ) );
		//////
		//////IndexDefinition:
		//////	name=ID;	
		//////
		//////IndexParenthesisExpression:
		//////	'(' exp=IndexAdditiveExpression ')' ('/' denum=INT)?;
		//////	
		//////IndexExpressionDefinition:
		//////	name=ID;	
		/////// Tokens /////
		//AType:
		//	unsigned="unsigned"? type=(ATypeInteger | ATypeFloat | ATypeBoolean | ATypeChar);
		public ParserRule getRule() { return rule; }

		//unsigned="unsigned"? type=(ATypeInteger | ATypeFloat | ATypeBoolean | ATypeChar)
		public Group getGroup() { return cGroup; }

		//unsigned="unsigned"?
		public Assignment getUnsignedAssignment_0() { return cUnsignedAssignment_0; }

		//"unsigned"
		public Keyword getUnsignedUnsignedKeyword_0_0() { return cUnsignedUnsignedKeyword_0_0; }

		//type=(ATypeInteger | ATypeFloat | ATypeBoolean | ATypeChar)
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//ATypeInteger | ATypeFloat | ATypeBoolean | ATypeChar
		public Alternatives getTypeAlternatives_1_0() { return cTypeAlternatives_1_0; }

		//ATypeInteger
		public RuleCall getTypeATypeIntegerParserRuleCall_1_0_0() { return cTypeATypeIntegerParserRuleCall_1_0_0; }

		//ATypeFloat
		public RuleCall getTypeATypeFloatParserRuleCall_1_0_1() { return cTypeATypeFloatParserRuleCall_1_0_1; }

		//ATypeBoolean
		public RuleCall getTypeATypeBooleanParserRuleCall_1_0_2() { return cTypeATypeBooleanParserRuleCall_1_0_2; }

		//ATypeChar
		public RuleCall getTypeATypeCharParserRuleCall_1_0_3() { return cTypeATypeCharParserRuleCall_1_0_3; }
	}

	public class ATypeIntegerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ATypeInteger");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cIntKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cLonglongKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cLongKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cShortKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//ATypeInteger:
		//	"int" | "longlong" | "long" | "short";
		public ParserRule getRule() { return rule; }

		//"int" | "longlong" | "long" | "short"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"int"
		public Keyword getIntKeyword_0() { return cIntKeyword_0; }

		//"longlong"
		public Keyword getLonglongKeyword_1() { return cLonglongKeyword_1; }

		//"long"
		public Keyword getLongKeyword_2() { return cLongKeyword_2; }

		//"short"
		public Keyword getShortKeyword_3() { return cShortKeyword_3; }
	}

	public class ATypeBooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ATypeBoolean");
		private final Keyword cBoolKeyword = (Keyword)rule.eContents().get(1);
		
		//ATypeBoolean:
		//	"bool";
		public ParserRule getRule() { return rule; }

		//"bool"
		public Keyword getBoolKeyword() { return cBoolKeyword; }
	}

	public class ATypeFloatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ATypeFloat");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cFloatKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cDoubleKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//ATypeFloat:
		//	"float" | "double";
		public ParserRule getRule() { return rule; }

		//"float" | "double"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"float"
		public Keyword getFloatKeyword_0() { return cFloatKeyword_0; }

		//"double"
		public Keyword getDoubleKeyword_1() { return cDoubleKeyword_1; }
	}

	public class ATypeCharElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ATypeChar");
		private final Keyword cCharKeyword = (Keyword)rule.eContents().get(1);
		
		//ATypeChar:
		//	"char";
		public ParserRule getRule() { return rule; }

		//"char"
		public Keyword getCharKeyword() { return cCharKeyword; }
	}

	public class ReductionOpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ReductionOp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAndOpTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMaxOpTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cMinOpTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cMulOpTerminalRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cOrOpTerminalRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cPlusOpTerminalRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cXorOpTerminalRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//ReductionOp:
		//	AndOp | MaxOp | MinOp | MulOp | OrOp | PlusOp | XorOp;
		public ParserRule getRule() { return rule; }

		//AndOp | MaxOp | MinOp | MulOp | OrOp | PlusOp | XorOp
		public Alternatives getAlternatives() { return cAlternatives; }

		//AndOp
		public RuleCall getAndOpTerminalRuleCall_0() { return cAndOpTerminalRuleCall_0; }

		//MaxOp
		public RuleCall getMaxOpTerminalRuleCall_1() { return cMaxOpTerminalRuleCall_1; }

		//MinOp
		public RuleCall getMinOpTerminalRuleCall_2() { return cMinOpTerminalRuleCall_2; }

		//MulOp
		public RuleCall getMulOpTerminalRuleCall_3() { return cMulOpTerminalRuleCall_3; }

		//OrOp
		public RuleCall getOrOpTerminalRuleCall_4() { return cOrOpTerminalRuleCall_4; }

		//PlusOp
		public RuleCall getPlusOpTerminalRuleCall_5() { return cPlusOpTerminalRuleCall_5; }

		//XorOp
		public RuleCall getXorOpTerminalRuleCall_6() { return cXorOpTerminalRuleCall_6; }
	}

	public class ArithmeticOpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ArithmeticOp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMaxOpTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMinOpTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cMulOpTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cPlusOpTerminalRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//ArithmeticOp:
		//	MaxOp | MinOp | MulOp | PlusOp;
		public ParserRule getRule() { return rule; }

		//MaxOp | MinOp | MulOp | PlusOp
		public Alternatives getAlternatives() { return cAlternatives; }

		//MaxOp
		public RuleCall getMaxOpTerminalRuleCall_0() { return cMaxOpTerminalRuleCall_0; }

		//MinOp
		public RuleCall getMinOpTerminalRuleCall_1() { return cMinOpTerminalRuleCall_1; }

		//MulOp
		public RuleCall getMulOpTerminalRuleCall_2() { return cMulOpTerminalRuleCall_2; }

		//PlusOp
		public RuleCall getPlusOpTerminalRuleCall_3() { return cPlusOpTerminalRuleCall_3; }
	}

	public class LogicalOpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LogicalOp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAndOpTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOrOpTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cXorOpTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//LogicalOp:
		//	AndOp | OrOp | XorOp;
		public ParserRule getRule() { return rule; }

		//AndOp | OrOp | XorOp
		public Alternatives getAlternatives() { return cAlternatives; }

		//AndOp
		public RuleCall getAndOpTerminalRuleCall_0() { return cAndOpTerminalRuleCall_0; }

		//OrOp
		public RuleCall getOrOpTerminalRuleCall_1() { return cOrOpTerminalRuleCall_1; }

		//XorOp
		public RuleCall getXorOpTerminalRuleCall_2() { return cXorOpTerminalRuleCall_2; }
	}

	public class RelationalOpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RelationalOp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEQOpTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cGEOpTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cGTOpTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cLEOpTerminalRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cLTOpTerminalRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cNEOpTerminalRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//RelationalOp:
		//	EQOp | GEOp | GTOp | LEOp | LTOp | NEOp;
		public ParserRule getRule() { return rule; }

		//EQOp | GEOp | GTOp | LEOp | LTOp | NEOp
		public Alternatives getAlternatives() { return cAlternatives; }

		//EQOp
		public RuleCall getEQOpTerminalRuleCall_0() { return cEQOpTerminalRuleCall_0; }

		//GEOp
		public RuleCall getGEOpTerminalRuleCall_1() { return cGEOpTerminalRuleCall_1; }

		//GTOp
		public RuleCall getGTOpTerminalRuleCall_2() { return cGTOpTerminalRuleCall_2; }

		//LEOp
		public RuleCall getLEOpTerminalRuleCall_3() { return cLEOpTerminalRuleCall_3; }

		//LTOp
		public RuleCall getLTOpTerminalRuleCall_4() { return cLTOpTerminalRuleCall_4; }

		//NEOp
		public RuleCall getNEOpTerminalRuleCall_5() { return cNEOpTerminalRuleCall_5; }
	}

	public class SystemIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SystemID");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1_0_0 = (RuleCall)cAlternatives_1_0.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_0_1 = (RuleCall)cAlternatives_1_0.eContents().get(1);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Alternatives cAlternatives_1_1_0 = (Alternatives)cGroup_1_1.eContents().get(0);
		private final RuleCall cMinusOpTerminalRuleCall_1_1_0_0 = (RuleCall)cAlternatives_1_1_0.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1_1_0_1 = (RuleCall)cAlternatives_1_1_0.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_1_1_0_2 = (RuleCall)cAlternatives_1_1_0.eContents().get(2);
		private final RuleCall cIDTerminalRuleCall_1_1_1 = (RuleCall)cGroup_1_1.eContents().get(1);
		
		//SystemID:
		//	ID | (INT | ID) ((MinusOp | INT | ID)* ID);
		public ParserRule getRule() { return rule; }

		//ID | (INT | ID) ((MinusOp | INT | ID)* ID)
		public Alternatives getAlternatives() { return cAlternatives; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//(INT | ID) ((MinusOp | INT | ID)* ID)
		public Group getGroup_1() { return cGroup_1; }

		//INT | ID
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_1_0_0() { return cINTTerminalRuleCall_1_0_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_0_1() { return cIDTerminalRuleCall_1_0_1; }

		//(MinusOp | INT | ID)* ID
		public Group getGroup_1_1() { return cGroup_1_1; }

		//(MinusOp | INT | ID)*
		public Alternatives getAlternatives_1_1_0() { return cAlternatives_1_1_0; }

		//MinusOp
		public RuleCall getMinusOpTerminalRuleCall_1_1_0_0() { return cMinusOpTerminalRuleCall_1_1_0_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_1_1_0_1() { return cINTTerminalRuleCall_1_1_0_1; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1_0_2() { return cIDTerminalRuleCall_1_1_0_2; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1_1() { return cIDTerminalRuleCall_1_1_1; }
	}
	
	
	private final AProgramElements pAProgram;
	private final AExternalFunctionDeclarationElements pAExternalFunctionDeclaration;
	private final AExternalFunctionIdentifierElements pAExternalFunctionIdentifier;
	private final AAffineSystemElements pAAffineSystem;
	private final AAffineSystemAElements pAAffineSystemA;
	private final AAffineSystemBElements pAAffineSystemB;
	private final AVariableDeclarationElements pAVariableDeclaration;
	private final AOutputDeclarationElements pAOutputDeclaration;
	private final AInputDeclarationElements pAInputDeclaration;
	private final ALocalDeclarationElements pALocalDeclaration;
	private final AWhileDeclarationElements pAWhileDeclaration;
	private final AIdentifierListElements pAIdentifierList;
	private final VariableIdentifierElements pVariableIdentifier;
	private final ADomainElements pADomain;
	private final APolyhedronElements pAPolyhedron;
	private final InEqualityElements pInEquality;
	private final IDListElements pIDList;
	private final IDExpressionElements pIDExpression;
	private final InEqIDElements pInEqID;
	private final AEquationElements pAEquation;
	private final AStandardEquationElements pAStandardEquation;
	private final AUseEquationElements pAUseEquation;
	private final AAlphabetsExpressionElements pAAlphabetsExpression;
	private final AAlphabetsTerminalExpressionElements pAAlphabetsTerminalExpression;
	private final AParanthesizedAlphabetsExpressionElements pAParanthesizedAlphabetsExpression;
	private final AOrExpressionElements pAOrExpression;
	private final AAndExpressionElements pAAndExpression;
	private final ARelationalExpressionElements pARelationalExpression;
	private final AAdditiveExpressionElements pAAdditiveExpression;
	private final AModuloExpressionElements pAModuloExpression;
	private final AMultiplicativeExpressionElements pAMultiplicativeExpression;
	private final AMinMaxExpressionElements pAMinMaxExpression;
	private final AUnaryOrTerminalExpressionElements pAUnaryOrTerminalExpression;
	private final AUnaryExpressionElements pAUnaryExpression;
	private final ANotExpressionElements pANotExpression;
	private final ANegateExpressionElements pANegateExpression;
	private final ACaseExpressionElements pACaseExpression;
	private final ADependenceExpressionElements pADependenceExpression;
	private final ADependenceInArrayNotationElements pADependenceInArrayNotation;
	private final AIfExpressionElements pAIfExpression;
	private final AIndexExpressionElements pAIndexExpression;
	private final AReduceExpressionElements pAReduceExpression;
	private final ARestrictExpressionElements pARestrictExpression;
	private final AVariableExpressionElements pAVariableExpression;
	private final AConstantExpressionElements pAConstantExpression;
	private final ABooleanExpressionElements pABooleanExpression;
	private final AIntegerExpressionElements pAIntegerExpression;
	private final ARealExpressionElements pARealExpression;
	private final AMultiArgExpressionElements pAMultiArgExpression;
	private final AMultiArgArithmeticExpressionElements pAMultiArgArithmeticExpression;
	private final AMultiArgLogicalExpressionElements pAMultiArgLogicalExpression;
	private final AExternalFunctionCallElements pAExternalFunctionCall;
	private final IndexIdentifierElements pIndexIdentifier;
	private final AIndexListElements pAIndexList;
	private final IndexAffineExpressionElements pIndexAffineExpression;
	private final IndexAffineExpressionTerminalElements pIndexAffineExpressionTerminal;
	private final AIndexAffineExpressionListElements pAIndexAffineExpressionList;
	private final AFunctionElements pAFunction;
	private final AFunctionInArrayNotationElements pAFunctionInArrayNotation;
	private final ATypeElements pAType;
	private final ATypeIntegerElements pATypeInteger;
	private final ATypeBooleanElements pATypeBoolean;
	private final ATypeFloatElements pATypeFloat;
	private final ATypeCharElements pATypeChar;
	private final ReductionOpElements pReductionOp;
	private final ArithmeticOpElements pArithmeticOp;
	private final LogicalOpElements pLogicalOp;
	private final RelationalOpElements pRelationalOp;
	private final TerminalRule tAndOp;
	private final TerminalRule tMaxOp;
	private final TerminalRule tMinOp;
	private final TerminalRule tMulOp;
	private final TerminalRule tOrOp;
	private final TerminalRule tPlusOp;
	private final TerminalRule tXorOp;
	private final TerminalRule tMinusOp;
	private final TerminalRule tDivOp;
	private final TerminalRule tModOp;
	private final TerminalRule tNandOp;
	private final TerminalRule tEQOp;
	private final TerminalRule tGEOp;
	private final TerminalRule tGTOp;
	private final TerminalRule tLEOp;
	private final TerminalRule tLTOp;
	private final TerminalRule tNEOp;
	private final TerminalRule tBOOLEAN;
	private final TerminalRule tREAL;
	private final TerminalRule tINTERSECTION;
	private final TerminalRule tUNION;
	private final TerminalRule tSL_COMMENT;
	private final SystemIDElements pSystemID;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public AlphabetsGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pAProgram = new AProgramElements();
		this.pAExternalFunctionDeclaration = new AExternalFunctionDeclarationElements();
		this.pAExternalFunctionIdentifier = new AExternalFunctionIdentifierElements();
		this.pAAffineSystem = new AAffineSystemElements();
		this.pAAffineSystemA = new AAffineSystemAElements();
		this.pAAffineSystemB = new AAffineSystemBElements();
		this.pAVariableDeclaration = new AVariableDeclarationElements();
		this.pAOutputDeclaration = new AOutputDeclarationElements();
		this.pAInputDeclaration = new AInputDeclarationElements();
		this.pALocalDeclaration = new ALocalDeclarationElements();
		this.pAWhileDeclaration = new AWhileDeclarationElements();
		this.pAIdentifierList = new AIdentifierListElements();
		this.pVariableIdentifier = new VariableIdentifierElements();
		this.pADomain = new ADomainElements();
		this.pAPolyhedron = new APolyhedronElements();
		this.pInEquality = new InEqualityElements();
		this.pIDList = new IDListElements();
		this.pIDExpression = new IDExpressionElements();
		this.pInEqID = new InEqIDElements();
		this.pAEquation = new AEquationElements();
		this.pAStandardEquation = new AStandardEquationElements();
		this.pAUseEquation = new AUseEquationElements();
		this.pAAlphabetsExpression = new AAlphabetsExpressionElements();
		this.pAAlphabetsTerminalExpression = new AAlphabetsTerminalExpressionElements();
		this.pAParanthesizedAlphabetsExpression = new AParanthesizedAlphabetsExpressionElements();
		this.pAOrExpression = new AOrExpressionElements();
		this.pAAndExpression = new AAndExpressionElements();
		this.pARelationalExpression = new ARelationalExpressionElements();
		this.pAAdditiveExpression = new AAdditiveExpressionElements();
		this.pAModuloExpression = new AModuloExpressionElements();
		this.pAMultiplicativeExpression = new AMultiplicativeExpressionElements();
		this.pAMinMaxExpression = new AMinMaxExpressionElements();
		this.pAUnaryOrTerminalExpression = new AUnaryOrTerminalExpressionElements();
		this.pAUnaryExpression = new AUnaryExpressionElements();
		this.pANotExpression = new ANotExpressionElements();
		this.pANegateExpression = new ANegateExpressionElements();
		this.pACaseExpression = new ACaseExpressionElements();
		this.pADependenceExpression = new ADependenceExpressionElements();
		this.pADependenceInArrayNotation = new ADependenceInArrayNotationElements();
		this.pAIfExpression = new AIfExpressionElements();
		this.pAIndexExpression = new AIndexExpressionElements();
		this.pAReduceExpression = new AReduceExpressionElements();
		this.pARestrictExpression = new ARestrictExpressionElements();
		this.pAVariableExpression = new AVariableExpressionElements();
		this.pAConstantExpression = new AConstantExpressionElements();
		this.pABooleanExpression = new ABooleanExpressionElements();
		this.pAIntegerExpression = new AIntegerExpressionElements();
		this.pARealExpression = new ARealExpressionElements();
		this.pAMultiArgExpression = new AMultiArgExpressionElements();
		this.pAMultiArgArithmeticExpression = new AMultiArgArithmeticExpressionElements();
		this.pAMultiArgLogicalExpression = new AMultiArgLogicalExpressionElements();
		this.pAExternalFunctionCall = new AExternalFunctionCallElements();
		this.pIndexIdentifier = new IndexIdentifierElements();
		this.pAIndexList = new AIndexListElements();
		this.pIndexAffineExpression = new IndexAffineExpressionElements();
		this.pIndexAffineExpressionTerminal = new IndexAffineExpressionTerminalElements();
		this.pAIndexAffineExpressionList = new AIndexAffineExpressionListElements();
		this.pAFunction = new AFunctionElements();
		this.pAFunctionInArrayNotation = new AFunctionInArrayNotationElements();
		this.pAType = new ATypeElements();
		this.pATypeInteger = new ATypeIntegerElements();
		this.pATypeBoolean = new ATypeBooleanElements();
		this.pATypeFloat = new ATypeFloatElements();
		this.pATypeChar = new ATypeCharElements();
		this.pReductionOp = new ReductionOpElements();
		this.pArithmeticOp = new ArithmeticOpElements();
		this.pLogicalOp = new LogicalOpElements();
		this.pRelationalOp = new RelationalOpElements();
		this.tAndOp = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "AndOp");
		this.tMaxOp = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "MaxOp");
		this.tMinOp = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "MinOp");
		this.tMulOp = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "MulOp");
		this.tOrOp = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "OrOp");
		this.tPlusOp = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "PlusOp");
		this.tXorOp = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "XorOp");
		this.tMinusOp = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "MinusOp");
		this.tDivOp = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "DivOp");
		this.tModOp = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ModOp");
		this.tNandOp = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "NandOp");
		this.tEQOp = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "EQOp");
		this.tGEOp = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "GEOp");
		this.tGTOp = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "GTOp");
		this.tLEOp = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "LEOp");
		this.tLTOp = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "LTOp");
		this.tNEOp = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "NEOp");
		this.tBOOLEAN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "BOOLEAN");
		this.tREAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "REAL");
		this.tINTERSECTION = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "INTERSECTION");
		this.tUNION = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "UNION");
		this.tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SL_COMMENT");
		this.pSystemID = new SystemIDElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("edu.csu.melange.alphabets.xtext.Alphabets".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	////Root node is called Start in alphabets
	//AProgram:
	//	externalFunctions+=AExternalFunctionDeclaration* systems+=AAffineSystem+;
	public AProgramElements getAProgramAccess() {
		return pAProgram;
	}
	
	public ParserRule getAProgramRule() {
		return getAProgramAccess().getRule();
	}

	//AExternalFunctionDeclaration:
	//	output=AType name=AExternalFunctionIdentifier "(" inputs+=AType? ("," inputs+=AType)* ")" ";";
	public AExternalFunctionDeclarationElements getAExternalFunctionDeclarationAccess() {
		return pAExternalFunctionDeclaration;
	}
	
	public ParserRule getAExternalFunctionDeclarationRule() {
		return getAExternalFunctionDeclarationAccess().getRule();
	}

	//AExternalFunctionIdentifier:
	//	name=ID;
	public AExternalFunctionIdentifierElements getAExternalFunctionIdentifierAccess() {
		return pAExternalFunctionIdentifier;
	}
	
	public ParserRule getAExternalFunctionIdentifierRule() {
		return getAExternalFunctionIdentifierAccess().getRule();
	}

	//AAffineSystem:
	//	AAffineSystemA | AAffineSystemB;
	public AAffineSystemElements getAAffineSystemAccess() {
		return pAAffineSystem;
	}
	
	public ParserRule getAAffineSystemRule() {
		return getAAffineSystemAccess().getRule();
	}

	//AAffineSystemA returns AAffineSystem:
	//	"affine" name=SystemID parameters=ADomain (("input" inputDeclarations+=AInputDeclaration*)? ("output"
	//	outputDeclarations+=AOutputDeclaration*)? ("local" localvarDeclarations+=ALocalDeclaration*)? ("over"
	//	whileDeclaration=AWhileDeclaration)? ("let" (equations+=AEquation ";")*)?) ".";
	public AAffineSystemAElements getAAffineSystemAAccess() {
		return pAAffineSystemA;
	}
	
	public ParserRule getAAffineSystemARule() {
		return getAAffineSystemAAccess().getRule();
	}

	//AAffineSystemB returns AAffineSystem:
	//	"affine" name=SystemID parameters=ADomain (("given" inputDeclarations+=AInputDeclaration*)? ("returns"
	//	outputDeclarations+=AOutputDeclaration*)? ("using" localvarDeclarations+=ALocalDeclaration*)? ("through"
	//	(equations+=AEquation ";")*)?) ".";
	public AAffineSystemBElements getAAffineSystemBAccess() {
		return pAAffineSystemB;
	}
	
	public ParserRule getAAffineSystemBRule() {
		return getAAffineSystemBAccess().getRule();
	}

	//AVariableDeclaration:
	//	AOutputDeclaration | AInputDeclaration | ALocalDeclaration;
	public AVariableDeclarationElements getAVariableDeclarationAccess() {
		return pAVariableDeclaration;
	}
	
	public ParserRule getAVariableDeclarationRule() {
		return getAVariableDeclarationAccess().getRule();
	}

	//AOutputDeclaration:
	//	type=AType identifierList=AIdentifierList domain=ADomain? ";";
	public AOutputDeclarationElements getAOutputDeclarationAccess() {
		return pAOutputDeclaration;
	}
	
	public ParserRule getAOutputDeclarationRule() {
		return getAOutputDeclarationAccess().getRule();
	}

	//AInputDeclaration:
	//	type=AType identifierList=AIdentifierList domain=ADomain? ";";
	public AInputDeclarationElements getAInputDeclarationAccess() {
		return pAInputDeclaration;
	}
	
	public ParserRule getAInputDeclarationRule() {
		return getAInputDeclarationAccess().getRule();
	}

	//ALocalDeclaration:
	//	type=AType identifierList=AIdentifierList domain=ADomain? ";";
	public ALocalDeclarationElements getALocalDeclarationAccess() {
		return pALocalDeclaration;
	}
	
	public ParserRule getALocalDeclarationRule() {
		return getALocalDeclarationAccess().getRule();
	}

	//AWhileDeclaration:
	//	timeDomain=ADomain "while" cond=AAlphabetsExpression;
	public AWhileDeclarationElements getAWhileDeclarationAccess() {
		return pAWhileDeclaration;
	}
	
	public ParserRule getAWhileDeclarationRule() {
		return getAWhileDeclarationAccess().getRule();
	}

	//AIdentifierList:
	//	identifiers+=VariableIdentifier ("," identifiers+=VariableIdentifier)*;
	public AIdentifierListElements getAIdentifierListAccess() {
		return pAIdentifierList;
	}
	
	public ParserRule getAIdentifierListRule() {
		return getAIdentifierListAccess().getRule();
	}

	//VariableIdentifier:
	//	ID;
	public VariableIdentifierElements getVariableIdentifierAccess() {
		return pVariableIdentifier;
	}
	
	public ParserRule getVariableIdentifierRule() {
		return getVariableIdentifierAccess().getRule();
	}

	//////// Domains ////////
	////Domains are unions of single polyhedron
	//ADomain:
	//	polyhedra+=APolyhedron (UNION polyhedra+=APolyhedron)*;
	public ADomainElements getADomainAccess() {
		return pADomain;
	}
	
	public ParserRule getADomainRule() {
		return getADomainAccess().getRule();
	}

	////TerminalDomain : 
	////	ConstraintsDomain;
	////  |
	////ParenthesisDomain 
	////| NegatedDomain;
	////No negated domains in alphabets	
	////NegatedDomain:
	////	'~' exp=TerminalDomain;
	////No parenthesised domains in alphabets	
	////ParenthesisDomain : 
	////	'(' Domain ')' ; 
	//APolyhedron:
	//	"{" indexes=AIndexList //(indexList=IndexDefinitionList)? 
	//	"|" (constraints+=InEquality (INTERSECTION constraints+=InEquality)*)? "}";
	public APolyhedronElements getAPolyhedronAccess() {
		return pAPolyhedron;
	}
	
	public ParserRule getAPolyhedronRule() {
		return getAPolyhedronAccess().getRule();
	}

	////Constraint that is just a string == InEquality
	//InEquality:
	//	(IDList //INTEGER RelationalOp INTEGER;
	//	//InEqID RelationalOp InEqID;
	//	| IDExpression) (RelationalOp (IDList | IDExpression))+;
	public InEqualityElements getInEqualityAccess() {
		return pInEquality;
	}
	
	public ParserRule getInEqualityRule() {
		return getInEqualityAccess().getRule();
	}

	////IDList|IDExpression RelationalOp IDList|IDExpression;
	//IDList:
	//	InEqID ("," InEqID)* | "(" InEqID ("," InEqID)* ")";
	public IDListElements getIDListAccess() {
		return pIDList;
	}
	
	public ParserRule getIDListRule() {
		return getIDListAccess().getRule();
	}

	//IDExpression:
	//	InEqID ((PlusOp | MinusOp) InEqID)+;
	public IDExpressionElements getIDExpressionAccess() {
		return pIDExpression;
	}
	
	public ParserRule getIDExpressionRule() {
		return getIDExpressionAccess().getRule();
	}

	////IDs in inequalities may have integer prefix for multiplication	
	//InEqID:
	//	MinusOp? (INT+ | INT* ID);
	public InEqIDElements getInEqIDAccess() {
		return pInEqID;
	}
	
	public ParserRule getInEqIDRule() {
		return getInEqIDAccess().getRule();
	}

	////Constraint that is complicated	
	////Constraint:
	////	lhsIndices+=IndexAdditiveExpression ( ',' lhsIndices+=IndexAdditiveExpression)* 
	////	op1=RelationalOp
	////	midIndices+=IndexAdditiveExpression ( ',' midIndices+=IndexAdditiveExpression)*
	////	(
	////		op2=RelationalOp
	////		rhsIndices+=IndexAdditiveExpression ( ',' rhsIndices+=IndexAdditiveExpression)*
	////	)?
	////	;
	///////// Equations //////
	//AEquation:
	//	AStandardEquation | AUseEquation;
	public AEquationElements getAEquationAccess() {
		return pAEquation;
	}
	
	public ParserRule getAEquationRule() {
		return getAEquationAccess().getRule();
	}

	//AStandardEquation: //(indexList=IndexDefinitionList)? 
	////var=LHSVariableReference ('[' (rhsIds+=IndexReference (',' rhsIds+=IndexReference)* )?']')? '=' exp=AlphabetsExpression ';';
	//	var=ID ("[" indexes=AIndexList "]")? "=" expr=AAlphabetsExpression;
	public AStandardEquationElements getAStandardEquationAccess() {
		return pAStandardEquation;
	}
	
	public ParserRule getAStandardEquationRule() {
		return getAStandardEquationAccess().getRule();
	}

	//AUseEquation:
	//	"use" extDom=ADomain? nameSubSys=ID "[" param=AIndexAffineExpressionList "]" "(" inputs+=AAlphabetsExpression? (","
	//	inputs+=AAlphabetsExpression)* ")" "returns" "(" outputs=AIdentifierList ")";
	public AUseEquationElements getAUseEquationAccess() {
		return pAUseEquation;
	}
	
	public ParserRule getAUseEquationRule() {
		return getAUseEquationAccess().getRule();
	}

	////AAffineExpressionList :
	////	expressions+=AAlphabetsExpression (',' expressions+=AAlphabetsExpression)*;
	//////// Expressions //////
	//AAlphabetsExpression:
	//	AIfExpression | ARestrictExpression | AOrExpression;
	public AAlphabetsExpressionElements getAAlphabetsExpressionAccess() {
		return pAAlphabetsExpression;
	}
	
	public ParserRule getAAlphabetsExpressionRule() {
		return getAAlphabetsExpressionAccess().getRule();
	}

	//AAlphabetsTerminalExpression returns AAlphabetsExpression:
	//	AParanthesizedAlphabetsExpression | ACaseExpression | AReduceExpression | AMultiArgExpression | AConstantExpression |
	//	AVariableExpression | AIndexExpression | ADependenceExpression | ADependenceInArrayNotation;
	public AAlphabetsTerminalExpressionElements getAAlphabetsTerminalExpressionAccess() {
		return pAAlphabetsTerminalExpression;
	}
	
	public ParserRule getAAlphabetsTerminalExpressionRule() {
		return getAAlphabetsTerminalExpressionAccess().getRule();
	}

	//AParanthesizedAlphabetsExpression returns AAlphabetsExpression:
	//	"(" AAlphabetsExpression ")";
	public AParanthesizedAlphabetsExpressionElements getAParanthesizedAlphabetsExpressionAccess() {
		return pAParanthesizedAlphabetsExpression;
	}
	
	public ParserRule getAParanthesizedAlphabetsExpressionRule() {
		return getAParanthesizedAlphabetsExpressionAccess().getRule();
	}

	//AOrExpression returns AAlphabetsExpression:
	//	AAndExpression ({AOrExpression.left=current} operator=(OrOp | XorOp) right=AAndExpression)*;
	public AOrExpressionElements getAOrExpressionAccess() {
		return pAOrExpression;
	}
	
	public ParserRule getAOrExpressionRule() {
		return getAOrExpressionAccess().getRule();
	}

	//AAndExpression returns AAlphabetsExpression:
	//	ARelationalExpression ({AAndExpression.left=current} operator=(AndOp | NandOp) right=ARelationalExpression)*;
	public AAndExpressionElements getAAndExpressionAccess() {
		return pAAndExpression;
	}
	
	public ParserRule getAAndExpressionRule() {
		return getAAndExpressionAccess().getRule();
	}

	//ARelationalExpression returns AAlphabetsExpression:
	//	AAdditiveExpression ({ARelationalExpression.left=current} operator=RelationalOp right=AAdditiveExpression)*;
	public ARelationalExpressionElements getARelationalExpressionAccess() {
		return pARelationalExpression;
	}
	
	public ParserRule getARelationalExpressionRule() {
		return getARelationalExpressionAccess().getRule();
	}

	//AAdditiveExpression returns AAlphabetsExpression:
	//	AModuloExpression ({AAdditiveExpression.left=current} op=(PlusOp | MinusOp) right=AModuloExpression)*;
	public AAdditiveExpressionElements getAAdditiveExpressionAccess() {
		return pAAdditiveExpression;
	}
	
	public ParserRule getAAdditiveExpressionRule() {
		return getAAdditiveExpressionAccess().getRule();
	}

	//AModuloExpression returns AAlphabetsExpression:
	//	AMultiplicativeExpression ({AModuloExpression.left=current} op=ModOp right=AMultiplicativeExpression)*;
	public AModuloExpressionElements getAModuloExpressionAccess() {
		return pAModuloExpression;
	}
	
	public ParserRule getAModuloExpressionRule() {
		return getAModuloExpressionAccess().getRule();
	}

	//AMultiplicativeExpression returns AAlphabetsExpression:
	//	AMinMaxExpression ({AMultiplicativeExpression.left=current} op=(MulOp | DivOp) right=AMinMaxExpression)*;
	public AMultiplicativeExpressionElements getAMultiplicativeExpressionAccess() {
		return pAMultiplicativeExpression;
	}
	
	public ParserRule getAMultiplicativeExpressionRule() {
		return getAMultiplicativeExpressionAccess().getRule();
	}

	//AMinMaxExpression returns AAlphabetsExpression:
	//	AUnaryOrTerminalExpression ({AMinMaxExpression.left=current} op=(MinOp | MaxOp) right=AUnaryOrTerminalExpression)*;
	public AMinMaxExpressionElements getAMinMaxExpressionAccess() {
		return pAMinMaxExpression;
	}
	
	public ParserRule getAMinMaxExpressionRule() {
		return getAMinMaxExpressionAccess().getRule();
	}

	//AUnaryOrTerminalExpression returns AAlphabetsExpression:
	//	AUnaryExpression | AAlphabetsTerminalExpression;
	public AUnaryOrTerminalExpressionElements getAUnaryOrTerminalExpressionAccess() {
		return pAUnaryOrTerminalExpression;
	}
	
	public ParserRule getAUnaryOrTerminalExpressionRule() {
		return getAUnaryOrTerminalExpressionAccess().getRule();
	}

	//AUnaryExpression returns AAlphabetsExpression:
	//	ANotExpression | ANegateExpression;
	public AUnaryExpressionElements getAUnaryExpressionAccess() {
		return pAUnaryExpression;
	}
	
	public ParserRule getAUnaryExpressionRule() {
		return getAUnaryExpressionAccess().getRule();
	}

	//ANotExpression:
	//	op="not" expr=AAlphabetsTerminalExpression;
	public ANotExpressionElements getANotExpressionAccess() {
		return pANotExpression;
	}
	
	public ParserRule getANotExpressionRule() {
		return getANotExpressionAccess().getRule();
	}

	//ANegateExpression:
	//	op=MinusOp expr=AAlphabetsTerminalExpression;
	public ANegateExpressionElements getANegateExpressionAccess() {
		return pANegateExpression;
	}
	
	public ParserRule getANegateExpressionRule() {
		return getANegateExpressionAccess().getRule();
	}

	//////// Expressions //////	
	//ACaseExpression:
	//	"case" (exprs+=AAlphabetsExpression ";")+ "esac";
	public ACaseExpressionElements getACaseExpressionAccess() {
		return pACaseExpression;
	}
	
	public ParserRule getACaseExpressionRule() {
		return getACaseExpressionAccess().getRule();
	}

	//ADependenceExpression:
	//	func=AFunction "@" expr=AAlphabetsTerminalExpression;
	public ADependenceExpressionElements getADependenceExpressionAccess() {
		return pADependenceExpression;
	}
	
	public ParserRule getADependenceExpressionRule() {
		return getADependenceExpressionAccess().getRule();
	}

	//////Array notation for AShow type syntax
	//ADependenceInArrayNotation:
	//	var=VariableIdentifier "[" dep=AIndexAffineExpressionList "]";
	public ADependenceInArrayNotationElements getADependenceInArrayNotationAccess() {
		return pADependenceInArrayNotation;
	}
	
	public ParserRule getADependenceInArrayNotationRule() {
		return getADependenceInArrayNotationAccess().getRule();
	}

	//AIfExpression:
	//	"if" cond=AAlphabetsExpression "then" then=AAlphabetsExpression "else" else=AAlphabetsExpression;
	public AIfExpressionElements getAIfExpressionAccess() {
		return pAIfExpression;
	}
	
	public ParserRule getAIfExpressionRule() {
		return getAIfExpressionAccess().getRule();
	}

	//AIndexExpression:
	//	"[" func=IndexAffineExpression "]" | "val(" indexes=AIndexList "->" func=IndexAffineExpression ")";
	public AIndexExpressionElements getAIndexExpressionAccess() {
		return pAIndexExpression;
	}
	
	public ParserRule getAIndexExpressionRule() {
		return getAIndexExpressionAccess().getRule();
	}

	//AReduceExpression:
	//	"reduce" "(" op=ReductionOp "," projection=(AFunction | AFunctionInArrayNotation) "," expr=AAlphabetsExpression ")";
	public AReduceExpressionElements getAReduceExpressionAccess() {
		return pAReduceExpression;
	}
	
	public ParserRule getAReduceExpressionRule() {
		return getAReduceExpressionAccess().getRule();
	}

	//ARestrictExpression:
	//	domain=ADomain ":" expr=AAlphabetsExpression;
	public ARestrictExpressionElements getARestrictExpressionAccess() {
		return pARestrictExpression;
	}
	
	public ParserRule getARestrictExpressionRule() {
		return getARestrictExpressionAccess().getRule();
	}

	//AVariableExpression:
	//	var=VariableIdentifier;
	public AVariableExpressionElements getAVariableExpressionAccess() {
		return pAVariableExpression;
	}
	
	public ParserRule getAVariableExpressionRule() {
		return getAVariableExpressionAccess().getRule();
	}

	//AConstantExpression:
	//	ABooleanExpression | ARealExpression | AIntegerExpression;
	public AConstantExpressionElements getAConstantExpressionAccess() {
		return pAConstantExpression;
	}
	
	public ParserRule getAConstantExpressionRule() {
		return getAConstantExpressionAccess().getRule();
	}

	//ABooleanExpression:
	//	value=BOOLEAN;
	public ABooleanExpressionElements getABooleanExpressionAccess() {
		return pABooleanExpression;
	}
	
	public ParserRule getABooleanExpressionRule() {
		return getABooleanExpressionAccess().getRule();
	}

	//AIntegerExpression:
	//	value=INT;
	public AIntegerExpressionElements getAIntegerExpressionAccess() {
		return pAIntegerExpression;
	}
	
	public ParserRule getAIntegerExpressionRule() {
		return getAIntegerExpressionAccess().getRule();
	}

	//ARealExpression:
	//	value=REAL;
	public ARealExpressionElements getARealExpressionAccess() {
		return pARealExpression;
	}
	
	public ParserRule getARealExpressionRule() {
		return getARealExpressionAccess().getRule();
	}

	//AMultiArgExpression:
	//	AMultiArgArithmeticExpression | AMultiArgLogicalExpression | AExternalFunctionCall;
	public AMultiArgExpressionElements getAMultiArgExpressionAccess() {
		return pAMultiArgExpression;
	}
	
	public ParserRule getAMultiArgExpressionRule() {
		return getAMultiArgExpressionAccess().getRule();
	}

	//AMultiArgArithmeticExpression:
	//	op=ArithmeticOp "(" exprs+=AAlphabetsExpression ("," exprs+=AAlphabetsExpression)+ ")";
	public AMultiArgArithmeticExpressionElements getAMultiArgArithmeticExpressionAccess() {
		return pAMultiArgArithmeticExpression;
	}
	
	public ParserRule getAMultiArgArithmeticExpressionRule() {
		return getAMultiArgArithmeticExpressionAccess().getRule();
	}

	//AMultiArgLogicalExpression:
	//	op=LogicalOp "(" exprs+=AAlphabetsExpression ("," exprs+=AAlphabetsExpression)+ ")";
	public AMultiArgLogicalExpressionElements getAMultiArgLogicalExpressionAccess() {
		return pAMultiArgLogicalExpression;
	}
	
	public ParserRule getAMultiArgLogicalExpressionRule() {
		return getAMultiArgLogicalExpressionAccess().getRule();
	}

	//AExternalFunctionCall:
	//	func=ID "(" (exprs+=AAlphabetsExpression ("," exprs+=AAlphabetsExpression)*)? ")";
	public AExternalFunctionCallElements getAExternalFunctionCallAccess() {
		return pAExternalFunctionCall;
	}
	
	public ParserRule getAExternalFunctionCallRule() {
		return getAExternalFunctionCallAccess().getRule();
	}

	////////////////////////////////////////////////////////////
	////////// Dependance functions and IndexExpressions ///////
	////////////////////////////////////////////////////////////
	//IndexIdentifier:
	//	ID;
	public IndexIdentifierElements getIndexIdentifierAccess() {
		return pIndexIdentifier;
	}
	
	public ParserRule getIndexIdentifierRule() {
		return getIndexIdentifierAccess().getRule();
	}

	//AIndexList:
	//	{AIndexList} (ids+=IndexIdentifier ("," ids+=IndexIdentifier)*)?;
	public AIndexListElements getAIndexListAccess() {
		return pAIndexList;
	}
	
	public ParserRule getAIndexListRule() {
		return getAIndexListAccess().getRule();
	}

	////IndexAffineExpression:	
	////	MinusOp? (INTEGER | INTEGER? IndexIdentifier) ((PlusOp|MinusOp) IndexAffineExpressionTerminal)*;
	//IndexAffineExpression:
	//	MinusOp? IndexAffineExpressionTerminal ((PlusOp | MinusOp) IndexAffineExpression)*;
	public IndexAffineExpressionElements getIndexAffineExpressionAccess() {
		return pIndexAffineExpression;
	}
	
	public ParserRule getIndexAffineExpressionRule() {
		return getIndexAffineExpressionAccess().getRule();
	}

	//IndexAffineExpressionTerminal:
	//	INT | INT? IndexIdentifier;
	public IndexAffineExpressionTerminalElements getIndexAffineExpressionTerminalAccess() {
		return pIndexAffineExpressionTerminal;
	}
	
	public ParserRule getIndexAffineExpressionTerminalRule() {
		return getIndexAffineExpressionTerminalAccess().getRule();
	}

	//AIndexAffineExpressionList:
	//	{AIndexAffineExpressionList} (exprs+=IndexAffineExpression ("," exprs+=IndexAffineExpression)*)?;
	public AIndexAffineExpressionListElements getAIndexAffineExpressionListAccess() {
		return pAIndexAffineExpressionList;
	}
	
	public ParserRule getAIndexAffineExpressionListRule() {
		return getAIndexAffineExpressionListAccess().getRule();
	}

	//AFunction:
	//	"(" indexes=AIndexList "->" func=AIndexAffineExpressionList ")";
	public AFunctionElements getAFunctionAccess() {
		return pAFunction;
	}
	
	public ParserRule getAFunctionRule() {
		return getAFunctionAccess().getRule();
	}

	////	('(' indexes=AIndexList '->' func=AIndexAffineExpressionList ')') | ('(' indexes=AIndexList '->' ')');
	//////Array notation for AShow type syntax
	//AFunctionInArrayNotation:
	//	"[" newIds=AIndexAffineExpressionList "]";
	public AFunctionInArrayNotationElements getAFunctionInArrayNotationAccess() {
		return pAFunctionInArrayNotation;
	}
	
	public ParserRule getAFunctionInArrayNotationRule() {
		return getAFunctionInArrayNotationAccess().getRule();
	}

	////////ORIGINAL ONES//////
	//////IndexDefinitionContainer : Function | ConstraintsDomain;
	////
	//////IndexDefinitionList:
	//////		( indices+=IndexDefinition  (',' indices+=IndexDefinition)* ); 
	//////
	//////Function:
	//////	(name=ID)? '('
	//////		indexList=IndexDefinitionList 
	//////		'->' 
	//////		(indexExpList=IndexExpressionList)? ')';
	//////
	//////IndexExpressionList : 
	//////	exprIndexes+=IndexAdditiveExpression  (',' exprIndexes+=IndexAdditiveExpression)*;
	////	//SimpleIndexExpressionList | ParenthesisIndexExpressionList;		
	////		
	//////SimpleIndexExpressionList:
	//////	exprIndexes+=IndexAdditiveExpression  (',' exprIndexes+=IndexAdditiveExpression)*; 
	////		
	//////ParenthesisIndexExpressionList:
	//////	'(' indexExpList=SimpleIndexExpressionList ')';
	////
	//////IndexAdditiveExpression returns IndexExpression:
	//////	terms+=IndexExpressionTerminal (ops+=("+" | "-") terms+=IndexExpressionTerminal)*;
	//////
	//////IndexExpressionTerminal: IndexReference | IndexValueTerminal | IndexParenthesisExpression;
	//////
	//////IndexReference:
	//////	{NegCoefIndexTerminal} ('-'	coef=INT index=[IndexDefinition] ) |
	//////	{NegIndexTerminal} ('-' index=[IndexDefinition] ) |
	//////	{CoefIndexTerminal} (coef=INT index=[IndexDefinition] ) |
	//////	{IndexTerminal} (index=[IndexDefinition] ) ;
	//////
	//////IndexValueTerminal:
	//////	{NegConstantTerminal} (('-' num=INT)  )|
	//////	{ConstantTerminal} ((num=INT ) );
	//////
	//////IndexDefinition:
	//////	name=ID;	
	//////
	//////IndexParenthesisExpression:
	//////	'(' exp=IndexAdditiveExpression ')' ('/' denum=INT)?;
	//////	
	//////IndexExpressionDefinition:
	//////	name=ID;	
	/////// Tokens /////
	//AType:
	//	unsigned="unsigned"? type=(ATypeInteger | ATypeFloat | ATypeBoolean | ATypeChar);
	public ATypeElements getATypeAccess() {
		return pAType;
	}
	
	public ParserRule getATypeRule() {
		return getATypeAccess().getRule();
	}

	//ATypeInteger:
	//	"int" | "longlong" | "long" | "short";
	public ATypeIntegerElements getATypeIntegerAccess() {
		return pATypeInteger;
	}
	
	public ParserRule getATypeIntegerRule() {
		return getATypeIntegerAccess().getRule();
	}

	//ATypeBoolean:
	//	"bool";
	public ATypeBooleanElements getATypeBooleanAccess() {
		return pATypeBoolean;
	}
	
	public ParserRule getATypeBooleanRule() {
		return getATypeBooleanAccess().getRule();
	}

	//ATypeFloat:
	//	"float" | "double";
	public ATypeFloatElements getATypeFloatAccess() {
		return pATypeFloat;
	}
	
	public ParserRule getATypeFloatRule() {
		return getATypeFloatAccess().getRule();
	}

	//ATypeChar:
	//	"char";
	public ATypeCharElements getATypeCharAccess() {
		return pATypeChar;
	}
	
	public ParserRule getATypeCharRule() {
		return getATypeCharAccess().getRule();
	}

	//ReductionOp:
	//	AndOp | MaxOp | MinOp | MulOp | OrOp | PlusOp | XorOp;
	public ReductionOpElements getReductionOpAccess() {
		return pReductionOp;
	}
	
	public ParserRule getReductionOpRule() {
		return getReductionOpAccess().getRule();
	}

	//ArithmeticOp:
	//	MaxOp | MinOp | MulOp | PlusOp;
	public ArithmeticOpElements getArithmeticOpAccess() {
		return pArithmeticOp;
	}
	
	public ParserRule getArithmeticOpRule() {
		return getArithmeticOpAccess().getRule();
	}

	//LogicalOp:
	//	AndOp | OrOp | XorOp;
	public LogicalOpElements getLogicalOpAccess() {
		return pLogicalOp;
	}
	
	public ParserRule getLogicalOpRule() {
		return getLogicalOpAccess().getRule();
	}

	//RelationalOp:
	//	EQOp | GEOp | GTOp | LEOp | LTOp | NEOp;
	public RelationalOpElements getRelationalOpAccess() {
		return pRelationalOp;
	}
	
	public ParserRule getRelationalOpRule() {
		return getRelationalOpAccess().getRule();
	}

	////Operators
	//terminal AndOp:
	//	"and";
	public TerminalRule getAndOpRule() {
		return tAndOp;
	} 

	//terminal MaxOp:
	//	"max";
	public TerminalRule getMaxOpRule() {
		return tMaxOp;
	} 

	//terminal MinOp:
	//	"min";
	public TerminalRule getMinOpRule() {
		return tMinOp;
	} 

	//terminal MulOp:
	//	"*";
	public TerminalRule getMulOpRule() {
		return tMulOp;
	} 

	//terminal OrOp:
	//	"or";
	public TerminalRule getOrOpRule() {
		return tOrOp;
	} 

	//terminal PlusOp:
	//	"+";
	public TerminalRule getPlusOpRule() {
		return tPlusOp;
	} 

	//terminal XorOp:
	//	"xor";
	public TerminalRule getXorOpRule() {
		return tXorOp;
	} 

	////Operators that cannot be in reductions
	//terminal MinusOp:
	//	"-";
	public TerminalRule getMinusOpRule() {
		return tMinusOp;
	} 

	//terminal DivOp:
	//	"/";
	public TerminalRule getDivOpRule() {
		return tDivOp;
	} 

	//terminal ModOp:
	//	"%";
	public TerminalRule getModOpRule() {
		return tModOp;
	} 

	//terminal NandOp:
	//	"nand";
	public TerminalRule getNandOpRule() {
		return tNandOp;
	} 

	////Relational Operators
	//terminal EQOp:
	//	"==";
	public TerminalRule getEQOpRule() {
		return tEQOp;
	} 

	//terminal GEOp:
	//	">=";
	public TerminalRule getGEOpRule() {
		return tGEOp;
	} 

	//terminal GTOp:
	//	">";
	public TerminalRule getGTOpRule() {
		return tGTOp;
	} 

	//terminal LEOp:
	//	"<=";
	public TerminalRule getLEOpRule() {
		return tLEOp;
	} 

	//terminal LTOp:
	//	"<";
	public TerminalRule getLTOpRule() {
		return tLTOp;
	} 

	//terminal NEOp:
	//	"!=";
	public TerminalRule getNEOpRule() {
		return tNEOp;
	} 

	////Constants
	//terminal BOOLEAN:
	//	"true" | "false";
	public TerminalRule getBOOLEANRule() {
		return tBOOLEAN;
	} 

	//terminal REAL:
	//	"0".."9"+ "." "0".."9"+;
	public TerminalRule getREALRule() {
		return tREAL;
	} 

	//terminal INTERSECTION:
	//	"&&";
	public TerminalRule getINTERSECTIONRule() {
		return tINTERSECTION;
	} 

	//terminal UNION:
	//	"||";
	public TerminalRule getUNIONRule() {
		return tUNION;
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return tSL_COMMENT;
	} 

	//SystemID:
	//	ID | (INT | ID) ((MinusOp | INT | ID)* ID);
	public SystemIDElements getSystemIDAccess() {
		return pSystemID;
	}
	
	public ParserRule getSystemIDRule() {
		return getSystemIDAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
