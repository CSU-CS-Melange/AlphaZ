/*
* generated by Xtext
*/
grammar InternalAlphabets;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package edu.csu.melange.alphabets.xtext.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package edu.csu.melange.alphabets.xtext.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import edu.csu.melange.alphabets.xtext.services.AlphabetsGrammarAccess;

}

@parser::members {
 
 	private AlphabetsGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(AlphabetsGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleAProgram
entryRuleAProgram 
:
{ before(grammarAccess.getAProgramRule()); }
	 ruleAProgram
{ after(grammarAccess.getAProgramRule()); } 
	 EOF 
;

// Rule AProgram
ruleAProgram
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAProgramAccess().getGroup()); }
(rule__AProgram__Group__0)
{ after(grammarAccess.getAProgramAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAExternalFunctionDeclaration
entryRuleAExternalFunctionDeclaration 
:
{ before(grammarAccess.getAExternalFunctionDeclarationRule()); }
	 ruleAExternalFunctionDeclaration
{ after(grammarAccess.getAExternalFunctionDeclarationRule()); } 
	 EOF 
;

// Rule AExternalFunctionDeclaration
ruleAExternalFunctionDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAExternalFunctionDeclarationAccess().getGroup()); }
(rule__AExternalFunctionDeclaration__Group__0)
{ after(grammarAccess.getAExternalFunctionDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAExternalFunctionIdentifier
entryRuleAExternalFunctionIdentifier 
:
{ before(grammarAccess.getAExternalFunctionIdentifierRule()); }
	 ruleAExternalFunctionIdentifier
{ after(grammarAccess.getAExternalFunctionIdentifierRule()); } 
	 EOF 
;

// Rule AExternalFunctionIdentifier
ruleAExternalFunctionIdentifier
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAExternalFunctionIdentifierAccess().getNameAssignment()); }
(rule__AExternalFunctionIdentifier__NameAssignment)
{ after(grammarAccess.getAExternalFunctionIdentifierAccess().getNameAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAAffineSystem
entryRuleAAffineSystem 
:
{ before(grammarAccess.getAAffineSystemRule()); }
	 ruleAAffineSystem
{ after(grammarAccess.getAAffineSystemRule()); } 
	 EOF 
;

// Rule AAffineSystem
ruleAAffineSystem
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAAffineSystemAccess().getGroup()); }
(rule__AAffineSystem__Group__0)
{ after(grammarAccess.getAAffineSystemAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAOutputDeclaration
entryRuleAOutputDeclaration 
:
{ before(grammarAccess.getAOutputDeclarationRule()); }
	 ruleAOutputDeclaration
{ after(grammarAccess.getAOutputDeclarationRule()); } 
	 EOF 
;

// Rule AOutputDeclaration
ruleAOutputDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAOutputDeclarationAccess().getGroup()); }
(rule__AOutputDeclaration__Group__0)
{ after(grammarAccess.getAOutputDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAInputDeclaration
entryRuleAInputDeclaration 
:
{ before(grammarAccess.getAInputDeclarationRule()); }
	 ruleAInputDeclaration
{ after(grammarAccess.getAInputDeclarationRule()); } 
	 EOF 
;

// Rule AInputDeclaration
ruleAInputDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAInputDeclarationAccess().getGroup()); }
(rule__AInputDeclaration__Group__0)
{ after(grammarAccess.getAInputDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleALocalDeclaration
entryRuleALocalDeclaration 
:
{ before(grammarAccess.getALocalDeclarationRule()); }
	 ruleALocalDeclaration
{ after(grammarAccess.getALocalDeclarationRule()); } 
	 EOF 
;

// Rule ALocalDeclaration
ruleALocalDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getALocalDeclarationAccess().getGroup()); }
(rule__ALocalDeclaration__Group__0)
{ after(grammarAccess.getALocalDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAIdentifierList
entryRuleAIdentifierList 
:
{ before(grammarAccess.getAIdentifierListRule()); }
	 ruleAIdentifierList
{ after(grammarAccess.getAIdentifierListRule()); } 
	 EOF 
;

// Rule AIdentifierList
ruleAIdentifierList
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAIdentifierListAccess().getGroup()); }
(rule__AIdentifierList__Group__0)
{ after(grammarAccess.getAIdentifierListAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVariableIdentifier
entryRuleVariableIdentifier 
:
{ before(grammarAccess.getVariableIdentifierRule()); }
	 ruleVariableIdentifier
{ after(grammarAccess.getVariableIdentifierRule()); } 
	 EOF 
;

// Rule VariableIdentifier
ruleVariableIdentifier
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVariableIdentifierAccess().getIDTerminalRuleCall()); }
	RULE_ID
{ after(grammarAccess.getVariableIdentifierAccess().getIDTerminalRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleADomain
entryRuleADomain 
:
{ before(grammarAccess.getADomainRule()); }
	 ruleADomain
{ after(grammarAccess.getADomainRule()); } 
	 EOF 
;

// Rule ADomain
ruleADomain
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getADomainAccess().getGroup()); }
(rule__ADomain__Group__0)
{ after(grammarAccess.getADomainAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAPolyhedron
entryRuleAPolyhedron 
:
{ before(grammarAccess.getAPolyhedronRule()); }
	 ruleAPolyhedron
{ after(grammarAccess.getAPolyhedronRule()); } 
	 EOF 
;

// Rule APolyhedron
ruleAPolyhedron
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAPolyhedronAccess().getGroup()); }
(rule__APolyhedron__Group__0)
{ after(grammarAccess.getAPolyhedronAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleInEquality
entryRuleInEquality 
:
{ before(grammarAccess.getInEqualityRule()); }
	 ruleInEquality
{ after(grammarAccess.getInEqualityRule()); } 
	 EOF 
;

// Rule InEquality
ruleInEquality
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getInEqualityAccess().getGroup()); }
(rule__InEquality__Group__0)
{ after(grammarAccess.getInEqualityAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleIDList
entryRuleIDList 
:
{ before(grammarAccess.getIDListRule()); }
	 ruleIDList
{ after(grammarAccess.getIDListRule()); } 
	 EOF 
;

// Rule IDList
ruleIDList
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIDListAccess().getAlternatives()); }
(rule__IDList__Alternatives)
{ after(grammarAccess.getIDListAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleIDExpression
entryRuleIDExpression 
:
{ before(grammarAccess.getIDExpressionRule()); }
	 ruleIDExpression
{ after(grammarAccess.getIDExpressionRule()); } 
	 EOF 
;

// Rule IDExpression
ruleIDExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIDExpressionAccess().getGroup()); }
(rule__IDExpression__Group__0)
{ after(grammarAccess.getIDExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleInEqID
entryRuleInEqID 
:
{ before(grammarAccess.getInEqIDRule()); }
	 ruleInEqID
{ after(grammarAccess.getInEqIDRule()); } 
	 EOF 
;

// Rule InEqID
ruleInEqID
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getInEqIDAccess().getGroup()); }
(rule__InEqID__Group__0)
{ after(grammarAccess.getInEqIDAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAStandardEquation
entryRuleAStandardEquation 
:
{ before(grammarAccess.getAStandardEquationRule()); }
	 ruleAStandardEquation
{ after(grammarAccess.getAStandardEquationRule()); } 
	 EOF 
;

// Rule AStandardEquation
ruleAStandardEquation
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAStandardEquationAccess().getGroup()); }
(rule__AStandardEquation__Group__0)
{ after(grammarAccess.getAStandardEquationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAAlphabetsExpression
entryRuleAAlphabetsExpression 
:
{ before(grammarAccess.getAAlphabetsExpressionRule()); }
	 ruleAAlphabetsExpression
{ after(grammarAccess.getAAlphabetsExpressionRule()); } 
	 EOF 
;

// Rule AAlphabetsExpression
ruleAAlphabetsExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAAlphabetsExpressionAccess().getAlternatives()); }
(rule__AAlphabetsExpression__Alternatives)
{ after(grammarAccess.getAAlphabetsExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAAlphabetsTerminalExpression
entryRuleAAlphabetsTerminalExpression 
:
{ before(grammarAccess.getAAlphabetsTerminalExpressionRule()); }
	 ruleAAlphabetsTerminalExpression
{ after(grammarAccess.getAAlphabetsTerminalExpressionRule()); } 
	 EOF 
;

// Rule AAlphabetsTerminalExpression
ruleAAlphabetsTerminalExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAAlphabetsTerminalExpressionAccess().getAlternatives()); }
(rule__AAlphabetsTerminalExpression__Alternatives)
{ after(grammarAccess.getAAlphabetsTerminalExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAParanthesizedAlphabetsExpression
entryRuleAParanthesizedAlphabetsExpression 
:
{ before(grammarAccess.getAParanthesizedAlphabetsExpressionRule()); }
	 ruleAParanthesizedAlphabetsExpression
{ after(grammarAccess.getAParanthesizedAlphabetsExpressionRule()); } 
	 EOF 
;

// Rule AParanthesizedAlphabetsExpression
ruleAParanthesizedAlphabetsExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAParanthesizedAlphabetsExpressionAccess().getGroup()); }
(rule__AParanthesizedAlphabetsExpression__Group__0)
{ after(grammarAccess.getAParanthesizedAlphabetsExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAOrExpression
entryRuleAOrExpression 
:
{ before(grammarAccess.getAOrExpressionRule()); }
	 ruleAOrExpression
{ after(grammarAccess.getAOrExpressionRule()); } 
	 EOF 
;

// Rule AOrExpression
ruleAOrExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAOrExpressionAccess().getGroup()); }
(rule__AOrExpression__Group__0)
{ after(grammarAccess.getAOrExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAAndExpression
entryRuleAAndExpression 
:
{ before(grammarAccess.getAAndExpressionRule()); }
	 ruleAAndExpression
{ after(grammarAccess.getAAndExpressionRule()); } 
	 EOF 
;

// Rule AAndExpression
ruleAAndExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAAndExpressionAccess().getGroup()); }
(rule__AAndExpression__Group__0)
{ after(grammarAccess.getAAndExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleARelationalExpression
entryRuleARelationalExpression 
:
{ before(grammarAccess.getARelationalExpressionRule()); }
	 ruleARelationalExpression
{ after(grammarAccess.getARelationalExpressionRule()); } 
	 EOF 
;

// Rule ARelationalExpression
ruleARelationalExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getARelationalExpressionAccess().getGroup()); }
(rule__ARelationalExpression__Group__0)
{ after(grammarAccess.getARelationalExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAAdditiveExpression
entryRuleAAdditiveExpression 
:
{ before(grammarAccess.getAAdditiveExpressionRule()); }
	 ruleAAdditiveExpression
{ after(grammarAccess.getAAdditiveExpressionRule()); } 
	 EOF 
;

// Rule AAdditiveExpression
ruleAAdditiveExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAAdditiveExpressionAccess().getGroup()); }
(rule__AAdditiveExpression__Group__0)
{ after(grammarAccess.getAAdditiveExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAMultiplicativeExpression
entryRuleAMultiplicativeExpression 
:
{ before(grammarAccess.getAMultiplicativeExpressionRule()); }
	 ruleAMultiplicativeExpression
{ after(grammarAccess.getAMultiplicativeExpressionRule()); } 
	 EOF 
;

// Rule AMultiplicativeExpression
ruleAMultiplicativeExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAMultiplicativeExpressionAccess().getGroup()); }
(rule__AMultiplicativeExpression__Group__0)
{ after(grammarAccess.getAMultiplicativeExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAMinMaxExpression
entryRuleAMinMaxExpression 
:
{ before(grammarAccess.getAMinMaxExpressionRule()); }
	 ruleAMinMaxExpression
{ after(grammarAccess.getAMinMaxExpressionRule()); } 
	 EOF 
;

// Rule AMinMaxExpression
ruleAMinMaxExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAMinMaxExpressionAccess().getGroup()); }
(rule__AMinMaxExpression__Group__0)
{ after(grammarAccess.getAMinMaxExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAUnaryOrTerminalExpression
entryRuleAUnaryOrTerminalExpression 
:
{ before(grammarAccess.getAUnaryOrTerminalExpressionRule()); }
	 ruleAUnaryOrTerminalExpression
{ after(grammarAccess.getAUnaryOrTerminalExpressionRule()); } 
	 EOF 
;

// Rule AUnaryOrTerminalExpression
ruleAUnaryOrTerminalExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAUnaryOrTerminalExpressionAccess().getAlternatives()); }
(rule__AUnaryOrTerminalExpression__Alternatives)
{ after(grammarAccess.getAUnaryOrTerminalExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAUnaryExpression
entryRuleAUnaryExpression 
:
{ before(grammarAccess.getAUnaryExpressionRule()); }
	 ruleAUnaryExpression
{ after(grammarAccess.getAUnaryExpressionRule()); } 
	 EOF 
;

// Rule AUnaryExpression
ruleAUnaryExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAUnaryExpressionAccess().getAlternatives()); }
(rule__AUnaryExpression__Alternatives)
{ after(grammarAccess.getAUnaryExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleANotExpression
entryRuleANotExpression 
:
{ before(grammarAccess.getANotExpressionRule()); }
	 ruleANotExpression
{ after(grammarAccess.getANotExpressionRule()); } 
	 EOF 
;

// Rule ANotExpression
ruleANotExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getANotExpressionAccess().getGroup()); }
(rule__ANotExpression__Group__0)
{ after(grammarAccess.getANotExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleANegateExpression
entryRuleANegateExpression 
:
{ before(grammarAccess.getANegateExpressionRule()); }
	 ruleANegateExpression
{ after(grammarAccess.getANegateExpressionRule()); } 
	 EOF 
;

// Rule ANegateExpression
ruleANegateExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getANegateExpressionAccess().getGroup()); }
(rule__ANegateExpression__Group__0)
{ after(grammarAccess.getANegateExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleACaseExpression
entryRuleACaseExpression 
:
{ before(grammarAccess.getACaseExpressionRule()); }
	 ruleACaseExpression
{ after(grammarAccess.getACaseExpressionRule()); } 
	 EOF 
;

// Rule ACaseExpression
ruleACaseExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getACaseExpressionAccess().getGroup()); }
(rule__ACaseExpression__Group__0)
{ after(grammarAccess.getACaseExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleADependenceExpression
entryRuleADependenceExpression 
:
{ before(grammarAccess.getADependenceExpressionRule()); }
	 ruleADependenceExpression
{ after(grammarAccess.getADependenceExpressionRule()); } 
	 EOF 
;

// Rule ADependenceExpression
ruleADependenceExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getADependenceExpressionAccess().getGroup()); }
(rule__ADependenceExpression__Group__0)
{ after(grammarAccess.getADependenceExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleADependenceInArrayNotation
entryRuleADependenceInArrayNotation 
:
{ before(grammarAccess.getADependenceInArrayNotationRule()); }
	 ruleADependenceInArrayNotation
{ after(grammarAccess.getADependenceInArrayNotationRule()); } 
	 EOF 
;

// Rule ADependenceInArrayNotation
ruleADependenceInArrayNotation
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getADependenceInArrayNotationAccess().getGroup()); }
(rule__ADependenceInArrayNotation__Group__0)
{ after(grammarAccess.getADependenceInArrayNotationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAIfExpression
entryRuleAIfExpression 
:
{ before(grammarAccess.getAIfExpressionRule()); }
	 ruleAIfExpression
{ after(grammarAccess.getAIfExpressionRule()); } 
	 EOF 
;

// Rule AIfExpression
ruleAIfExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAIfExpressionAccess().getGroup()); }
(rule__AIfExpression__Group__0)
{ after(grammarAccess.getAIfExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAIndexExpression
entryRuleAIndexExpression 
:
{ before(grammarAccess.getAIndexExpressionRule()); }
	 ruleAIndexExpression
{ after(grammarAccess.getAIndexExpressionRule()); } 
	 EOF 
;

// Rule AIndexExpression
ruleAIndexExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAIndexExpressionAccess().getAlternatives()); }
(rule__AIndexExpression__Alternatives)
{ after(grammarAccess.getAIndexExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAReduceExpression
entryRuleAReduceExpression 
:
{ before(grammarAccess.getAReduceExpressionRule()); }
	 ruleAReduceExpression
{ after(grammarAccess.getAReduceExpressionRule()); } 
	 EOF 
;

// Rule AReduceExpression
ruleAReduceExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAReduceExpressionAccess().getGroup()); }
(rule__AReduceExpression__Group__0)
{ after(grammarAccess.getAReduceExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleARestrictExpression
entryRuleARestrictExpression 
:
{ before(grammarAccess.getARestrictExpressionRule()); }
	 ruleARestrictExpression
{ after(grammarAccess.getARestrictExpressionRule()); } 
	 EOF 
;

// Rule ARestrictExpression
ruleARestrictExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getARestrictExpressionAccess().getGroup()); }
(rule__ARestrictExpression__Group__0)
{ after(grammarAccess.getARestrictExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAVariableExpression
entryRuleAVariableExpression 
:
{ before(grammarAccess.getAVariableExpressionRule()); }
	 ruleAVariableExpression
{ after(grammarAccess.getAVariableExpressionRule()); } 
	 EOF 
;

// Rule AVariableExpression
ruleAVariableExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAVariableExpressionAccess().getVarAssignment()); }
(rule__AVariableExpression__VarAssignment)
{ after(grammarAccess.getAVariableExpressionAccess().getVarAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAConstantExpression
entryRuleAConstantExpression 
:
{ before(grammarAccess.getAConstantExpressionRule()); }
	 ruleAConstantExpression
{ after(grammarAccess.getAConstantExpressionRule()); } 
	 EOF 
;

// Rule AConstantExpression
ruleAConstantExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAConstantExpressionAccess().getAlternatives()); }
(rule__AConstantExpression__Alternatives)
{ after(grammarAccess.getAConstantExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleABooleanExpression
entryRuleABooleanExpression 
:
{ before(grammarAccess.getABooleanExpressionRule()); }
	 ruleABooleanExpression
{ after(grammarAccess.getABooleanExpressionRule()); } 
	 EOF 
;

// Rule ABooleanExpression
ruleABooleanExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getABooleanExpressionAccess().getValueAssignment()); }
(rule__ABooleanExpression__ValueAssignment)
{ after(grammarAccess.getABooleanExpressionAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAIntegerExpression
entryRuleAIntegerExpression 
:
{ before(grammarAccess.getAIntegerExpressionRule()); }
	 ruleAIntegerExpression
{ after(grammarAccess.getAIntegerExpressionRule()); } 
	 EOF 
;

// Rule AIntegerExpression
ruleAIntegerExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAIntegerExpressionAccess().getValueAssignment()); }
(rule__AIntegerExpression__ValueAssignment)
{ after(grammarAccess.getAIntegerExpressionAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleARealExpression
entryRuleARealExpression 
:
{ before(grammarAccess.getARealExpressionRule()); }
	 ruleARealExpression
{ after(grammarAccess.getARealExpressionRule()); } 
	 EOF 
;

// Rule ARealExpression
ruleARealExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getARealExpressionAccess().getValueAssignment()); }
(rule__ARealExpression__ValueAssignment)
{ after(grammarAccess.getARealExpressionAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAMultiArgExpression
entryRuleAMultiArgExpression 
:
{ before(grammarAccess.getAMultiArgExpressionRule()); }
	 ruleAMultiArgExpression
{ after(grammarAccess.getAMultiArgExpressionRule()); } 
	 EOF 
;

// Rule AMultiArgExpression
ruleAMultiArgExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAMultiArgExpressionAccess().getAlternatives()); }
(rule__AMultiArgExpression__Alternatives)
{ after(grammarAccess.getAMultiArgExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAMultiArgArithmeticExpression
entryRuleAMultiArgArithmeticExpression 
:
{ before(grammarAccess.getAMultiArgArithmeticExpressionRule()); }
	 ruleAMultiArgArithmeticExpression
{ after(grammarAccess.getAMultiArgArithmeticExpressionRule()); } 
	 EOF 
;

// Rule AMultiArgArithmeticExpression
ruleAMultiArgArithmeticExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAMultiArgArithmeticExpressionAccess().getGroup()); }
(rule__AMultiArgArithmeticExpression__Group__0)
{ after(grammarAccess.getAMultiArgArithmeticExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAMultiArgLogicalExpression
entryRuleAMultiArgLogicalExpression 
:
{ before(grammarAccess.getAMultiArgLogicalExpressionRule()); }
	 ruleAMultiArgLogicalExpression
{ after(grammarAccess.getAMultiArgLogicalExpressionRule()); } 
	 EOF 
;

// Rule AMultiArgLogicalExpression
ruleAMultiArgLogicalExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAMultiArgLogicalExpressionAccess().getGroup()); }
(rule__AMultiArgLogicalExpression__Group__0)
{ after(grammarAccess.getAMultiArgLogicalExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAExternalFunctionCall
entryRuleAExternalFunctionCall 
:
{ before(grammarAccess.getAExternalFunctionCallRule()); }
	 ruleAExternalFunctionCall
{ after(grammarAccess.getAExternalFunctionCallRule()); } 
	 EOF 
;

// Rule AExternalFunctionCall
ruleAExternalFunctionCall
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAExternalFunctionCallAccess().getGroup()); }
(rule__AExternalFunctionCall__Group__0)
{ after(grammarAccess.getAExternalFunctionCallAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleIndexIdentifier
entryRuleIndexIdentifier 
:
{ before(grammarAccess.getIndexIdentifierRule()); }
	 ruleIndexIdentifier
{ after(grammarAccess.getIndexIdentifierRule()); } 
	 EOF 
;

// Rule IndexIdentifier
ruleIndexIdentifier
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIndexIdentifierAccess().getIDTerminalRuleCall()); }
	RULE_ID
{ after(grammarAccess.getIndexIdentifierAccess().getIDTerminalRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAIndexList
entryRuleAIndexList 
:
{ before(grammarAccess.getAIndexListRule()); }
	 ruleAIndexList
{ after(grammarAccess.getAIndexListRule()); } 
	 EOF 
;

// Rule AIndexList
ruleAIndexList
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAIndexListAccess().getGroup()); }
(rule__AIndexList__Group__0)
{ after(grammarAccess.getAIndexListAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleIndexAffineExpression
entryRuleIndexAffineExpression 
:
{ before(grammarAccess.getIndexAffineExpressionRule()); }
	 ruleIndexAffineExpression
{ after(grammarAccess.getIndexAffineExpressionRule()); } 
	 EOF 
;

// Rule IndexAffineExpression
ruleIndexAffineExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIndexAffineExpressionAccess().getGroup()); }
(rule__IndexAffineExpression__Group__0)
{ after(grammarAccess.getIndexAffineExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleIndexAffineExpressionTerminal
entryRuleIndexAffineExpressionTerminal 
:
{ before(grammarAccess.getIndexAffineExpressionTerminalRule()); }
	 ruleIndexAffineExpressionTerminal
{ after(grammarAccess.getIndexAffineExpressionTerminalRule()); } 
	 EOF 
;

// Rule IndexAffineExpressionTerminal
ruleIndexAffineExpressionTerminal
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIndexAffineExpressionTerminalAccess().getAlternatives()); }
(rule__IndexAffineExpressionTerminal__Alternatives)
{ after(grammarAccess.getIndexAffineExpressionTerminalAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAIndexAffineExpressionList
entryRuleAIndexAffineExpressionList 
:
{ before(grammarAccess.getAIndexAffineExpressionListRule()); }
	 ruleAIndexAffineExpressionList
{ after(grammarAccess.getAIndexAffineExpressionListRule()); } 
	 EOF 
;

// Rule AIndexAffineExpressionList
ruleAIndexAffineExpressionList
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAIndexAffineExpressionListAccess().getGroup()); }
(rule__AIndexAffineExpressionList__Group__0)
{ after(grammarAccess.getAIndexAffineExpressionListAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAFunction
entryRuleAFunction 
:
{ before(grammarAccess.getAFunctionRule()); }
	 ruleAFunction
{ after(grammarAccess.getAFunctionRule()); } 
	 EOF 
;

// Rule AFunction
ruleAFunction
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAFunctionAccess().getAlternatives()); }
(rule__AFunction__Alternatives)
{ after(grammarAccess.getAFunctionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAFunctionInArrayNotation
entryRuleAFunctionInArrayNotation 
:
{ before(grammarAccess.getAFunctionInArrayNotationRule()); }
	 ruleAFunctionInArrayNotation
{ after(grammarAccess.getAFunctionInArrayNotationRule()); } 
	 EOF 
;

// Rule AFunctionInArrayNotation
ruleAFunctionInArrayNotation
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAFunctionInArrayNotationAccess().getGroup()); }
(rule__AFunctionInArrayNotation__Group__0)
{ after(grammarAccess.getAFunctionInArrayNotationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAType
entryRuleAType 
:
{ before(grammarAccess.getATypeRule()); }
	 ruleAType
{ after(grammarAccess.getATypeRule()); } 
	 EOF 
;

// Rule AType
ruleAType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getATypeAccess().getGroup()); }
(rule__AType__Group__0)
{ after(grammarAccess.getATypeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleATypeInteger
entryRuleATypeInteger 
:
{ before(grammarAccess.getATypeIntegerRule()); }
	 ruleATypeInteger
{ after(grammarAccess.getATypeIntegerRule()); } 
	 EOF 
;

// Rule ATypeInteger
ruleATypeInteger
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getATypeIntegerAccess().getAlternatives()); }
(rule__ATypeInteger__Alternatives)
{ after(grammarAccess.getATypeIntegerAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleATypeBoolean
entryRuleATypeBoolean 
:
{ before(grammarAccess.getATypeBooleanRule()); }
	 ruleATypeBoolean
{ after(grammarAccess.getATypeBooleanRule()); } 
	 EOF 
;

// Rule ATypeBoolean
ruleATypeBoolean
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getATypeBooleanAccess().getBoolKeyword()); }

	'bool' 

{ after(grammarAccess.getATypeBooleanAccess().getBoolKeyword()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleATypeFloat
entryRuleATypeFloat 
:
{ before(grammarAccess.getATypeFloatRule()); }
	 ruleATypeFloat
{ after(grammarAccess.getATypeFloatRule()); } 
	 EOF 
;

// Rule ATypeFloat
ruleATypeFloat
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getATypeFloatAccess().getAlternatives()); }
(rule__ATypeFloat__Alternatives)
{ after(grammarAccess.getATypeFloatAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleATypeChar
entryRuleATypeChar 
:
{ before(grammarAccess.getATypeCharRule()); }
	 ruleATypeChar
{ after(grammarAccess.getATypeCharRule()); } 
	 EOF 
;

// Rule ATypeChar
ruleATypeChar
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getATypeCharAccess().getCharKeyword()); }

	'char' 

{ after(grammarAccess.getATypeCharAccess().getCharKeyword()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleReductionOp
entryRuleReductionOp 
:
{ before(grammarAccess.getReductionOpRule()); }
	 ruleReductionOp
{ after(grammarAccess.getReductionOpRule()); } 
	 EOF 
;

// Rule ReductionOp
ruleReductionOp
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getReductionOpAccess().getAlternatives()); }
(rule__ReductionOp__Alternatives)
{ after(grammarAccess.getReductionOpAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleArithmeticOp
entryRuleArithmeticOp 
:
{ before(grammarAccess.getArithmeticOpRule()); }
	 ruleArithmeticOp
{ after(grammarAccess.getArithmeticOpRule()); } 
	 EOF 
;

// Rule ArithmeticOp
ruleArithmeticOp
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getArithmeticOpAccess().getAlternatives()); }
(rule__ArithmeticOp__Alternatives)
{ after(grammarAccess.getArithmeticOpAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLogicalOp
entryRuleLogicalOp 
:
{ before(grammarAccess.getLogicalOpRule()); }
	 ruleLogicalOp
{ after(grammarAccess.getLogicalOpRule()); } 
	 EOF 
;

// Rule LogicalOp
ruleLogicalOp
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLogicalOpAccess().getAlternatives()); }
(rule__LogicalOp__Alternatives)
{ after(grammarAccess.getLogicalOpAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRelationalOp
entryRuleRelationalOp 
:
{ before(grammarAccess.getRelationalOpRule()); }
	 ruleRelationalOp
{ after(grammarAccess.getRelationalOpRule()); } 
	 EOF 
;

// Rule RelationalOp
ruleRelationalOp
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRelationalOpAccess().getAlternatives()); }
(rule__RelationalOp__Alternatives)
{ after(grammarAccess.getRelationalOpAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__InEquality__Alternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInEqualityAccess().getIDListParserRuleCall_0_0()); }
	ruleIDList
{ after(grammarAccess.getInEqualityAccess().getIDListParserRuleCall_0_0()); }
)

    |(
{ before(grammarAccess.getInEqualityAccess().getIDExpressionParserRuleCall_0_1()); }
	ruleIDExpression
{ after(grammarAccess.getInEqualityAccess().getIDExpressionParserRuleCall_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InEquality__Alternatives_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInEqualityAccess().getIDListParserRuleCall_1_1_0()); }
	ruleIDList
{ after(grammarAccess.getInEqualityAccess().getIDListParserRuleCall_1_1_0()); }
)

    |(
{ before(grammarAccess.getInEqualityAccess().getIDExpressionParserRuleCall_1_1_1()); }
	ruleIDExpression
{ after(grammarAccess.getInEqualityAccess().getIDExpressionParserRuleCall_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IDList__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIDListAccess().getGroup_0()); }
(rule__IDList__Group_0__0)
{ after(grammarAccess.getIDListAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getIDListAccess().getGroup_1()); }
(rule__IDList__Group_1__0)
{ after(grammarAccess.getIDListAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IDExpression__Alternatives_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIDExpressionAccess().getOP_PLUSTerminalRuleCall_1_0_0()); }
	RULE_OP_PLUS
{ after(grammarAccess.getIDExpressionAccess().getOP_PLUSTerminalRuleCall_1_0_0()); }
)

    |(
{ before(grammarAccess.getIDExpressionAccess().getOP_MINUSTerminalRuleCall_1_0_1()); }
	RULE_OP_MINUS
{ after(grammarAccess.getIDExpressionAccess().getOP_MINUSTerminalRuleCall_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InEqID__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getInEqIDAccess().getINTTerminalRuleCall_1_0()); }
(	RULE_INT)
{ after(grammarAccess.getInEqIDAccess().getINTTerminalRuleCall_1_0()); }
)
(
{ before(grammarAccess.getInEqIDAccess().getINTTerminalRuleCall_1_0()); }
(	RULE_INT)*
{ after(grammarAccess.getInEqIDAccess().getINTTerminalRuleCall_1_0()); }
)
)

    |(
{ before(grammarAccess.getInEqIDAccess().getGroup_1_1()); }
(rule__InEqID__Group_1_1__0)
{ after(grammarAccess.getInEqIDAccess().getGroup_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AAlphabetsExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAAlphabetsExpressionAccess().getAIfExpressionParserRuleCall_0()); }
	ruleAIfExpression
{ after(grammarAccess.getAAlphabetsExpressionAccess().getAIfExpressionParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getAAlphabetsExpressionAccess().getARestrictExpressionParserRuleCall_1()); }
	ruleARestrictExpression
{ after(grammarAccess.getAAlphabetsExpressionAccess().getARestrictExpressionParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getAAlphabetsExpressionAccess().getAOrExpressionParserRuleCall_2()); }
	ruleAOrExpression
{ after(grammarAccess.getAAlphabetsExpressionAccess().getAOrExpressionParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AAlphabetsTerminalExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAAlphabetsTerminalExpressionAccess().getAParanthesizedAlphabetsExpressionParserRuleCall_0()); }
	ruleAParanthesizedAlphabetsExpression
{ after(grammarAccess.getAAlphabetsTerminalExpressionAccess().getAParanthesizedAlphabetsExpressionParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getAAlphabetsTerminalExpressionAccess().getACaseExpressionParserRuleCall_1()); }
	ruleACaseExpression
{ after(grammarAccess.getAAlphabetsTerminalExpressionAccess().getACaseExpressionParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getAAlphabetsTerminalExpressionAccess().getAReduceExpressionParserRuleCall_2()); }
	ruleAReduceExpression
{ after(grammarAccess.getAAlphabetsTerminalExpressionAccess().getAReduceExpressionParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getAAlphabetsTerminalExpressionAccess().getAMultiArgExpressionParserRuleCall_3()); }
	ruleAMultiArgExpression
{ after(grammarAccess.getAAlphabetsTerminalExpressionAccess().getAMultiArgExpressionParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getAAlphabetsTerminalExpressionAccess().getAConstantExpressionParserRuleCall_4()); }
	ruleAConstantExpression
{ after(grammarAccess.getAAlphabetsTerminalExpressionAccess().getAConstantExpressionParserRuleCall_4()); }
)

    |(
{ before(grammarAccess.getAAlphabetsTerminalExpressionAccess().getAVariableExpressionParserRuleCall_5()); }
	ruleAVariableExpression
{ after(grammarAccess.getAAlphabetsTerminalExpressionAccess().getAVariableExpressionParserRuleCall_5()); }
)

    |(
{ before(grammarAccess.getAAlphabetsTerminalExpressionAccess().getAIndexExpressionParserRuleCall_6()); }
	ruleAIndexExpression
{ after(grammarAccess.getAAlphabetsTerminalExpressionAccess().getAIndexExpressionParserRuleCall_6()); }
)

    |(
{ before(grammarAccess.getAAlphabetsTerminalExpressionAccess().getADependenceExpressionParserRuleCall_7()); }
	ruleADependenceExpression
{ after(grammarAccess.getAAlphabetsTerminalExpressionAccess().getADependenceExpressionParserRuleCall_7()); }
)

    |(
{ before(grammarAccess.getAAlphabetsTerminalExpressionAccess().getADependenceInArrayNotationParserRuleCall_8()); }
	ruleADependenceInArrayNotation
{ after(grammarAccess.getAAlphabetsTerminalExpressionAccess().getADependenceInArrayNotationParserRuleCall_8()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AOrExpression__OperatorAlternatives_1_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAOrExpressionAccess().getOperatorOP_ORTerminalRuleCall_1_1_0_0()); }
	RULE_OP_OR
{ after(grammarAccess.getAOrExpressionAccess().getOperatorOP_ORTerminalRuleCall_1_1_0_0()); }
)

    |(
{ before(grammarAccess.getAOrExpressionAccess().getOperatorXOP_ORTerminalRuleCall_1_1_0_1()); }
	RULE_XOP_OR
{ after(grammarAccess.getAOrExpressionAccess().getOperatorXOP_ORTerminalRuleCall_1_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AAndExpression__OperatorAlternatives_1_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAAndExpressionAccess().getOperatorOP_ANDTerminalRuleCall_1_1_0_0()); }
	RULE_OP_AND
{ after(grammarAccess.getAAndExpressionAccess().getOperatorOP_ANDTerminalRuleCall_1_1_0_0()); }
)

    |(
{ before(grammarAccess.getAAndExpressionAccess().getOperatorOP_NANDTerminalRuleCall_1_1_0_1()); }
	RULE_OP_NAND
{ after(grammarAccess.getAAndExpressionAccess().getOperatorOP_NANDTerminalRuleCall_1_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AAdditiveExpression__OpAlternatives_1_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAAdditiveExpressionAccess().getOpOP_PLUSTerminalRuleCall_1_1_0_0()); }
	RULE_OP_PLUS
{ after(grammarAccess.getAAdditiveExpressionAccess().getOpOP_PLUSTerminalRuleCall_1_1_0_0()); }
)

    |(
{ before(grammarAccess.getAAdditiveExpressionAccess().getOpOP_MINUSTerminalRuleCall_1_1_0_1()); }
	RULE_OP_MINUS
{ after(grammarAccess.getAAdditiveExpressionAccess().getOpOP_MINUSTerminalRuleCall_1_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AMultiplicativeExpression__OpAlternatives_1_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAMultiplicativeExpressionAccess().getOpOP_MULTerminalRuleCall_1_1_0_0()); }
	RULE_OP_MUL
{ after(grammarAccess.getAMultiplicativeExpressionAccess().getOpOP_MULTerminalRuleCall_1_1_0_0()); }
)

    |(
{ before(grammarAccess.getAMultiplicativeExpressionAccess().getOpOP_DIVTerminalRuleCall_1_1_0_1()); }
	RULE_OP_DIV
{ after(grammarAccess.getAMultiplicativeExpressionAccess().getOpOP_DIVTerminalRuleCall_1_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AMinMaxExpression__OpAlternatives_1_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAMinMaxExpressionAccess().getOpOP_MINTerminalRuleCall_1_1_0_0()); }
	RULE_OP_MIN
{ after(grammarAccess.getAMinMaxExpressionAccess().getOpOP_MINTerminalRuleCall_1_1_0_0()); }
)

    |(
{ before(grammarAccess.getAMinMaxExpressionAccess().getOpOP_MAXTerminalRuleCall_1_1_0_1()); }
	RULE_OP_MAX
{ after(grammarAccess.getAMinMaxExpressionAccess().getOpOP_MAXTerminalRuleCall_1_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AUnaryOrTerminalExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAUnaryOrTerminalExpressionAccess().getAUnaryExpressionParserRuleCall_0()); }
	ruleAUnaryExpression
{ after(grammarAccess.getAUnaryOrTerminalExpressionAccess().getAUnaryExpressionParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getAUnaryOrTerminalExpressionAccess().getAAlphabetsTerminalExpressionParserRuleCall_1()); }
	ruleAAlphabetsTerminalExpression
{ after(grammarAccess.getAUnaryOrTerminalExpressionAccess().getAAlphabetsTerminalExpressionParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AUnaryExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAUnaryExpressionAccess().getANotExpressionParserRuleCall_0()); }
	ruleANotExpression
{ after(grammarAccess.getAUnaryExpressionAccess().getANotExpressionParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getAUnaryExpressionAccess().getANegateExpressionParserRuleCall_1()); }
	ruleANegateExpression
{ after(grammarAccess.getAUnaryExpressionAccess().getANegateExpressionParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AIndexExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAIndexExpressionAccess().getGroup_0()); }
(rule__AIndexExpression__Group_0__0)
{ after(grammarAccess.getAIndexExpressionAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getAIndexExpressionAccess().getGroup_1()); }
(rule__AIndexExpression__Group_1__0)
{ after(grammarAccess.getAIndexExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AReduceExpression__ProjectionAlternatives_4_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAReduceExpressionAccess().getProjectionAFunctionParserRuleCall_4_0_0()); }
	ruleAFunction
{ after(grammarAccess.getAReduceExpressionAccess().getProjectionAFunctionParserRuleCall_4_0_0()); }
)

    |(
{ before(grammarAccess.getAReduceExpressionAccess().getProjectionAFunctionInArrayNotationParserRuleCall_4_0_1()); }
	ruleAFunctionInArrayNotation
{ after(grammarAccess.getAReduceExpressionAccess().getProjectionAFunctionInArrayNotationParserRuleCall_4_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AConstantExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAConstantExpressionAccess().getABooleanExpressionParserRuleCall_0()); }
	ruleABooleanExpression
{ after(grammarAccess.getAConstantExpressionAccess().getABooleanExpressionParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getAConstantExpressionAccess().getARealExpressionParserRuleCall_1()); }
	ruleARealExpression
{ after(grammarAccess.getAConstantExpressionAccess().getARealExpressionParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getAConstantExpressionAccess().getAIntegerExpressionParserRuleCall_2()); }
	ruleAIntegerExpression
{ after(grammarAccess.getAConstantExpressionAccess().getAIntegerExpressionParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AMultiArgExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAMultiArgExpressionAccess().getAMultiArgArithmeticExpressionParserRuleCall_0()); }
	ruleAMultiArgArithmeticExpression
{ after(grammarAccess.getAMultiArgExpressionAccess().getAMultiArgArithmeticExpressionParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getAMultiArgExpressionAccess().getAMultiArgLogicalExpressionParserRuleCall_1()); }
	ruleAMultiArgLogicalExpression
{ after(grammarAccess.getAMultiArgExpressionAccess().getAMultiArgLogicalExpressionParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getAMultiArgExpressionAccess().getAExternalFunctionCallParserRuleCall_2()); }
	ruleAExternalFunctionCall
{ after(grammarAccess.getAMultiArgExpressionAccess().getAExternalFunctionCallParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IndexAffineExpression__Alternatives_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIndexAffineExpressionAccess().getOP_PLUSTerminalRuleCall_2_0_0()); }
	RULE_OP_PLUS
{ after(grammarAccess.getIndexAffineExpressionAccess().getOP_PLUSTerminalRuleCall_2_0_0()); }
)

    |(
{ before(grammarAccess.getIndexAffineExpressionAccess().getOP_MINUSTerminalRuleCall_2_0_1()); }
	RULE_OP_MINUS
{ after(grammarAccess.getIndexAffineExpressionAccess().getOP_MINUSTerminalRuleCall_2_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IndexAffineExpressionTerminal__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIndexAffineExpressionTerminalAccess().getINTTerminalRuleCall_0()); }
	RULE_INT
{ after(grammarAccess.getIndexAffineExpressionTerminalAccess().getINTTerminalRuleCall_0()); }
)

    |(
{ before(grammarAccess.getIndexAffineExpressionTerminalAccess().getGroup_1()); }
(rule__IndexAffineExpressionTerminal__Group_1__0)
{ after(grammarAccess.getIndexAffineExpressionTerminalAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AFunction__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAFunctionAccess().getGroup_0()); }
(rule__AFunction__Group_0__0)
{ after(grammarAccess.getAFunctionAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getAFunctionAccess().getGroup_1()); }
(rule__AFunction__Group_1__0)
{ after(grammarAccess.getAFunctionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AType__TypeAlternatives_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getATypeAccess().getTypeATypeIntegerParserRuleCall_1_0_0()); }
	ruleATypeInteger
{ after(grammarAccess.getATypeAccess().getTypeATypeIntegerParserRuleCall_1_0_0()); }
)

    |(
{ before(grammarAccess.getATypeAccess().getTypeATypeFloatParserRuleCall_1_0_1()); }
	ruleATypeFloat
{ after(grammarAccess.getATypeAccess().getTypeATypeFloatParserRuleCall_1_0_1()); }
)

    |(
{ before(grammarAccess.getATypeAccess().getTypeATypeBooleanParserRuleCall_1_0_2()); }
	ruleATypeBoolean
{ after(grammarAccess.getATypeAccess().getTypeATypeBooleanParserRuleCall_1_0_2()); }
)

    |(
{ before(grammarAccess.getATypeAccess().getTypeATypeCharParserRuleCall_1_0_3()); }
	ruleATypeChar
{ after(grammarAccess.getATypeAccess().getTypeATypeCharParserRuleCall_1_0_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ATypeInteger__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getATypeIntegerAccess().getIntKeyword_0()); }

	'int' 

{ after(grammarAccess.getATypeIntegerAccess().getIntKeyword_0()); }
)

    |(
{ before(grammarAccess.getATypeIntegerAccess().getLonglongKeyword_1()); }

	'longlong' 

{ after(grammarAccess.getATypeIntegerAccess().getLonglongKeyword_1()); }
)

    |(
{ before(grammarAccess.getATypeIntegerAccess().getLongKeyword_2()); }

	'long' 

{ after(grammarAccess.getATypeIntegerAccess().getLongKeyword_2()); }
)

    |(
{ before(grammarAccess.getATypeIntegerAccess().getShortKeyword_3()); }

	'short' 

{ after(grammarAccess.getATypeIntegerAccess().getShortKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ATypeFloat__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getATypeFloatAccess().getFloatKeyword_0()); }

	'float' 

{ after(grammarAccess.getATypeFloatAccess().getFloatKeyword_0()); }
)

    |(
{ before(grammarAccess.getATypeFloatAccess().getDoubleKeyword_1()); }

	'double' 

{ after(grammarAccess.getATypeFloatAccess().getDoubleKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ReductionOp__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReductionOpAccess().getOP_ANDTerminalRuleCall_0()); }
	RULE_OP_AND
{ after(grammarAccess.getReductionOpAccess().getOP_ANDTerminalRuleCall_0()); }
)

    |(
{ before(grammarAccess.getReductionOpAccess().getOP_MAXTerminalRuleCall_1()); }
	RULE_OP_MAX
{ after(grammarAccess.getReductionOpAccess().getOP_MAXTerminalRuleCall_1()); }
)

    |(
{ before(grammarAccess.getReductionOpAccess().getOP_MINTerminalRuleCall_2()); }
	RULE_OP_MIN
{ after(grammarAccess.getReductionOpAccess().getOP_MINTerminalRuleCall_2()); }
)

    |(
{ before(grammarAccess.getReductionOpAccess().getOP_MULTerminalRuleCall_3()); }
	RULE_OP_MUL
{ after(grammarAccess.getReductionOpAccess().getOP_MULTerminalRuleCall_3()); }
)

    |(
{ before(grammarAccess.getReductionOpAccess().getOP_ORTerminalRuleCall_4()); }
	RULE_OP_OR
{ after(grammarAccess.getReductionOpAccess().getOP_ORTerminalRuleCall_4()); }
)

    |(
{ before(grammarAccess.getReductionOpAccess().getOP_PLUSTerminalRuleCall_5()); }
	RULE_OP_PLUS
{ after(grammarAccess.getReductionOpAccess().getOP_PLUSTerminalRuleCall_5()); }
)

    |(
{ before(grammarAccess.getReductionOpAccess().getXOP_ORTerminalRuleCall_6()); }
	RULE_XOP_OR
{ after(grammarAccess.getReductionOpAccess().getXOP_ORTerminalRuleCall_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ArithmeticOp__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArithmeticOpAccess().getOP_MAXTerminalRuleCall_0()); }
	RULE_OP_MAX
{ after(grammarAccess.getArithmeticOpAccess().getOP_MAXTerminalRuleCall_0()); }
)

    |(
{ before(grammarAccess.getArithmeticOpAccess().getOP_MINTerminalRuleCall_1()); }
	RULE_OP_MIN
{ after(grammarAccess.getArithmeticOpAccess().getOP_MINTerminalRuleCall_1()); }
)

    |(
{ before(grammarAccess.getArithmeticOpAccess().getOP_MULTerminalRuleCall_2()); }
	RULE_OP_MUL
{ after(grammarAccess.getArithmeticOpAccess().getOP_MULTerminalRuleCall_2()); }
)

    |(
{ before(grammarAccess.getArithmeticOpAccess().getOP_PLUSTerminalRuleCall_3()); }
	RULE_OP_PLUS
{ after(grammarAccess.getArithmeticOpAccess().getOP_PLUSTerminalRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalOp__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalOpAccess().getOP_ANDTerminalRuleCall_0()); }
	RULE_OP_AND
{ after(grammarAccess.getLogicalOpAccess().getOP_ANDTerminalRuleCall_0()); }
)

    |(
{ before(grammarAccess.getLogicalOpAccess().getOP_ORTerminalRuleCall_1()); }
	RULE_OP_OR
{ after(grammarAccess.getLogicalOpAccess().getOP_ORTerminalRuleCall_1()); }
)

    |(
{ before(grammarAccess.getLogicalOpAccess().getXOP_ORTerminalRuleCall_2()); }
	RULE_XOP_OR
{ after(grammarAccess.getLogicalOpAccess().getXOP_ORTerminalRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalOp__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalOpAccess().getOP_EQTerminalRuleCall_0()); }
	RULE_OP_EQ
{ after(grammarAccess.getRelationalOpAccess().getOP_EQTerminalRuleCall_0()); }
)

    |(
{ before(grammarAccess.getRelationalOpAccess().getOP_GETerminalRuleCall_1()); }
	RULE_OP_GE
{ after(grammarAccess.getRelationalOpAccess().getOP_GETerminalRuleCall_1()); }
)

    |(
{ before(grammarAccess.getRelationalOpAccess().getOP_GTTerminalRuleCall_2()); }
	RULE_OP_GT
{ after(grammarAccess.getRelationalOpAccess().getOP_GTTerminalRuleCall_2()); }
)

    |(
{ before(grammarAccess.getRelationalOpAccess().getOP_LETerminalRuleCall_3()); }
	RULE_OP_LE
{ after(grammarAccess.getRelationalOpAccess().getOP_LETerminalRuleCall_3()); }
)

    |(
{ before(grammarAccess.getRelationalOpAccess().getOP_LTTerminalRuleCall_4()); }
	RULE_OP_LT
{ after(grammarAccess.getRelationalOpAccess().getOP_LTTerminalRuleCall_4()); }
)

    |(
{ before(grammarAccess.getRelationalOpAccess().getOP_NETerminalRuleCall_5()); }
	RULE_OP_NE
{ after(grammarAccess.getRelationalOpAccess().getOP_NETerminalRuleCall_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__AProgram__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AProgram__Group__0__Impl
	rule__AProgram__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AProgram__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAProgramAccess().getExternalFunctionsAssignment_0()); }
(rule__AProgram__ExternalFunctionsAssignment_0)*
{ after(grammarAccess.getAProgramAccess().getExternalFunctionsAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AProgram__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AProgram__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AProgram__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getAProgramAccess().getSystemsAssignment_1()); }
(rule__AProgram__SystemsAssignment_1)
{ after(grammarAccess.getAProgramAccess().getSystemsAssignment_1()); }
)
(
{ before(grammarAccess.getAProgramAccess().getSystemsAssignment_1()); }
(rule__AProgram__SystemsAssignment_1)*
{ after(grammarAccess.getAProgramAccess().getSystemsAssignment_1()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AExternalFunctionDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AExternalFunctionDeclaration__Group__0__Impl
	rule__AExternalFunctionDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AExternalFunctionDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAExternalFunctionDeclarationAccess().getOutputAssignment_0()); }
(rule__AExternalFunctionDeclaration__OutputAssignment_0)
{ after(grammarAccess.getAExternalFunctionDeclarationAccess().getOutputAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AExternalFunctionDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AExternalFunctionDeclaration__Group__1__Impl
	rule__AExternalFunctionDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AExternalFunctionDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAExternalFunctionDeclarationAccess().getNameAssignment_1()); }
(rule__AExternalFunctionDeclaration__NameAssignment_1)
{ after(grammarAccess.getAExternalFunctionDeclarationAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AExternalFunctionDeclaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AExternalFunctionDeclaration__Group__2__Impl
	rule__AExternalFunctionDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__AExternalFunctionDeclaration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAExternalFunctionDeclarationAccess().getLeftParenthesisKeyword_2()); }

	'(' 

{ after(grammarAccess.getAExternalFunctionDeclarationAccess().getLeftParenthesisKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AExternalFunctionDeclaration__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AExternalFunctionDeclaration__Group__3__Impl
	rule__AExternalFunctionDeclaration__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__AExternalFunctionDeclaration__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAExternalFunctionDeclarationAccess().getInputsAssignment_3()); }
(rule__AExternalFunctionDeclaration__InputsAssignment_3)?
{ after(grammarAccess.getAExternalFunctionDeclarationAccess().getInputsAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AExternalFunctionDeclaration__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AExternalFunctionDeclaration__Group__4__Impl
	rule__AExternalFunctionDeclaration__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__AExternalFunctionDeclaration__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAExternalFunctionDeclarationAccess().getGroup_4()); }
(rule__AExternalFunctionDeclaration__Group_4__0)*
{ after(grammarAccess.getAExternalFunctionDeclarationAccess().getGroup_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AExternalFunctionDeclaration__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AExternalFunctionDeclaration__Group__5__Impl
	rule__AExternalFunctionDeclaration__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__AExternalFunctionDeclaration__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAExternalFunctionDeclarationAccess().getRightParenthesisKeyword_5()); }

	')' 

{ after(grammarAccess.getAExternalFunctionDeclarationAccess().getRightParenthesisKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AExternalFunctionDeclaration__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AExternalFunctionDeclaration__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AExternalFunctionDeclaration__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAExternalFunctionDeclarationAccess().getSemicolonKeyword_6()); }

	';' 

{ after(grammarAccess.getAExternalFunctionDeclarationAccess().getSemicolonKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}
















rule__AExternalFunctionDeclaration__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AExternalFunctionDeclaration__Group_4__0__Impl
	rule__AExternalFunctionDeclaration__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AExternalFunctionDeclaration__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAExternalFunctionDeclarationAccess().getCommaKeyword_4_0()); }

	',' 

{ after(grammarAccess.getAExternalFunctionDeclarationAccess().getCommaKeyword_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AExternalFunctionDeclaration__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AExternalFunctionDeclaration__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AExternalFunctionDeclaration__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAExternalFunctionDeclarationAccess().getInputsAssignment_4_1()); }
(rule__AExternalFunctionDeclaration__InputsAssignment_4_1)
{ after(grammarAccess.getAExternalFunctionDeclarationAccess().getInputsAssignment_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AAffineSystem__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AAffineSystem__Group__0__Impl
	rule__AAffineSystem__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AAffineSystem__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAAffineSystemAccess().getAffineKeyword_0()); }

	'affine' 

{ after(grammarAccess.getAAffineSystemAccess().getAffineKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AAffineSystem__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AAffineSystem__Group__1__Impl
	rule__AAffineSystem__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AAffineSystem__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAAffineSystemAccess().getNameAssignment_1()); }
(rule__AAffineSystem__NameAssignment_1)
{ after(grammarAccess.getAAffineSystemAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AAffineSystem__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AAffineSystem__Group__2__Impl
	rule__AAffineSystem__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__AAffineSystem__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAAffineSystemAccess().getParametersAssignment_2()); }
(rule__AAffineSystem__ParametersAssignment_2)
{ after(grammarAccess.getAAffineSystemAccess().getParametersAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AAffineSystem__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AAffineSystem__Group__3__Impl
	rule__AAffineSystem__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__AAffineSystem__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAAffineSystemAccess().getGroup_3()); }
(rule__AAffineSystem__Group_3__0)?
{ after(grammarAccess.getAAffineSystemAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AAffineSystem__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AAffineSystem__Group__4__Impl
	rule__AAffineSystem__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__AAffineSystem__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAAffineSystemAccess().getGroup_4()); }
(rule__AAffineSystem__Group_4__0)?
{ after(grammarAccess.getAAffineSystemAccess().getGroup_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AAffineSystem__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AAffineSystem__Group__5__Impl
	rule__AAffineSystem__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__AAffineSystem__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAAffineSystemAccess().getGroup_5()); }
(rule__AAffineSystem__Group_5__0)?
{ after(grammarAccess.getAAffineSystemAccess().getGroup_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AAffineSystem__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AAffineSystem__Group__6__Impl
	rule__AAffineSystem__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__AAffineSystem__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAAffineSystemAccess().getGroup_6()); }
(rule__AAffineSystem__Group_6__0)?
{ after(grammarAccess.getAAffineSystemAccess().getGroup_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AAffineSystem__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AAffineSystem__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AAffineSystem__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAAffineSystemAccess().getFullStopKeyword_7()); }

	'.' 

{ after(grammarAccess.getAAffineSystemAccess().getFullStopKeyword_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


















rule__AAffineSystem__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AAffineSystem__Group_3__0__Impl
	rule__AAffineSystem__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AAffineSystem__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAAffineSystemAccess().getGivenKeyword_3_0()); }

	'given' 

{ after(grammarAccess.getAAffineSystemAccess().getGivenKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AAffineSystem__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AAffineSystem__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AAffineSystem__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAAffineSystemAccess().getInputDeclarationsAssignment_3_1()); }
(rule__AAffineSystem__InputDeclarationsAssignment_3_1)*
{ after(grammarAccess.getAAffineSystemAccess().getInputDeclarationsAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AAffineSystem__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AAffineSystem__Group_4__0__Impl
	rule__AAffineSystem__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AAffineSystem__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAAffineSystemAccess().getReturnsKeyword_4_0()); }

	'returns' 

{ after(grammarAccess.getAAffineSystemAccess().getReturnsKeyword_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AAffineSystem__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AAffineSystem__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AAffineSystem__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAAffineSystemAccess().getOutputDeclarationsAssignment_4_1()); }
(rule__AAffineSystem__OutputDeclarationsAssignment_4_1)*
{ after(grammarAccess.getAAffineSystemAccess().getOutputDeclarationsAssignment_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AAffineSystem__Group_5__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AAffineSystem__Group_5__0__Impl
	rule__AAffineSystem__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AAffineSystem__Group_5__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAAffineSystemAccess().getUsingKeyword_5_0()); }

	'using' 

{ after(grammarAccess.getAAffineSystemAccess().getUsingKeyword_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AAffineSystem__Group_5__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AAffineSystem__Group_5__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AAffineSystem__Group_5__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAAffineSystemAccess().getLocalvarDeclarationsAssignment_5_1()); }
(rule__AAffineSystem__LocalvarDeclarationsAssignment_5_1)*
{ after(grammarAccess.getAAffineSystemAccess().getLocalvarDeclarationsAssignment_5_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AAffineSystem__Group_6__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AAffineSystem__Group_6__0__Impl
	rule__AAffineSystem__Group_6__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AAffineSystem__Group_6__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAAffineSystemAccess().getThroughKeyword_6_0()); }

	'through' 

{ after(grammarAccess.getAAffineSystemAccess().getThroughKeyword_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AAffineSystem__Group_6__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AAffineSystem__Group_6__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AAffineSystem__Group_6__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAAffineSystemAccess().getEquationsAssignment_6_1()); }
(rule__AAffineSystem__EquationsAssignment_6_1)*
{ after(grammarAccess.getAAffineSystemAccess().getEquationsAssignment_6_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AOutputDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AOutputDeclaration__Group__0__Impl
	rule__AOutputDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AOutputDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAOutputDeclarationAccess().getTypeAssignment_0()); }
(rule__AOutputDeclaration__TypeAssignment_0)
{ after(grammarAccess.getAOutputDeclarationAccess().getTypeAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AOutputDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AOutputDeclaration__Group__1__Impl
	rule__AOutputDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AOutputDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAOutputDeclarationAccess().getIdentifierListAssignment_1()); }
(rule__AOutputDeclaration__IdentifierListAssignment_1)
{ after(grammarAccess.getAOutputDeclarationAccess().getIdentifierListAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AOutputDeclaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AOutputDeclaration__Group__2__Impl
	rule__AOutputDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__AOutputDeclaration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAOutputDeclarationAccess().getDomainAssignment_2()); }
(rule__AOutputDeclaration__DomainAssignment_2)?
{ after(grammarAccess.getAOutputDeclarationAccess().getDomainAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AOutputDeclaration__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AOutputDeclaration__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AOutputDeclaration__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAOutputDeclarationAccess().getSemicolonKeyword_3()); }

	';' 

{ after(grammarAccess.getAOutputDeclarationAccess().getSemicolonKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__AInputDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AInputDeclaration__Group__0__Impl
	rule__AInputDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AInputDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAInputDeclarationAccess().getTypeAssignment_0()); }
(rule__AInputDeclaration__TypeAssignment_0)
{ after(grammarAccess.getAInputDeclarationAccess().getTypeAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AInputDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AInputDeclaration__Group__1__Impl
	rule__AInputDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AInputDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAInputDeclarationAccess().getIdentifierListAssignment_1()); }
(rule__AInputDeclaration__IdentifierListAssignment_1)
{ after(grammarAccess.getAInputDeclarationAccess().getIdentifierListAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AInputDeclaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AInputDeclaration__Group__2__Impl
	rule__AInputDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__AInputDeclaration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAInputDeclarationAccess().getDomainAssignment_2()); }
(rule__AInputDeclaration__DomainAssignment_2)?
{ after(grammarAccess.getAInputDeclarationAccess().getDomainAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AInputDeclaration__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AInputDeclaration__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AInputDeclaration__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAInputDeclarationAccess().getSemicolonKeyword_3()); }

	';' 

{ after(grammarAccess.getAInputDeclarationAccess().getSemicolonKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__ALocalDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ALocalDeclaration__Group__0__Impl
	rule__ALocalDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ALocalDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getALocalDeclarationAccess().getTypeAssignment_0()); }
(rule__ALocalDeclaration__TypeAssignment_0)
{ after(grammarAccess.getALocalDeclarationAccess().getTypeAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ALocalDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ALocalDeclaration__Group__1__Impl
	rule__ALocalDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ALocalDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getALocalDeclarationAccess().getIdentifierListAssignment_1()); }
(rule__ALocalDeclaration__IdentifierListAssignment_1)
{ after(grammarAccess.getALocalDeclarationAccess().getIdentifierListAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ALocalDeclaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ALocalDeclaration__Group__2__Impl
	rule__ALocalDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ALocalDeclaration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getALocalDeclarationAccess().getDomainAssignment_2()); }
(rule__ALocalDeclaration__DomainAssignment_2)?
{ after(grammarAccess.getALocalDeclarationAccess().getDomainAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ALocalDeclaration__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ALocalDeclaration__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ALocalDeclaration__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getALocalDeclarationAccess().getSemicolonKeyword_3()); }

	';' 

{ after(grammarAccess.getALocalDeclarationAccess().getSemicolonKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__AIdentifierList__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AIdentifierList__Group__0__Impl
	rule__AIdentifierList__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AIdentifierList__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAIdentifierListAccess().getIdentifiersAssignment_0()); }
(rule__AIdentifierList__IdentifiersAssignment_0)
{ after(grammarAccess.getAIdentifierListAccess().getIdentifiersAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AIdentifierList__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AIdentifierList__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AIdentifierList__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAIdentifierListAccess().getGroup_1()); }
(rule__AIdentifierList__Group_1__0)*
{ after(grammarAccess.getAIdentifierListAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AIdentifierList__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AIdentifierList__Group_1__0__Impl
	rule__AIdentifierList__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AIdentifierList__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAIdentifierListAccess().getCommaKeyword_1_0()); }

	',' 

{ after(grammarAccess.getAIdentifierListAccess().getCommaKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AIdentifierList__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AIdentifierList__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AIdentifierList__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAIdentifierListAccess().getIdentifiersAssignment_1_1()); }
(rule__AIdentifierList__IdentifiersAssignment_1_1)
{ after(grammarAccess.getAIdentifierListAccess().getIdentifiersAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ADomain__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ADomain__Group__0__Impl
	rule__ADomain__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ADomain__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getADomainAccess().getPolyhedraAssignment_0()); }
(rule__ADomain__PolyhedraAssignment_0)
{ after(grammarAccess.getADomainAccess().getPolyhedraAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ADomain__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ADomain__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ADomain__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getADomainAccess().getGroup_1()); }
(rule__ADomain__Group_1__0)*
{ after(grammarAccess.getADomainAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ADomain__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ADomain__Group_1__0__Impl
	rule__ADomain__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ADomain__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getADomainAccess().getUNIONTerminalRuleCall_1_0()); }
	RULE_UNION
{ after(grammarAccess.getADomainAccess().getUNIONTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ADomain__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ADomain__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ADomain__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getADomainAccess().getPolyhedraAssignment_1_1()); }
(rule__ADomain__PolyhedraAssignment_1_1)
{ after(grammarAccess.getADomainAccess().getPolyhedraAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__APolyhedron__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__APolyhedron__Group__0__Impl
	rule__APolyhedron__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__APolyhedron__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAPolyhedronAccess().getLeftCurlyBracketKeyword_0()); }

	'{' 

{ after(grammarAccess.getAPolyhedronAccess().getLeftCurlyBracketKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__APolyhedron__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__APolyhedron__Group__1__Impl
	rule__APolyhedron__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__APolyhedron__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAPolyhedronAccess().getIndexesAssignment_1()); }
(rule__APolyhedron__IndexesAssignment_1)
{ after(grammarAccess.getAPolyhedronAccess().getIndexesAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__APolyhedron__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__APolyhedron__Group__2__Impl
	rule__APolyhedron__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__APolyhedron__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAPolyhedronAccess().getVerticalLineKeyword_2()); }

	'|' 

{ after(grammarAccess.getAPolyhedronAccess().getVerticalLineKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__APolyhedron__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__APolyhedron__Group__3__Impl
	rule__APolyhedron__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__APolyhedron__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAPolyhedronAccess().getGroup_3()); }
(rule__APolyhedron__Group_3__0)?
{ after(grammarAccess.getAPolyhedronAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__APolyhedron__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__APolyhedron__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__APolyhedron__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAPolyhedronAccess().getRightCurlyBracketKeyword_4()); }

	'}' 

{ after(grammarAccess.getAPolyhedronAccess().getRightCurlyBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__APolyhedron__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__APolyhedron__Group_3__0__Impl
	rule__APolyhedron__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__APolyhedron__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAPolyhedronAccess().getConstraintsAssignment_3_0()); }
(rule__APolyhedron__ConstraintsAssignment_3_0)
{ after(grammarAccess.getAPolyhedronAccess().getConstraintsAssignment_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__APolyhedron__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__APolyhedron__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__APolyhedron__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAPolyhedronAccess().getGroup_3_1()); }
(rule__APolyhedron__Group_3_1__0)*
{ after(grammarAccess.getAPolyhedronAccess().getGroup_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__APolyhedron__Group_3_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__APolyhedron__Group_3_1__0__Impl
	rule__APolyhedron__Group_3_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__APolyhedron__Group_3_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAPolyhedronAccess().getINTERSECTIONTerminalRuleCall_3_1_0()); }
	RULE_INTERSECTION
{ after(grammarAccess.getAPolyhedronAccess().getINTERSECTIONTerminalRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__APolyhedron__Group_3_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__APolyhedron__Group_3_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__APolyhedron__Group_3_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAPolyhedronAccess().getConstraintsAssignment_3_1_1()); }
(rule__APolyhedron__ConstraintsAssignment_3_1_1)
{ after(grammarAccess.getAPolyhedronAccess().getConstraintsAssignment_3_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__InEquality__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InEquality__Group__0__Impl
	rule__InEquality__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InEquality__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInEqualityAccess().getAlternatives_0()); }
(rule__InEquality__Alternatives_0)
{ after(grammarAccess.getInEqualityAccess().getAlternatives_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InEquality__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InEquality__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InEquality__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getInEqualityAccess().getGroup_1()); }
(rule__InEquality__Group_1__0)
{ after(grammarAccess.getInEqualityAccess().getGroup_1()); }
)
(
{ before(grammarAccess.getInEqualityAccess().getGroup_1()); }
(rule__InEquality__Group_1__0)*
{ after(grammarAccess.getInEqualityAccess().getGroup_1()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}






rule__InEquality__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InEquality__Group_1__0__Impl
	rule__InEquality__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InEquality__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInEqualityAccess().getRelationalOpParserRuleCall_1_0()); }
	ruleRelationalOp
{ after(grammarAccess.getInEqualityAccess().getRelationalOpParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InEquality__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InEquality__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InEquality__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInEqualityAccess().getAlternatives_1_1()); }
(rule__InEquality__Alternatives_1_1)
{ after(grammarAccess.getInEqualityAccess().getAlternatives_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__IDList__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IDList__Group_0__0__Impl
	rule__IDList__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IDList__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIDListAccess().getInEqIDParserRuleCall_0_0()); }
	ruleInEqID
{ after(grammarAccess.getIDListAccess().getInEqIDParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IDList__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IDList__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IDList__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIDListAccess().getGroup_0_1()); }
(rule__IDList__Group_0_1__0)*
{ after(grammarAccess.getIDListAccess().getGroup_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__IDList__Group_0_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IDList__Group_0_1__0__Impl
	rule__IDList__Group_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IDList__Group_0_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIDListAccess().getCommaKeyword_0_1_0()); }

	',' 

{ after(grammarAccess.getIDListAccess().getCommaKeyword_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IDList__Group_0_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IDList__Group_0_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IDList__Group_0_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIDListAccess().getInEqIDParserRuleCall_0_1_1()); }
	ruleInEqID
{ after(grammarAccess.getIDListAccess().getInEqIDParserRuleCall_0_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__IDList__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IDList__Group_1__0__Impl
	rule__IDList__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IDList__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIDListAccess().getLeftParenthesisKeyword_1_0()); }

	'(' 

{ after(grammarAccess.getIDListAccess().getLeftParenthesisKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IDList__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IDList__Group_1__1__Impl
	rule__IDList__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IDList__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIDListAccess().getInEqIDParserRuleCall_1_1()); }
	ruleInEqID
{ after(grammarAccess.getIDListAccess().getInEqIDParserRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IDList__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IDList__Group_1__2__Impl
	rule__IDList__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__IDList__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIDListAccess().getGroup_1_2()); }
(rule__IDList__Group_1_2__0)*
{ after(grammarAccess.getIDListAccess().getGroup_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IDList__Group_1__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IDList__Group_1__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IDList__Group_1__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIDListAccess().getRightParenthesisKeyword_1_3()); }

	')' 

{ after(grammarAccess.getIDListAccess().getRightParenthesisKeyword_1_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__IDList__Group_1_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IDList__Group_1_2__0__Impl
	rule__IDList__Group_1_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IDList__Group_1_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIDListAccess().getCommaKeyword_1_2_0()); }

	',' 

{ after(grammarAccess.getIDListAccess().getCommaKeyword_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IDList__Group_1_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IDList__Group_1_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IDList__Group_1_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIDListAccess().getInEqIDParserRuleCall_1_2_1()); }
	ruleInEqID
{ after(grammarAccess.getIDListAccess().getInEqIDParserRuleCall_1_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__IDExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IDExpression__Group__0__Impl
	rule__IDExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IDExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIDExpressionAccess().getInEqIDParserRuleCall_0()); }
	ruleInEqID
{ after(grammarAccess.getIDExpressionAccess().getInEqIDParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IDExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IDExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IDExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getIDExpressionAccess().getGroup_1()); }
(rule__IDExpression__Group_1__0)
{ after(grammarAccess.getIDExpressionAccess().getGroup_1()); }
)
(
{ before(grammarAccess.getIDExpressionAccess().getGroup_1()); }
(rule__IDExpression__Group_1__0)*
{ after(grammarAccess.getIDExpressionAccess().getGroup_1()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}






rule__IDExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IDExpression__Group_1__0__Impl
	rule__IDExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IDExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIDExpressionAccess().getAlternatives_1_0()); }
(rule__IDExpression__Alternatives_1_0)
{ after(grammarAccess.getIDExpressionAccess().getAlternatives_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IDExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IDExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IDExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIDExpressionAccess().getInEqIDParserRuleCall_1_1()); }
	ruleInEqID
{ after(grammarAccess.getIDExpressionAccess().getInEqIDParserRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__InEqID__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InEqID__Group__0__Impl
	rule__InEqID__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InEqID__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInEqIDAccess().getOP_MINUSTerminalRuleCall_0()); }
(	RULE_OP_MINUS)?
{ after(grammarAccess.getInEqIDAccess().getOP_MINUSTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InEqID__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InEqID__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InEqID__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInEqIDAccess().getAlternatives_1()); }
(rule__InEqID__Alternatives_1)
{ after(grammarAccess.getInEqIDAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__InEqID__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InEqID__Group_1_1__0__Impl
	rule__InEqID__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InEqID__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInEqIDAccess().getINTTerminalRuleCall_1_1_0()); }
(	RULE_INT)*
{ after(grammarAccess.getInEqIDAccess().getINTTerminalRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InEqID__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InEqID__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InEqID__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInEqIDAccess().getIDTerminalRuleCall_1_1_1()); }
	RULE_ID
{ after(grammarAccess.getInEqIDAccess().getIDTerminalRuleCall_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AStandardEquation__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AStandardEquation__Group__0__Impl
	rule__AStandardEquation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AStandardEquation__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAStandardEquationAccess().getVarAssignment_0()); }
(rule__AStandardEquation__VarAssignment_0)
{ after(grammarAccess.getAStandardEquationAccess().getVarAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AStandardEquation__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AStandardEquation__Group__1__Impl
	rule__AStandardEquation__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AStandardEquation__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAStandardEquationAccess().getGroup_1()); }
(rule__AStandardEquation__Group_1__0)?
{ after(grammarAccess.getAStandardEquationAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AStandardEquation__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AStandardEquation__Group__2__Impl
	rule__AStandardEquation__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__AStandardEquation__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAStandardEquationAccess().getEqualsSignKeyword_2()); }

	'=' 

{ after(grammarAccess.getAStandardEquationAccess().getEqualsSignKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AStandardEquation__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AStandardEquation__Group__3__Impl
	rule__AStandardEquation__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__AStandardEquation__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAStandardEquationAccess().getExprAssignment_3()); }
(rule__AStandardEquation__ExprAssignment_3)
{ after(grammarAccess.getAStandardEquationAccess().getExprAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AStandardEquation__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AStandardEquation__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AStandardEquation__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAStandardEquationAccess().getSemicolonKeyword_4()); }

	';' 

{ after(grammarAccess.getAStandardEquationAccess().getSemicolonKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__AStandardEquation__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AStandardEquation__Group_1__0__Impl
	rule__AStandardEquation__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AStandardEquation__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAStandardEquationAccess().getLeftSquareBracketKeyword_1_0()); }

	'[' 

{ after(grammarAccess.getAStandardEquationAccess().getLeftSquareBracketKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AStandardEquation__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AStandardEquation__Group_1__1__Impl
	rule__AStandardEquation__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AStandardEquation__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAStandardEquationAccess().getIndexesAssignment_1_1()); }
(rule__AStandardEquation__IndexesAssignment_1_1)
{ after(grammarAccess.getAStandardEquationAccess().getIndexesAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AStandardEquation__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AStandardEquation__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AStandardEquation__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAStandardEquationAccess().getRightSquareBracketKeyword_1_2()); }

	']' 

{ after(grammarAccess.getAStandardEquationAccess().getRightSquareBracketKeyword_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__AParanthesizedAlphabetsExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AParanthesizedAlphabetsExpression__Group__0__Impl
	rule__AParanthesizedAlphabetsExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AParanthesizedAlphabetsExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAParanthesizedAlphabetsExpressionAccess().getLeftParenthesisKeyword_0()); }

	'(' 

{ after(grammarAccess.getAParanthesizedAlphabetsExpressionAccess().getLeftParenthesisKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AParanthesizedAlphabetsExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AParanthesizedAlphabetsExpression__Group__1__Impl
	rule__AParanthesizedAlphabetsExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AParanthesizedAlphabetsExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAParanthesizedAlphabetsExpressionAccess().getAAlphabetsExpressionParserRuleCall_1()); }
	ruleAAlphabetsExpression
{ after(grammarAccess.getAParanthesizedAlphabetsExpressionAccess().getAAlphabetsExpressionParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AParanthesizedAlphabetsExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AParanthesizedAlphabetsExpression__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AParanthesizedAlphabetsExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAParanthesizedAlphabetsExpressionAccess().getRightParenthesisKeyword_2()); }

	')' 

{ after(grammarAccess.getAParanthesizedAlphabetsExpressionAccess().getRightParenthesisKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__AOrExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AOrExpression__Group__0__Impl
	rule__AOrExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AOrExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAOrExpressionAccess().getAAndExpressionParserRuleCall_0()); }
	ruleAAndExpression
{ after(grammarAccess.getAOrExpressionAccess().getAAndExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AOrExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AOrExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AOrExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAOrExpressionAccess().getGroup_1()); }
(rule__AOrExpression__Group_1__0)*
{ after(grammarAccess.getAOrExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AOrExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AOrExpression__Group_1__0__Impl
	rule__AOrExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AOrExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAOrExpressionAccess().getAOrExpressionLeftAction_1_0()); }
(

)
{ after(grammarAccess.getAOrExpressionAccess().getAOrExpressionLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AOrExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AOrExpression__Group_1__1__Impl
	rule__AOrExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AOrExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAOrExpressionAccess().getOperatorAssignment_1_1()); }
(rule__AOrExpression__OperatorAssignment_1_1)
{ after(grammarAccess.getAOrExpressionAccess().getOperatorAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AOrExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AOrExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AOrExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAOrExpressionAccess().getRightAssignment_1_2()); }
(rule__AOrExpression__RightAssignment_1_2)
{ after(grammarAccess.getAOrExpressionAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__AAndExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AAndExpression__Group__0__Impl
	rule__AAndExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AAndExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAAndExpressionAccess().getARelationalExpressionParserRuleCall_0()); }
	ruleARelationalExpression
{ after(grammarAccess.getAAndExpressionAccess().getARelationalExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AAndExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AAndExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AAndExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAAndExpressionAccess().getGroup_1()); }
(rule__AAndExpression__Group_1__0)*
{ after(grammarAccess.getAAndExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AAndExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AAndExpression__Group_1__0__Impl
	rule__AAndExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AAndExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAAndExpressionAccess().getAAndExpressionLeftAction_1_0()); }
(

)
{ after(grammarAccess.getAAndExpressionAccess().getAAndExpressionLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AAndExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AAndExpression__Group_1__1__Impl
	rule__AAndExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AAndExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAAndExpressionAccess().getOperatorAssignment_1_1()); }
(rule__AAndExpression__OperatorAssignment_1_1)
{ after(grammarAccess.getAAndExpressionAccess().getOperatorAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AAndExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AAndExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AAndExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAAndExpressionAccess().getRightAssignment_1_2()); }
(rule__AAndExpression__RightAssignment_1_2)
{ after(grammarAccess.getAAndExpressionAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ARelationalExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ARelationalExpression__Group__0__Impl
	rule__ARelationalExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ARelationalExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getARelationalExpressionAccess().getAAdditiveExpressionParserRuleCall_0()); }
	ruleAAdditiveExpression
{ after(grammarAccess.getARelationalExpressionAccess().getAAdditiveExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ARelationalExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ARelationalExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ARelationalExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getARelationalExpressionAccess().getGroup_1()); }
(rule__ARelationalExpression__Group_1__0)*
{ after(grammarAccess.getARelationalExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ARelationalExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ARelationalExpression__Group_1__0__Impl
	rule__ARelationalExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ARelationalExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getARelationalExpressionAccess().getARelationalExpressionLeftAction_1_0()); }
(

)
{ after(grammarAccess.getARelationalExpressionAccess().getARelationalExpressionLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ARelationalExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ARelationalExpression__Group_1__1__Impl
	rule__ARelationalExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ARelationalExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getARelationalExpressionAccess().getOperatorAssignment_1_1()); }
(rule__ARelationalExpression__OperatorAssignment_1_1)
{ after(grammarAccess.getARelationalExpressionAccess().getOperatorAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ARelationalExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ARelationalExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ARelationalExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getARelationalExpressionAccess().getRightAssignment_1_2()); }
(rule__ARelationalExpression__RightAssignment_1_2)
{ after(grammarAccess.getARelationalExpressionAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__AAdditiveExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AAdditiveExpression__Group__0__Impl
	rule__AAdditiveExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AAdditiveExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAAdditiveExpressionAccess().getAMultiplicativeExpressionParserRuleCall_0()); }
	ruleAMultiplicativeExpression
{ after(grammarAccess.getAAdditiveExpressionAccess().getAMultiplicativeExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AAdditiveExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AAdditiveExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AAdditiveExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAAdditiveExpressionAccess().getGroup_1()); }
(rule__AAdditiveExpression__Group_1__0)*
{ after(grammarAccess.getAAdditiveExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AAdditiveExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AAdditiveExpression__Group_1__0__Impl
	rule__AAdditiveExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AAdditiveExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAAdditiveExpressionAccess().getAAdditiveExpressionLeftAction_1_0()); }
(

)
{ after(grammarAccess.getAAdditiveExpressionAccess().getAAdditiveExpressionLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AAdditiveExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AAdditiveExpression__Group_1__1__Impl
	rule__AAdditiveExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AAdditiveExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAAdditiveExpressionAccess().getOpAssignment_1_1()); }
(rule__AAdditiveExpression__OpAssignment_1_1)
{ after(grammarAccess.getAAdditiveExpressionAccess().getOpAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AAdditiveExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AAdditiveExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AAdditiveExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAAdditiveExpressionAccess().getRightAssignment_1_2()); }
(rule__AAdditiveExpression__RightAssignment_1_2)
{ after(grammarAccess.getAAdditiveExpressionAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__AMultiplicativeExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AMultiplicativeExpression__Group__0__Impl
	rule__AMultiplicativeExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AMultiplicativeExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAMultiplicativeExpressionAccess().getAMinMaxExpressionParserRuleCall_0()); }
	ruleAMinMaxExpression
{ after(grammarAccess.getAMultiplicativeExpressionAccess().getAMinMaxExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AMultiplicativeExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AMultiplicativeExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AMultiplicativeExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAMultiplicativeExpressionAccess().getGroup_1()); }
(rule__AMultiplicativeExpression__Group_1__0)*
{ after(grammarAccess.getAMultiplicativeExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AMultiplicativeExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AMultiplicativeExpression__Group_1__0__Impl
	rule__AMultiplicativeExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AMultiplicativeExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAMultiplicativeExpressionAccess().getAMultiplicativeExpressionLeftAction_1_0()); }
(

)
{ after(grammarAccess.getAMultiplicativeExpressionAccess().getAMultiplicativeExpressionLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AMultiplicativeExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AMultiplicativeExpression__Group_1__1__Impl
	rule__AMultiplicativeExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AMultiplicativeExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAMultiplicativeExpressionAccess().getOpAssignment_1_1()); }
(rule__AMultiplicativeExpression__OpAssignment_1_1)
{ after(grammarAccess.getAMultiplicativeExpressionAccess().getOpAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AMultiplicativeExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AMultiplicativeExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AMultiplicativeExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAMultiplicativeExpressionAccess().getRightAssignment_1_2()); }
(rule__AMultiplicativeExpression__RightAssignment_1_2)
{ after(grammarAccess.getAMultiplicativeExpressionAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__AMinMaxExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AMinMaxExpression__Group__0__Impl
	rule__AMinMaxExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AMinMaxExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAMinMaxExpressionAccess().getAUnaryOrTerminalExpressionParserRuleCall_0()); }
	ruleAUnaryOrTerminalExpression
{ after(grammarAccess.getAMinMaxExpressionAccess().getAUnaryOrTerminalExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AMinMaxExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AMinMaxExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AMinMaxExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAMinMaxExpressionAccess().getGroup_1()); }
(rule__AMinMaxExpression__Group_1__0)*
{ after(grammarAccess.getAMinMaxExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AMinMaxExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AMinMaxExpression__Group_1__0__Impl
	rule__AMinMaxExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AMinMaxExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAMinMaxExpressionAccess().getAMinMaxExpressionLeftAction_1_0()); }
(

)
{ after(grammarAccess.getAMinMaxExpressionAccess().getAMinMaxExpressionLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AMinMaxExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AMinMaxExpression__Group_1__1__Impl
	rule__AMinMaxExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AMinMaxExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAMinMaxExpressionAccess().getOpAssignment_1_1()); }
(rule__AMinMaxExpression__OpAssignment_1_1)
{ after(grammarAccess.getAMinMaxExpressionAccess().getOpAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AMinMaxExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AMinMaxExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AMinMaxExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAMinMaxExpressionAccess().getRightAssignment_1_2()); }
(rule__AMinMaxExpression__RightAssignment_1_2)
{ after(grammarAccess.getAMinMaxExpressionAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ANotExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ANotExpression__Group__0__Impl
	rule__ANotExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ANotExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getANotExpressionAccess().getOpAssignment_0()); }
(rule__ANotExpression__OpAssignment_0)
{ after(grammarAccess.getANotExpressionAccess().getOpAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ANotExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ANotExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ANotExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getANotExpressionAccess().getExprAssignment_1()); }
(rule__ANotExpression__ExprAssignment_1)
{ after(grammarAccess.getANotExpressionAccess().getExprAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ANegateExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ANegateExpression__Group__0__Impl
	rule__ANegateExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ANegateExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getANegateExpressionAccess().getOpAssignment_0()); }
(rule__ANegateExpression__OpAssignment_0)
{ after(grammarAccess.getANegateExpressionAccess().getOpAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ANegateExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ANegateExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ANegateExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getANegateExpressionAccess().getExprAssignment_1()); }
(rule__ANegateExpression__ExprAssignment_1)
{ after(grammarAccess.getANegateExpressionAccess().getExprAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ACaseExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ACaseExpression__Group__0__Impl
	rule__ACaseExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ACaseExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getACaseExpressionAccess().getCaseKeyword_0()); }

	'case' 

{ after(grammarAccess.getACaseExpressionAccess().getCaseKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ACaseExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ACaseExpression__Group__1__Impl
	rule__ACaseExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ACaseExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getACaseExpressionAccess().getGroup_1()); }
(rule__ACaseExpression__Group_1__0)
{ after(grammarAccess.getACaseExpressionAccess().getGroup_1()); }
)
(
{ before(grammarAccess.getACaseExpressionAccess().getGroup_1()); }
(rule__ACaseExpression__Group_1__0)*
{ after(grammarAccess.getACaseExpressionAccess().getGroup_1()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ACaseExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ACaseExpression__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ACaseExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getACaseExpressionAccess().getEsacKeyword_2()); }

	'esac' 

{ after(grammarAccess.getACaseExpressionAccess().getEsacKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ACaseExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ACaseExpression__Group_1__0__Impl
	rule__ACaseExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ACaseExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getACaseExpressionAccess().getExprsAssignment_1_0()); }
(rule__ACaseExpression__ExprsAssignment_1_0)
{ after(grammarAccess.getACaseExpressionAccess().getExprsAssignment_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ACaseExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ACaseExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ACaseExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getACaseExpressionAccess().getSemicolonKeyword_1_1()); }

	';' 

{ after(grammarAccess.getACaseExpressionAccess().getSemicolonKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ADependenceExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ADependenceExpression__Group__0__Impl
	rule__ADependenceExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ADependenceExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getADependenceExpressionAccess().getFuncAssignment_0()); }
(rule__ADependenceExpression__FuncAssignment_0)
{ after(grammarAccess.getADependenceExpressionAccess().getFuncAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ADependenceExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ADependenceExpression__Group__1__Impl
	rule__ADependenceExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ADependenceExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getADependenceExpressionAccess().getCommercialAtKeyword_1()); }

	'@' 

{ after(grammarAccess.getADependenceExpressionAccess().getCommercialAtKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ADependenceExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ADependenceExpression__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ADependenceExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getADependenceExpressionAccess().getExprAssignment_2()); }
(rule__ADependenceExpression__ExprAssignment_2)
{ after(grammarAccess.getADependenceExpressionAccess().getExprAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ADependenceInArrayNotation__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ADependenceInArrayNotation__Group__0__Impl
	rule__ADependenceInArrayNotation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ADependenceInArrayNotation__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getADependenceInArrayNotationAccess().getVarAssignment_0()); }
(rule__ADependenceInArrayNotation__VarAssignment_0)
{ after(grammarAccess.getADependenceInArrayNotationAccess().getVarAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ADependenceInArrayNotation__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ADependenceInArrayNotation__Group__1__Impl
	rule__ADependenceInArrayNotation__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ADependenceInArrayNotation__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getADependenceInArrayNotationAccess().getLeftSquareBracketKeyword_1()); }

	'[' 

{ after(grammarAccess.getADependenceInArrayNotationAccess().getLeftSquareBracketKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ADependenceInArrayNotation__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ADependenceInArrayNotation__Group__2__Impl
	rule__ADependenceInArrayNotation__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ADependenceInArrayNotation__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getADependenceInArrayNotationAccess().getDepAssignment_2()); }
(rule__ADependenceInArrayNotation__DepAssignment_2)
{ after(grammarAccess.getADependenceInArrayNotationAccess().getDepAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ADependenceInArrayNotation__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ADependenceInArrayNotation__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ADependenceInArrayNotation__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getADependenceInArrayNotationAccess().getRightSquareBracketKeyword_3()); }

	']' 

{ after(grammarAccess.getADependenceInArrayNotationAccess().getRightSquareBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__AIfExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AIfExpression__Group__0__Impl
	rule__AIfExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AIfExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAIfExpressionAccess().getIfKeyword_0()); }

	'if' 

{ after(grammarAccess.getAIfExpressionAccess().getIfKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AIfExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AIfExpression__Group__1__Impl
	rule__AIfExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AIfExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAIfExpressionAccess().getCondAssignment_1()); }
(rule__AIfExpression__CondAssignment_1)
{ after(grammarAccess.getAIfExpressionAccess().getCondAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AIfExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AIfExpression__Group__2__Impl
	rule__AIfExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__AIfExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAIfExpressionAccess().getThenKeyword_2()); }

	'then' 

{ after(grammarAccess.getAIfExpressionAccess().getThenKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AIfExpression__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AIfExpression__Group__3__Impl
	rule__AIfExpression__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__AIfExpression__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAIfExpressionAccess().getThenAssignment_3()); }
(rule__AIfExpression__ThenAssignment_3)
{ after(grammarAccess.getAIfExpressionAccess().getThenAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AIfExpression__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AIfExpression__Group__4__Impl
	rule__AIfExpression__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__AIfExpression__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAIfExpressionAccess().getElseKeyword_4()); }

	'else' 

{ after(grammarAccess.getAIfExpressionAccess().getElseKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AIfExpression__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AIfExpression__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AIfExpression__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAIfExpressionAccess().getElseAssignment_5()); }
(rule__AIfExpression__ElseAssignment_5)
{ after(grammarAccess.getAIfExpressionAccess().getElseAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__AIndexExpression__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AIndexExpression__Group_0__0__Impl
	rule__AIndexExpression__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AIndexExpression__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAIndexExpressionAccess().getLeftSquareBracketKeyword_0_0()); }

	'[' 

{ after(grammarAccess.getAIndexExpressionAccess().getLeftSquareBracketKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AIndexExpression__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AIndexExpression__Group_0__1__Impl
	rule__AIndexExpression__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AIndexExpression__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAIndexExpressionAccess().getFuncAssignment_0_1()); }
(rule__AIndexExpression__FuncAssignment_0_1)
{ after(grammarAccess.getAIndexExpressionAccess().getFuncAssignment_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AIndexExpression__Group_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AIndexExpression__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AIndexExpression__Group_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAIndexExpressionAccess().getRightSquareBracketKeyword_0_2()); }

	']' 

{ after(grammarAccess.getAIndexExpressionAccess().getRightSquareBracketKeyword_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__AIndexExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AIndexExpression__Group_1__0__Impl
	rule__AIndexExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AIndexExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAIndexExpressionAccess().getValKeyword_1_0()); }

	'val(' 

{ after(grammarAccess.getAIndexExpressionAccess().getValKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AIndexExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AIndexExpression__Group_1__1__Impl
	rule__AIndexExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AIndexExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAIndexExpressionAccess().getIndexesAssignment_1_1()); }
(rule__AIndexExpression__IndexesAssignment_1_1)
{ after(grammarAccess.getAIndexExpressionAccess().getIndexesAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AIndexExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AIndexExpression__Group_1__2__Impl
	rule__AIndexExpression__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__AIndexExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAIndexExpressionAccess().getHyphenMinusGreaterThanSignKeyword_1_2()); }

	'->' 

{ after(grammarAccess.getAIndexExpressionAccess().getHyphenMinusGreaterThanSignKeyword_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AIndexExpression__Group_1__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AIndexExpression__Group_1__3__Impl
	rule__AIndexExpression__Group_1__4
;
finally {
	restoreStackSize(stackSize);
}

rule__AIndexExpression__Group_1__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAIndexExpressionAccess().getFuncAssignment_1_3()); }
(rule__AIndexExpression__FuncAssignment_1_3)
{ after(grammarAccess.getAIndexExpressionAccess().getFuncAssignment_1_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AIndexExpression__Group_1__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AIndexExpression__Group_1__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AIndexExpression__Group_1__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAIndexExpressionAccess().getRightParenthesisKeyword_1_4()); }

	')' 

{ after(grammarAccess.getAIndexExpressionAccess().getRightParenthesisKeyword_1_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__AReduceExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AReduceExpression__Group__0__Impl
	rule__AReduceExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AReduceExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAReduceExpressionAccess().getReduceKeyword_0()); }

	'reduce' 

{ after(grammarAccess.getAReduceExpressionAccess().getReduceKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AReduceExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AReduceExpression__Group__1__Impl
	rule__AReduceExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AReduceExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAReduceExpressionAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getAReduceExpressionAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AReduceExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AReduceExpression__Group__2__Impl
	rule__AReduceExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__AReduceExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAReduceExpressionAccess().getOpAssignment_2()); }
(rule__AReduceExpression__OpAssignment_2)
{ after(grammarAccess.getAReduceExpressionAccess().getOpAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AReduceExpression__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AReduceExpression__Group__3__Impl
	rule__AReduceExpression__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__AReduceExpression__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAReduceExpressionAccess().getCommaKeyword_3()); }

	',' 

{ after(grammarAccess.getAReduceExpressionAccess().getCommaKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AReduceExpression__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AReduceExpression__Group__4__Impl
	rule__AReduceExpression__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__AReduceExpression__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAReduceExpressionAccess().getProjectionAssignment_4()); }
(rule__AReduceExpression__ProjectionAssignment_4)
{ after(grammarAccess.getAReduceExpressionAccess().getProjectionAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AReduceExpression__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AReduceExpression__Group__5__Impl
	rule__AReduceExpression__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__AReduceExpression__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAReduceExpressionAccess().getCommaKeyword_5()); }

	',' 

{ after(grammarAccess.getAReduceExpressionAccess().getCommaKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AReduceExpression__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AReduceExpression__Group__6__Impl
	rule__AReduceExpression__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__AReduceExpression__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAReduceExpressionAccess().getExprAssignment_6()); }
(rule__AReduceExpression__ExprAssignment_6)
{ after(grammarAccess.getAReduceExpressionAccess().getExprAssignment_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AReduceExpression__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AReduceExpression__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AReduceExpression__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAReduceExpressionAccess().getRightParenthesisKeyword_7()); }

	')' 

{ after(grammarAccess.getAReduceExpressionAccess().getRightParenthesisKeyword_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


















rule__ARestrictExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ARestrictExpression__Group__0__Impl
	rule__ARestrictExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ARestrictExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getARestrictExpressionAccess().getDomainAssignment_0()); }
(rule__ARestrictExpression__DomainAssignment_0)
{ after(grammarAccess.getARestrictExpressionAccess().getDomainAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ARestrictExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ARestrictExpression__Group__1__Impl
	rule__ARestrictExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ARestrictExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getARestrictExpressionAccess().getColonKeyword_1()); }

	':' 

{ after(grammarAccess.getARestrictExpressionAccess().getColonKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ARestrictExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ARestrictExpression__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ARestrictExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getARestrictExpressionAccess().getExprAssignment_2()); }
(rule__ARestrictExpression__ExprAssignment_2)
{ after(grammarAccess.getARestrictExpressionAccess().getExprAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__AMultiArgArithmeticExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AMultiArgArithmeticExpression__Group__0__Impl
	rule__AMultiArgArithmeticExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AMultiArgArithmeticExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAMultiArgArithmeticExpressionAccess().getOpAssignment_0()); }
(rule__AMultiArgArithmeticExpression__OpAssignment_0)
{ after(grammarAccess.getAMultiArgArithmeticExpressionAccess().getOpAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AMultiArgArithmeticExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AMultiArgArithmeticExpression__Group__1__Impl
	rule__AMultiArgArithmeticExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AMultiArgArithmeticExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAMultiArgArithmeticExpressionAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getAMultiArgArithmeticExpressionAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AMultiArgArithmeticExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AMultiArgArithmeticExpression__Group__2__Impl
	rule__AMultiArgArithmeticExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__AMultiArgArithmeticExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAMultiArgArithmeticExpressionAccess().getExprsAssignment_2()); }
(rule__AMultiArgArithmeticExpression__ExprsAssignment_2)
{ after(grammarAccess.getAMultiArgArithmeticExpressionAccess().getExprsAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AMultiArgArithmeticExpression__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AMultiArgArithmeticExpression__Group__3__Impl
	rule__AMultiArgArithmeticExpression__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__AMultiArgArithmeticExpression__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getAMultiArgArithmeticExpressionAccess().getGroup_3()); }
(rule__AMultiArgArithmeticExpression__Group_3__0)
{ after(grammarAccess.getAMultiArgArithmeticExpressionAccess().getGroup_3()); }
)
(
{ before(grammarAccess.getAMultiArgArithmeticExpressionAccess().getGroup_3()); }
(rule__AMultiArgArithmeticExpression__Group_3__0)*
{ after(grammarAccess.getAMultiArgArithmeticExpressionAccess().getGroup_3()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AMultiArgArithmeticExpression__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AMultiArgArithmeticExpression__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AMultiArgArithmeticExpression__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAMultiArgArithmeticExpressionAccess().getRightParenthesisKeyword_4()); }

	')' 

{ after(grammarAccess.getAMultiArgArithmeticExpressionAccess().getRightParenthesisKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__AMultiArgArithmeticExpression__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AMultiArgArithmeticExpression__Group_3__0__Impl
	rule__AMultiArgArithmeticExpression__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AMultiArgArithmeticExpression__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAMultiArgArithmeticExpressionAccess().getCommaKeyword_3_0()); }

	',' 

{ after(grammarAccess.getAMultiArgArithmeticExpressionAccess().getCommaKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AMultiArgArithmeticExpression__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AMultiArgArithmeticExpression__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AMultiArgArithmeticExpression__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAMultiArgArithmeticExpressionAccess().getExprsAssignment_3_1()); }
(rule__AMultiArgArithmeticExpression__ExprsAssignment_3_1)
{ after(grammarAccess.getAMultiArgArithmeticExpressionAccess().getExprsAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AMultiArgLogicalExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AMultiArgLogicalExpression__Group__0__Impl
	rule__AMultiArgLogicalExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AMultiArgLogicalExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAMultiArgLogicalExpressionAccess().getOpAssignment_0()); }
(rule__AMultiArgLogicalExpression__OpAssignment_0)
{ after(grammarAccess.getAMultiArgLogicalExpressionAccess().getOpAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AMultiArgLogicalExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AMultiArgLogicalExpression__Group__1__Impl
	rule__AMultiArgLogicalExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AMultiArgLogicalExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAMultiArgLogicalExpressionAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getAMultiArgLogicalExpressionAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AMultiArgLogicalExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AMultiArgLogicalExpression__Group__2__Impl
	rule__AMultiArgLogicalExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__AMultiArgLogicalExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAMultiArgLogicalExpressionAccess().getExprsAssignment_2()); }
(rule__AMultiArgLogicalExpression__ExprsAssignment_2)
{ after(grammarAccess.getAMultiArgLogicalExpressionAccess().getExprsAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AMultiArgLogicalExpression__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AMultiArgLogicalExpression__Group__3__Impl
	rule__AMultiArgLogicalExpression__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__AMultiArgLogicalExpression__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getAMultiArgLogicalExpressionAccess().getGroup_3()); }
(rule__AMultiArgLogicalExpression__Group_3__0)
{ after(grammarAccess.getAMultiArgLogicalExpressionAccess().getGroup_3()); }
)
(
{ before(grammarAccess.getAMultiArgLogicalExpressionAccess().getGroup_3()); }
(rule__AMultiArgLogicalExpression__Group_3__0)*
{ after(grammarAccess.getAMultiArgLogicalExpressionAccess().getGroup_3()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AMultiArgLogicalExpression__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AMultiArgLogicalExpression__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AMultiArgLogicalExpression__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAMultiArgLogicalExpressionAccess().getRightParenthesisKeyword_4()); }

	')' 

{ after(grammarAccess.getAMultiArgLogicalExpressionAccess().getRightParenthesisKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__AMultiArgLogicalExpression__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AMultiArgLogicalExpression__Group_3__0__Impl
	rule__AMultiArgLogicalExpression__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AMultiArgLogicalExpression__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAMultiArgLogicalExpressionAccess().getCommaKeyword_3_0()); }

	',' 

{ after(grammarAccess.getAMultiArgLogicalExpressionAccess().getCommaKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AMultiArgLogicalExpression__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AMultiArgLogicalExpression__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AMultiArgLogicalExpression__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAMultiArgLogicalExpressionAccess().getExprsAssignment_3_1()); }
(rule__AMultiArgLogicalExpression__ExprsAssignment_3_1)
{ after(grammarAccess.getAMultiArgLogicalExpressionAccess().getExprsAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AExternalFunctionCall__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AExternalFunctionCall__Group__0__Impl
	rule__AExternalFunctionCall__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AExternalFunctionCall__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAExternalFunctionCallAccess().getFuncAssignment_0()); }
(rule__AExternalFunctionCall__FuncAssignment_0)
{ after(grammarAccess.getAExternalFunctionCallAccess().getFuncAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AExternalFunctionCall__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AExternalFunctionCall__Group__1__Impl
	rule__AExternalFunctionCall__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AExternalFunctionCall__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAExternalFunctionCallAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getAExternalFunctionCallAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AExternalFunctionCall__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AExternalFunctionCall__Group__2__Impl
	rule__AExternalFunctionCall__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__AExternalFunctionCall__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAExternalFunctionCallAccess().getGroup_2()); }
(rule__AExternalFunctionCall__Group_2__0)?
{ after(grammarAccess.getAExternalFunctionCallAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AExternalFunctionCall__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AExternalFunctionCall__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AExternalFunctionCall__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAExternalFunctionCallAccess().getRightParenthesisKeyword_3()); }

	')' 

{ after(grammarAccess.getAExternalFunctionCallAccess().getRightParenthesisKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__AExternalFunctionCall__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AExternalFunctionCall__Group_2__0__Impl
	rule__AExternalFunctionCall__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AExternalFunctionCall__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAExternalFunctionCallAccess().getExprsAssignment_2_0()); }
(rule__AExternalFunctionCall__ExprsAssignment_2_0)
{ after(grammarAccess.getAExternalFunctionCallAccess().getExprsAssignment_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AExternalFunctionCall__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AExternalFunctionCall__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AExternalFunctionCall__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAExternalFunctionCallAccess().getGroup_2_1()); }
(rule__AExternalFunctionCall__Group_2_1__0)*
{ after(grammarAccess.getAExternalFunctionCallAccess().getGroup_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AExternalFunctionCall__Group_2_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AExternalFunctionCall__Group_2_1__0__Impl
	rule__AExternalFunctionCall__Group_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AExternalFunctionCall__Group_2_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAExternalFunctionCallAccess().getCommaKeyword_2_1_0()); }

	',' 

{ after(grammarAccess.getAExternalFunctionCallAccess().getCommaKeyword_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AExternalFunctionCall__Group_2_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AExternalFunctionCall__Group_2_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AExternalFunctionCall__Group_2_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAExternalFunctionCallAccess().getExprsAssignment_2_1_1()); }
(rule__AExternalFunctionCall__ExprsAssignment_2_1_1)
{ after(grammarAccess.getAExternalFunctionCallAccess().getExprsAssignment_2_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AIndexList__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AIndexList__Group__0__Impl
	rule__AIndexList__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AIndexList__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAIndexListAccess().getAIndexListAction_0()); }
(

)
{ after(grammarAccess.getAIndexListAccess().getAIndexListAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AIndexList__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AIndexList__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AIndexList__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAIndexListAccess().getGroup_1()); }
(rule__AIndexList__Group_1__0)?
{ after(grammarAccess.getAIndexListAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AIndexList__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AIndexList__Group_1__0__Impl
	rule__AIndexList__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AIndexList__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAIndexListAccess().getIdsAssignment_1_0()); }
(rule__AIndexList__IdsAssignment_1_0)
{ after(grammarAccess.getAIndexListAccess().getIdsAssignment_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AIndexList__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AIndexList__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AIndexList__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAIndexListAccess().getGroup_1_1()); }
(rule__AIndexList__Group_1_1__0)*
{ after(grammarAccess.getAIndexListAccess().getGroup_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AIndexList__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AIndexList__Group_1_1__0__Impl
	rule__AIndexList__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AIndexList__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAIndexListAccess().getCommaKeyword_1_1_0()); }

	',' 

{ after(grammarAccess.getAIndexListAccess().getCommaKeyword_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AIndexList__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AIndexList__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AIndexList__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAIndexListAccess().getIdsAssignment_1_1_1()); }
(rule__AIndexList__IdsAssignment_1_1_1)
{ after(grammarAccess.getAIndexListAccess().getIdsAssignment_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__IndexAffineExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IndexAffineExpression__Group__0__Impl
	rule__IndexAffineExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IndexAffineExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIndexAffineExpressionAccess().getOP_MINUSTerminalRuleCall_0()); }
(	RULE_OP_MINUS)?
{ after(grammarAccess.getIndexAffineExpressionAccess().getOP_MINUSTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IndexAffineExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IndexAffineExpression__Group__1__Impl
	rule__IndexAffineExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IndexAffineExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIndexAffineExpressionAccess().getIndexAffineExpressionTerminalParserRuleCall_1()); }
	ruleIndexAffineExpressionTerminal
{ after(grammarAccess.getIndexAffineExpressionAccess().getIndexAffineExpressionTerminalParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IndexAffineExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IndexAffineExpression__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IndexAffineExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIndexAffineExpressionAccess().getGroup_2()); }
(rule__IndexAffineExpression__Group_2__0)*
{ after(grammarAccess.getIndexAffineExpressionAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__IndexAffineExpression__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IndexAffineExpression__Group_2__0__Impl
	rule__IndexAffineExpression__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IndexAffineExpression__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIndexAffineExpressionAccess().getAlternatives_2_0()); }
(rule__IndexAffineExpression__Alternatives_2_0)
{ after(grammarAccess.getIndexAffineExpressionAccess().getAlternatives_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IndexAffineExpression__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IndexAffineExpression__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IndexAffineExpression__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIndexAffineExpressionAccess().getIndexAffineExpressionParserRuleCall_2_1()); }
	ruleIndexAffineExpression
{ after(grammarAccess.getIndexAffineExpressionAccess().getIndexAffineExpressionParserRuleCall_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__IndexAffineExpressionTerminal__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IndexAffineExpressionTerminal__Group_1__0__Impl
	rule__IndexAffineExpressionTerminal__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IndexAffineExpressionTerminal__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIndexAffineExpressionTerminalAccess().getINTTerminalRuleCall_1_0()); }
(	RULE_INT)?
{ after(grammarAccess.getIndexAffineExpressionTerminalAccess().getINTTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IndexAffineExpressionTerminal__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IndexAffineExpressionTerminal__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IndexAffineExpressionTerminal__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIndexAffineExpressionTerminalAccess().getIndexIdentifierParserRuleCall_1_1()); }
	ruleIndexIdentifier
{ after(grammarAccess.getIndexAffineExpressionTerminalAccess().getIndexIdentifierParserRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AIndexAffineExpressionList__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AIndexAffineExpressionList__Group__0__Impl
	rule__AIndexAffineExpressionList__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AIndexAffineExpressionList__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAIndexAffineExpressionListAccess().getAIndexAffineExpressionListAction_0()); }
(

)
{ after(grammarAccess.getAIndexAffineExpressionListAccess().getAIndexAffineExpressionListAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AIndexAffineExpressionList__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AIndexAffineExpressionList__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AIndexAffineExpressionList__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAIndexAffineExpressionListAccess().getGroup_1()); }
(rule__AIndexAffineExpressionList__Group_1__0)?
{ after(grammarAccess.getAIndexAffineExpressionListAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AIndexAffineExpressionList__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AIndexAffineExpressionList__Group_1__0__Impl
	rule__AIndexAffineExpressionList__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AIndexAffineExpressionList__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAIndexAffineExpressionListAccess().getExprsAssignment_1_0()); }
(rule__AIndexAffineExpressionList__ExprsAssignment_1_0)
{ after(grammarAccess.getAIndexAffineExpressionListAccess().getExprsAssignment_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AIndexAffineExpressionList__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AIndexAffineExpressionList__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AIndexAffineExpressionList__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAIndexAffineExpressionListAccess().getGroup_1_1()); }
(rule__AIndexAffineExpressionList__Group_1_1__0)*
{ after(grammarAccess.getAIndexAffineExpressionListAccess().getGroup_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AIndexAffineExpressionList__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AIndexAffineExpressionList__Group_1_1__0__Impl
	rule__AIndexAffineExpressionList__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AIndexAffineExpressionList__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAIndexAffineExpressionListAccess().getCommaKeyword_1_1_0()); }

	',' 

{ after(grammarAccess.getAIndexAffineExpressionListAccess().getCommaKeyword_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AIndexAffineExpressionList__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AIndexAffineExpressionList__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AIndexAffineExpressionList__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAIndexAffineExpressionListAccess().getExprsAssignment_1_1_1()); }
(rule__AIndexAffineExpressionList__ExprsAssignment_1_1_1)
{ after(grammarAccess.getAIndexAffineExpressionListAccess().getExprsAssignment_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AFunction__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AFunction__Group_0__0__Impl
	rule__AFunction__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AFunction__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAFunctionAccess().getLeftParenthesisKeyword_0_0()); }

	'(' 

{ after(grammarAccess.getAFunctionAccess().getLeftParenthesisKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AFunction__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AFunction__Group_0__1__Impl
	rule__AFunction__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AFunction__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAFunctionAccess().getIndexesAssignment_0_1()); }
(rule__AFunction__IndexesAssignment_0_1)
{ after(grammarAccess.getAFunctionAccess().getIndexesAssignment_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AFunction__Group_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AFunction__Group_0__2__Impl
	rule__AFunction__Group_0__3
;
finally {
	restoreStackSize(stackSize);
}

rule__AFunction__Group_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAFunctionAccess().getHyphenMinusGreaterThanSignKeyword_0_2()); }

	'->' 

{ after(grammarAccess.getAFunctionAccess().getHyphenMinusGreaterThanSignKeyword_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AFunction__Group_0__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AFunction__Group_0__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AFunction__Group_0__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAFunctionAccess().getRightParenthesisKeyword_0_3()); }

	')' 

{ after(grammarAccess.getAFunctionAccess().getRightParenthesisKeyword_0_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__AFunction__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AFunction__Group_1__0__Impl
	rule__AFunction__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AFunction__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAFunctionAccess().getLeftParenthesisKeyword_1_0()); }

	'(' 

{ after(grammarAccess.getAFunctionAccess().getLeftParenthesisKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AFunction__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AFunction__Group_1__1__Impl
	rule__AFunction__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AFunction__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAFunctionAccess().getIndexesAssignment_1_1()); }
(rule__AFunction__IndexesAssignment_1_1)
{ after(grammarAccess.getAFunctionAccess().getIndexesAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AFunction__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AFunction__Group_1__2__Impl
	rule__AFunction__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__AFunction__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAFunctionAccess().getHyphenMinusGreaterThanSignKeyword_1_2()); }

	'->' 

{ after(grammarAccess.getAFunctionAccess().getHyphenMinusGreaterThanSignKeyword_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AFunction__Group_1__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AFunction__Group_1__3__Impl
	rule__AFunction__Group_1__4
;
finally {
	restoreStackSize(stackSize);
}

rule__AFunction__Group_1__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAFunctionAccess().getFuncAssignment_1_3()); }
(rule__AFunction__FuncAssignment_1_3)
{ after(grammarAccess.getAFunctionAccess().getFuncAssignment_1_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AFunction__Group_1__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AFunction__Group_1__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AFunction__Group_1__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAFunctionAccess().getRightParenthesisKeyword_1_4()); }

	')' 

{ after(grammarAccess.getAFunctionAccess().getRightParenthesisKeyword_1_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__AFunctionInArrayNotation__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AFunctionInArrayNotation__Group__0__Impl
	rule__AFunctionInArrayNotation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AFunctionInArrayNotation__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAFunctionInArrayNotationAccess().getLeftSquareBracketKeyword_0()); }

	'[' 

{ after(grammarAccess.getAFunctionInArrayNotationAccess().getLeftSquareBracketKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AFunctionInArrayNotation__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AFunctionInArrayNotation__Group__1__Impl
	rule__AFunctionInArrayNotation__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AFunctionInArrayNotation__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAFunctionInArrayNotationAccess().getNewIdsAssignment_1()); }
(rule__AFunctionInArrayNotation__NewIdsAssignment_1)
{ after(grammarAccess.getAFunctionInArrayNotationAccess().getNewIdsAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AFunctionInArrayNotation__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AFunctionInArrayNotation__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AFunctionInArrayNotation__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAFunctionInArrayNotationAccess().getRightSquareBracketKeyword_2()); }

	']' 

{ after(grammarAccess.getAFunctionInArrayNotationAccess().getRightSquareBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__AType__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AType__Group__0__Impl
	rule__AType__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AType__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getATypeAccess().getUnsignedAssignment_0()); }
(rule__AType__UnsignedAssignment_0)?
{ after(grammarAccess.getATypeAccess().getUnsignedAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AType__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AType__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AType__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getATypeAccess().getTypeAssignment_1()); }
(rule__AType__TypeAssignment_1)
{ after(grammarAccess.getATypeAccess().getTypeAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__AProgram__ExternalFunctionsAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAProgramAccess().getExternalFunctionsAExternalFunctionDeclarationParserRuleCall_0_0()); }
	ruleAExternalFunctionDeclaration{ after(grammarAccess.getAProgramAccess().getExternalFunctionsAExternalFunctionDeclarationParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AProgram__SystemsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAProgramAccess().getSystemsAAffineSystemParserRuleCall_1_0()); }
	ruleAAffineSystem{ after(grammarAccess.getAProgramAccess().getSystemsAAffineSystemParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AExternalFunctionDeclaration__OutputAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAExternalFunctionDeclarationAccess().getOutputATypeParserRuleCall_0_0()); }
	ruleAType{ after(grammarAccess.getAExternalFunctionDeclarationAccess().getOutputATypeParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AExternalFunctionDeclaration__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAExternalFunctionDeclarationAccess().getNameAExternalFunctionIdentifierParserRuleCall_1_0()); }
	ruleAExternalFunctionIdentifier{ after(grammarAccess.getAExternalFunctionDeclarationAccess().getNameAExternalFunctionIdentifierParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AExternalFunctionDeclaration__InputsAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAExternalFunctionDeclarationAccess().getInputsATypeParserRuleCall_3_0()); }
	ruleAType{ after(grammarAccess.getAExternalFunctionDeclarationAccess().getInputsATypeParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AExternalFunctionDeclaration__InputsAssignment_4_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAExternalFunctionDeclarationAccess().getInputsATypeParserRuleCall_4_1_0()); }
	ruleAType{ after(grammarAccess.getAExternalFunctionDeclarationAccess().getInputsATypeParserRuleCall_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AExternalFunctionIdentifier__NameAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAExternalFunctionIdentifierAccess().getNameIDTerminalRuleCall_0()); }
	RULE_ID{ after(grammarAccess.getAExternalFunctionIdentifierAccess().getNameIDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AAffineSystem__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAAffineSystemAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getAAffineSystemAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AAffineSystem__ParametersAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAAffineSystemAccess().getParametersADomainParserRuleCall_2_0()); }
	ruleADomain{ after(grammarAccess.getAAffineSystemAccess().getParametersADomainParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AAffineSystem__InputDeclarationsAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAAffineSystemAccess().getInputDeclarationsAInputDeclarationParserRuleCall_3_1_0()); }
	ruleAInputDeclaration{ after(grammarAccess.getAAffineSystemAccess().getInputDeclarationsAInputDeclarationParserRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AAffineSystem__OutputDeclarationsAssignment_4_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAAffineSystemAccess().getOutputDeclarationsAOutputDeclarationParserRuleCall_4_1_0()); }
	ruleAOutputDeclaration{ after(grammarAccess.getAAffineSystemAccess().getOutputDeclarationsAOutputDeclarationParserRuleCall_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AAffineSystem__LocalvarDeclarationsAssignment_5_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAAffineSystemAccess().getLocalvarDeclarationsALocalDeclarationParserRuleCall_5_1_0()); }
	ruleALocalDeclaration{ after(grammarAccess.getAAffineSystemAccess().getLocalvarDeclarationsALocalDeclarationParserRuleCall_5_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AAffineSystem__EquationsAssignment_6_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAAffineSystemAccess().getEquationsAStandardEquationParserRuleCall_6_1_0()); }
	ruleAStandardEquation{ after(grammarAccess.getAAffineSystemAccess().getEquationsAStandardEquationParserRuleCall_6_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AOutputDeclaration__TypeAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAOutputDeclarationAccess().getTypeATypeParserRuleCall_0_0()); }
	ruleAType{ after(grammarAccess.getAOutputDeclarationAccess().getTypeATypeParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AOutputDeclaration__IdentifierListAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAOutputDeclarationAccess().getIdentifierListAIdentifierListParserRuleCall_1_0()); }
	ruleAIdentifierList{ after(grammarAccess.getAOutputDeclarationAccess().getIdentifierListAIdentifierListParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AOutputDeclaration__DomainAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAOutputDeclarationAccess().getDomainADomainParserRuleCall_2_0()); }
	ruleADomain{ after(grammarAccess.getAOutputDeclarationAccess().getDomainADomainParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AInputDeclaration__TypeAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAInputDeclarationAccess().getTypeATypeParserRuleCall_0_0()); }
	ruleAType{ after(grammarAccess.getAInputDeclarationAccess().getTypeATypeParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AInputDeclaration__IdentifierListAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAInputDeclarationAccess().getIdentifierListAIdentifierListParserRuleCall_1_0()); }
	ruleAIdentifierList{ after(grammarAccess.getAInputDeclarationAccess().getIdentifierListAIdentifierListParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AInputDeclaration__DomainAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAInputDeclarationAccess().getDomainADomainParserRuleCall_2_0()); }
	ruleADomain{ after(grammarAccess.getAInputDeclarationAccess().getDomainADomainParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ALocalDeclaration__TypeAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getALocalDeclarationAccess().getTypeATypeParserRuleCall_0_0()); }
	ruleAType{ after(grammarAccess.getALocalDeclarationAccess().getTypeATypeParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ALocalDeclaration__IdentifierListAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getALocalDeclarationAccess().getIdentifierListAIdentifierListParserRuleCall_1_0()); }
	ruleAIdentifierList{ after(grammarAccess.getALocalDeclarationAccess().getIdentifierListAIdentifierListParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ALocalDeclaration__DomainAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getALocalDeclarationAccess().getDomainADomainParserRuleCall_2_0()); }
	ruleADomain{ after(grammarAccess.getALocalDeclarationAccess().getDomainADomainParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AIdentifierList__IdentifiersAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAIdentifierListAccess().getIdentifiersVariableIdentifierParserRuleCall_0_0()); }
	ruleVariableIdentifier{ after(grammarAccess.getAIdentifierListAccess().getIdentifiersVariableIdentifierParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AIdentifierList__IdentifiersAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAIdentifierListAccess().getIdentifiersVariableIdentifierParserRuleCall_1_1_0()); }
	ruleVariableIdentifier{ after(grammarAccess.getAIdentifierListAccess().getIdentifiersVariableIdentifierParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ADomain__PolyhedraAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getADomainAccess().getPolyhedraAPolyhedronParserRuleCall_0_0()); }
	ruleAPolyhedron{ after(grammarAccess.getADomainAccess().getPolyhedraAPolyhedronParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ADomain__PolyhedraAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getADomainAccess().getPolyhedraAPolyhedronParserRuleCall_1_1_0()); }
	ruleAPolyhedron{ after(grammarAccess.getADomainAccess().getPolyhedraAPolyhedronParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__APolyhedron__IndexesAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAPolyhedronAccess().getIndexesAIndexListParserRuleCall_1_0()); }
	ruleAIndexList{ after(grammarAccess.getAPolyhedronAccess().getIndexesAIndexListParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__APolyhedron__ConstraintsAssignment_3_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAPolyhedronAccess().getConstraintsInEqualityParserRuleCall_3_0_0()); }
	ruleInEquality{ after(grammarAccess.getAPolyhedronAccess().getConstraintsInEqualityParserRuleCall_3_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__APolyhedron__ConstraintsAssignment_3_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAPolyhedronAccess().getConstraintsInEqualityParserRuleCall_3_1_1_0()); }
	ruleInEquality{ after(grammarAccess.getAPolyhedronAccess().getConstraintsInEqualityParserRuleCall_3_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AStandardEquation__VarAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAStandardEquationAccess().getVarIDTerminalRuleCall_0_0()); }
	RULE_ID{ after(grammarAccess.getAStandardEquationAccess().getVarIDTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AStandardEquation__IndexesAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAStandardEquationAccess().getIndexesAIndexListParserRuleCall_1_1_0()); }
	ruleAIndexList{ after(grammarAccess.getAStandardEquationAccess().getIndexesAIndexListParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AStandardEquation__ExprAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAStandardEquationAccess().getExprAAlphabetsExpressionParserRuleCall_3_0()); }
	ruleAAlphabetsExpression{ after(grammarAccess.getAStandardEquationAccess().getExprAAlphabetsExpressionParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AOrExpression__OperatorAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAOrExpressionAccess().getOperatorAlternatives_1_1_0()); }
(rule__AOrExpression__OperatorAlternatives_1_1_0)
{ after(grammarAccess.getAOrExpressionAccess().getOperatorAlternatives_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AOrExpression__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAOrExpressionAccess().getRightAAndExpressionParserRuleCall_1_2_0()); }
	ruleAAndExpression{ after(grammarAccess.getAOrExpressionAccess().getRightAAndExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AAndExpression__OperatorAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAAndExpressionAccess().getOperatorAlternatives_1_1_0()); }
(rule__AAndExpression__OperatorAlternatives_1_1_0)
{ after(grammarAccess.getAAndExpressionAccess().getOperatorAlternatives_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AAndExpression__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAAndExpressionAccess().getRightARelationalExpressionParserRuleCall_1_2_0()); }
	ruleARelationalExpression{ after(grammarAccess.getAAndExpressionAccess().getRightARelationalExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ARelationalExpression__OperatorAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getARelationalExpressionAccess().getOperatorRelationalOpParserRuleCall_1_1_0()); }
	ruleRelationalOp{ after(grammarAccess.getARelationalExpressionAccess().getOperatorRelationalOpParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ARelationalExpression__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getARelationalExpressionAccess().getRightAAdditiveExpressionParserRuleCall_1_2_0()); }
	ruleAAdditiveExpression{ after(grammarAccess.getARelationalExpressionAccess().getRightAAdditiveExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AAdditiveExpression__OpAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAAdditiveExpressionAccess().getOpAlternatives_1_1_0()); }
(rule__AAdditiveExpression__OpAlternatives_1_1_0)
{ after(grammarAccess.getAAdditiveExpressionAccess().getOpAlternatives_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AAdditiveExpression__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAAdditiveExpressionAccess().getRightAMultiplicativeExpressionParserRuleCall_1_2_0()); }
	ruleAMultiplicativeExpression{ after(grammarAccess.getAAdditiveExpressionAccess().getRightAMultiplicativeExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AMultiplicativeExpression__OpAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAMultiplicativeExpressionAccess().getOpAlternatives_1_1_0()); }
(rule__AMultiplicativeExpression__OpAlternatives_1_1_0)
{ after(grammarAccess.getAMultiplicativeExpressionAccess().getOpAlternatives_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AMultiplicativeExpression__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAMultiplicativeExpressionAccess().getRightAMinMaxExpressionParserRuleCall_1_2_0()); }
	ruleAMinMaxExpression{ after(grammarAccess.getAMultiplicativeExpressionAccess().getRightAMinMaxExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AMinMaxExpression__OpAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAMinMaxExpressionAccess().getOpAlternatives_1_1_0()); }
(rule__AMinMaxExpression__OpAlternatives_1_1_0)
{ after(grammarAccess.getAMinMaxExpressionAccess().getOpAlternatives_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AMinMaxExpression__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAMinMaxExpressionAccess().getRightAUnaryOrTerminalExpressionParserRuleCall_1_2_0()); }
	ruleAUnaryOrTerminalExpression{ after(grammarAccess.getAMinMaxExpressionAccess().getRightAUnaryOrTerminalExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ANotExpression__OpAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getANotExpressionAccess().getOpNotKeyword_0_0()); }
(
{ before(grammarAccess.getANotExpressionAccess().getOpNotKeyword_0_0()); }

	'not' 

{ after(grammarAccess.getANotExpressionAccess().getOpNotKeyword_0_0()); }
)

{ after(grammarAccess.getANotExpressionAccess().getOpNotKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ANotExpression__ExprAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getANotExpressionAccess().getExprAAlphabetsTerminalExpressionParserRuleCall_1_0()); }
	ruleAAlphabetsTerminalExpression{ after(grammarAccess.getANotExpressionAccess().getExprAAlphabetsTerminalExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ANegateExpression__OpAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getANegateExpressionAccess().getOpOP_MINUSTerminalRuleCall_0_0()); }
	RULE_OP_MINUS{ after(grammarAccess.getANegateExpressionAccess().getOpOP_MINUSTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ANegateExpression__ExprAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getANegateExpressionAccess().getExprAAlphabetsTerminalExpressionParserRuleCall_1_0()); }
	ruleAAlphabetsTerminalExpression{ after(grammarAccess.getANegateExpressionAccess().getExprAAlphabetsTerminalExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ACaseExpression__ExprsAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getACaseExpressionAccess().getExprsAAlphabetsExpressionParserRuleCall_1_0_0()); }
	ruleAAlphabetsExpression{ after(grammarAccess.getACaseExpressionAccess().getExprsAAlphabetsExpressionParserRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ADependenceExpression__FuncAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getADependenceExpressionAccess().getFuncAFunctionParserRuleCall_0_0()); }
	ruleAFunction{ after(grammarAccess.getADependenceExpressionAccess().getFuncAFunctionParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ADependenceExpression__ExprAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getADependenceExpressionAccess().getExprAAlphabetsTerminalExpressionParserRuleCall_2_0()); }
	ruleAAlphabetsTerminalExpression{ after(grammarAccess.getADependenceExpressionAccess().getExprAAlphabetsTerminalExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ADependenceInArrayNotation__VarAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getADependenceInArrayNotationAccess().getVarVariableIdentifierParserRuleCall_0_0()); }
	ruleVariableIdentifier{ after(grammarAccess.getADependenceInArrayNotationAccess().getVarVariableIdentifierParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ADependenceInArrayNotation__DepAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getADependenceInArrayNotationAccess().getDepAIndexAffineExpressionListParserRuleCall_2_0()); }
	ruleAIndexAffineExpressionList{ after(grammarAccess.getADependenceInArrayNotationAccess().getDepAIndexAffineExpressionListParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AIfExpression__CondAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAIfExpressionAccess().getCondAAlphabetsExpressionParserRuleCall_1_0()); }
	ruleAAlphabetsExpression{ after(grammarAccess.getAIfExpressionAccess().getCondAAlphabetsExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AIfExpression__ThenAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAIfExpressionAccess().getThenAAlphabetsExpressionParserRuleCall_3_0()); }
	ruleAAlphabetsExpression{ after(grammarAccess.getAIfExpressionAccess().getThenAAlphabetsExpressionParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AIfExpression__ElseAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAIfExpressionAccess().getElseAAlphabetsExpressionParserRuleCall_5_0()); }
	ruleAAlphabetsExpression{ after(grammarAccess.getAIfExpressionAccess().getElseAAlphabetsExpressionParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AIndexExpression__FuncAssignment_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAIndexExpressionAccess().getFuncIndexAffineExpressionParserRuleCall_0_1_0()); }
	ruleIndexAffineExpression{ after(grammarAccess.getAIndexExpressionAccess().getFuncIndexAffineExpressionParserRuleCall_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AIndexExpression__IndexesAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAIndexExpressionAccess().getIndexesAIndexListParserRuleCall_1_1_0()); }
	ruleAIndexList{ after(grammarAccess.getAIndexExpressionAccess().getIndexesAIndexListParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AIndexExpression__FuncAssignment_1_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAIndexExpressionAccess().getFuncIndexAffineExpressionParserRuleCall_1_3_0()); }
	ruleIndexAffineExpression{ after(grammarAccess.getAIndexExpressionAccess().getFuncIndexAffineExpressionParserRuleCall_1_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AReduceExpression__OpAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAReduceExpressionAccess().getOpReductionOpParserRuleCall_2_0()); }
	ruleReductionOp{ after(grammarAccess.getAReduceExpressionAccess().getOpReductionOpParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AReduceExpression__ProjectionAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAReduceExpressionAccess().getProjectionAlternatives_4_0()); }
(rule__AReduceExpression__ProjectionAlternatives_4_0)
{ after(grammarAccess.getAReduceExpressionAccess().getProjectionAlternatives_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AReduceExpression__ExprAssignment_6
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAReduceExpressionAccess().getExprAAlphabetsExpressionParserRuleCall_6_0()); }
	ruleAAlphabetsExpression{ after(grammarAccess.getAReduceExpressionAccess().getExprAAlphabetsExpressionParserRuleCall_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ARestrictExpression__DomainAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getARestrictExpressionAccess().getDomainADomainParserRuleCall_0_0()); }
	ruleADomain{ after(grammarAccess.getARestrictExpressionAccess().getDomainADomainParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ARestrictExpression__ExprAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getARestrictExpressionAccess().getExprAAlphabetsExpressionParserRuleCall_2_0()); }
	ruleAAlphabetsExpression{ after(grammarAccess.getARestrictExpressionAccess().getExprAAlphabetsExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AVariableExpression__VarAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAVariableExpressionAccess().getVarVariableIdentifierParserRuleCall_0()); }
	ruleVariableIdentifier{ after(grammarAccess.getAVariableExpressionAccess().getVarVariableIdentifierParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ABooleanExpression__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getABooleanExpressionAccess().getValueBOOLEANTerminalRuleCall_0()); }
	RULE_BOOLEAN{ after(grammarAccess.getABooleanExpressionAccess().getValueBOOLEANTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AIntegerExpression__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAIntegerExpressionAccess().getValueINTTerminalRuleCall_0()); }
	RULE_INT{ after(grammarAccess.getAIntegerExpressionAccess().getValueINTTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ARealExpression__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getARealExpressionAccess().getValueREALTerminalRuleCall_0()); }
	RULE_REAL{ after(grammarAccess.getARealExpressionAccess().getValueREALTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AMultiArgArithmeticExpression__OpAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAMultiArgArithmeticExpressionAccess().getOpArithmeticOpParserRuleCall_0_0()); }
	ruleArithmeticOp{ after(grammarAccess.getAMultiArgArithmeticExpressionAccess().getOpArithmeticOpParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AMultiArgArithmeticExpression__ExprsAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAMultiArgArithmeticExpressionAccess().getExprsAAlphabetsExpressionParserRuleCall_2_0()); }
	ruleAAlphabetsExpression{ after(grammarAccess.getAMultiArgArithmeticExpressionAccess().getExprsAAlphabetsExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AMultiArgArithmeticExpression__ExprsAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAMultiArgArithmeticExpressionAccess().getExprsAAlphabetsExpressionParserRuleCall_3_1_0()); }
	ruleAAlphabetsExpression{ after(grammarAccess.getAMultiArgArithmeticExpressionAccess().getExprsAAlphabetsExpressionParserRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AMultiArgLogicalExpression__OpAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAMultiArgLogicalExpressionAccess().getOpLogicalOpParserRuleCall_0_0()); }
	ruleLogicalOp{ after(grammarAccess.getAMultiArgLogicalExpressionAccess().getOpLogicalOpParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AMultiArgLogicalExpression__ExprsAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAMultiArgLogicalExpressionAccess().getExprsAAlphabetsExpressionParserRuleCall_2_0()); }
	ruleAAlphabetsExpression{ after(grammarAccess.getAMultiArgLogicalExpressionAccess().getExprsAAlphabetsExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AMultiArgLogicalExpression__ExprsAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAMultiArgLogicalExpressionAccess().getExprsAAlphabetsExpressionParserRuleCall_3_1_0()); }
	ruleAAlphabetsExpression{ after(grammarAccess.getAMultiArgLogicalExpressionAccess().getExprsAAlphabetsExpressionParserRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AExternalFunctionCall__FuncAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAExternalFunctionCallAccess().getFuncIDTerminalRuleCall_0_0()); }
	RULE_ID{ after(grammarAccess.getAExternalFunctionCallAccess().getFuncIDTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AExternalFunctionCall__ExprsAssignment_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAExternalFunctionCallAccess().getExprsAAlphabetsExpressionParserRuleCall_2_0_0()); }
	ruleAAlphabetsExpression{ after(grammarAccess.getAExternalFunctionCallAccess().getExprsAAlphabetsExpressionParserRuleCall_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AExternalFunctionCall__ExprsAssignment_2_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAExternalFunctionCallAccess().getExprsAAlphabetsExpressionParserRuleCall_2_1_1_0()); }
	ruleAAlphabetsExpression{ after(grammarAccess.getAExternalFunctionCallAccess().getExprsAAlphabetsExpressionParserRuleCall_2_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AIndexList__IdsAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAIndexListAccess().getIdsIndexIdentifierParserRuleCall_1_0_0()); }
	ruleIndexIdentifier{ after(grammarAccess.getAIndexListAccess().getIdsIndexIdentifierParserRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AIndexList__IdsAssignment_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAIndexListAccess().getIdsIndexIdentifierParserRuleCall_1_1_1_0()); }
	ruleIndexIdentifier{ after(grammarAccess.getAIndexListAccess().getIdsIndexIdentifierParserRuleCall_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AIndexAffineExpressionList__ExprsAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAIndexAffineExpressionListAccess().getExprsIndexAffineExpressionParserRuleCall_1_0_0()); }
	ruleIndexAffineExpression{ after(grammarAccess.getAIndexAffineExpressionListAccess().getExprsIndexAffineExpressionParserRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AIndexAffineExpressionList__ExprsAssignment_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAIndexAffineExpressionListAccess().getExprsIndexAffineExpressionParserRuleCall_1_1_1_0()); }
	ruleIndexAffineExpression{ after(grammarAccess.getAIndexAffineExpressionListAccess().getExprsIndexAffineExpressionParserRuleCall_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AFunction__IndexesAssignment_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAFunctionAccess().getIndexesAIndexListParserRuleCall_0_1_0()); }
	ruleAIndexList{ after(grammarAccess.getAFunctionAccess().getIndexesAIndexListParserRuleCall_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AFunction__IndexesAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAFunctionAccess().getIndexesAIndexListParserRuleCall_1_1_0()); }
	ruleAIndexList{ after(grammarAccess.getAFunctionAccess().getIndexesAIndexListParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AFunction__FuncAssignment_1_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAFunctionAccess().getFuncAIndexAffineExpressionListParserRuleCall_1_3_0()); }
	ruleAIndexAffineExpressionList{ after(grammarAccess.getAFunctionAccess().getFuncAIndexAffineExpressionListParserRuleCall_1_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AFunctionInArrayNotation__NewIdsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAFunctionInArrayNotationAccess().getNewIdsAIndexAffineExpressionListParserRuleCall_1_0()); }
	ruleAIndexAffineExpressionList{ after(grammarAccess.getAFunctionInArrayNotationAccess().getNewIdsAIndexAffineExpressionListParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AType__UnsignedAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getATypeAccess().getUnsignedUnsignedKeyword_0_0()); }
(
{ before(grammarAccess.getATypeAccess().getUnsignedUnsignedKeyword_0_0()); }

	'unsigned' 

{ after(grammarAccess.getATypeAccess().getUnsignedUnsignedKeyword_0_0()); }
)

{ after(grammarAccess.getATypeAccess().getUnsignedUnsignedKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AType__TypeAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getATypeAccess().getTypeAlternatives_1_0()); }
(rule__AType__TypeAlternatives_1_0)
{ after(grammarAccess.getATypeAccess().getTypeAlternatives_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_OP_AND : 'and';

RULE_OP_MAX : 'max';

RULE_OP_MIN : 'min';

RULE_OP_MUL : '*';

RULE_OP_OR : 'or';

RULE_OP_PLUS : '+';

RULE_XOP_OR : 'xor';

RULE_OP_MINUS : '-';

RULE_OP_DIV : '/';

RULE_OP_MOD : '%';

RULE_OP_NAND : 'nand';

RULE_OP_EQ : '==';

RULE_OP_GE : '>=';

RULE_OP_GT : '>';

RULE_OP_LE : '<=';

RULE_OP_LT : '<';

RULE_OP_NE : '!=';

RULE_BOOLEAN : ('true'|'false');

RULE_REAL : ('0'..'9')+ '.' ('0'..'9')+;

RULE_INTERSECTION : '&&';

RULE_UNION : '||';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


