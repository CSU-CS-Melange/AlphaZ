/*
* generated by Xtext
*/
package edu.csu.melange.alphabets.xtext.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import edu.csu.melange.alphabets.xtext.services.AlphabetsGrammarAccess;

public class AlphabetsParser extends AbstractContentAssistParser {
	
	@Inject
	private AlphabetsGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected edu.csu.melange.alphabets.xtext.ui.contentassist.antlr.internal.InternalAlphabetsParser createParser() {
		edu.csu.melange.alphabets.xtext.ui.contentassist.antlr.internal.InternalAlphabetsParser result = new edu.csu.melange.alphabets.xtext.ui.contentassist.antlr.internal.InternalAlphabetsParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getInEqualityAccess().getAlternatives_0(), "rule__InEquality__Alternatives_0");
					put(grammarAccess.getInEqualityAccess().getAlternatives_1_1(), "rule__InEquality__Alternatives_1_1");
					put(grammarAccess.getIDListAccess().getAlternatives(), "rule__IDList__Alternatives");
					put(grammarAccess.getIDExpressionAccess().getAlternatives_1_0(), "rule__IDExpression__Alternatives_1_0");
					put(grammarAccess.getInEqIDAccess().getAlternatives_1(), "rule__InEqID__Alternatives_1");
					put(grammarAccess.getAAlphabetsExpressionAccess().getAlternatives(), "rule__AAlphabetsExpression__Alternatives");
					put(grammarAccess.getAAlphabetsTerminalExpressionAccess().getAlternatives(), "rule__AAlphabetsTerminalExpression__Alternatives");
					put(grammarAccess.getAOrExpressionAccess().getOperatorAlternatives_1_1_0(), "rule__AOrExpression__OperatorAlternatives_1_1_0");
					put(grammarAccess.getAAndExpressionAccess().getOperatorAlternatives_1_1_0(), "rule__AAndExpression__OperatorAlternatives_1_1_0");
					put(grammarAccess.getAAdditiveExpressionAccess().getOpAlternatives_1_1_0(), "rule__AAdditiveExpression__OpAlternatives_1_1_0");
					put(grammarAccess.getAMultiplicativeExpressionAccess().getOpAlternatives_1_1_0(), "rule__AMultiplicativeExpression__OpAlternatives_1_1_0");
					put(grammarAccess.getAMinMaxExpressionAccess().getOpAlternatives_1_1_0(), "rule__AMinMaxExpression__OpAlternatives_1_1_0");
					put(grammarAccess.getAUnaryOrTerminalExpressionAccess().getAlternatives(), "rule__AUnaryOrTerminalExpression__Alternatives");
					put(grammarAccess.getAUnaryExpressionAccess().getAlternatives(), "rule__AUnaryExpression__Alternatives");
					put(grammarAccess.getAIndexExpressionAccess().getAlternatives(), "rule__AIndexExpression__Alternatives");
					put(grammarAccess.getAReduceExpressionAccess().getProjectionAlternatives_4_0(), "rule__AReduceExpression__ProjectionAlternatives_4_0");
					put(grammarAccess.getAConstantExpressionAccess().getAlternatives(), "rule__AConstantExpression__Alternatives");
					put(grammarAccess.getAMultiArgExpressionAccess().getAlternatives(), "rule__AMultiArgExpression__Alternatives");
					put(grammarAccess.getIndexAffineExpressionAccess().getAlternatives_2_0(), "rule__IndexAffineExpression__Alternatives_2_0");
					put(grammarAccess.getIndexAffineExpressionTerminalAccess().getAlternatives(), "rule__IndexAffineExpressionTerminal__Alternatives");
					put(grammarAccess.getAFunctionAccess().getAlternatives(), "rule__AFunction__Alternatives");
					put(grammarAccess.getATypeAccess().getTypeAlternatives_1_0(), "rule__AType__TypeAlternatives_1_0");
					put(grammarAccess.getATypeIntegerAccess().getAlternatives(), "rule__ATypeInteger__Alternatives");
					put(grammarAccess.getATypeFloatAccess().getAlternatives(), "rule__ATypeFloat__Alternatives");
					put(grammarAccess.getReductionOpAccess().getAlternatives(), "rule__ReductionOp__Alternatives");
					put(grammarAccess.getArithmeticOpAccess().getAlternatives(), "rule__ArithmeticOp__Alternatives");
					put(grammarAccess.getLogicalOpAccess().getAlternatives(), "rule__LogicalOp__Alternatives");
					put(grammarAccess.getRelationalOpAccess().getAlternatives(), "rule__RelationalOp__Alternatives");
					put(grammarAccess.getAProgramAccess().getGroup(), "rule__AProgram__Group__0");
					put(grammarAccess.getAExternalFunctionDeclarationAccess().getGroup(), "rule__AExternalFunctionDeclaration__Group__0");
					put(grammarAccess.getAExternalFunctionDeclarationAccess().getGroup_4(), "rule__AExternalFunctionDeclaration__Group_4__0");
					put(grammarAccess.getAAffineSystemAccess().getGroup(), "rule__AAffineSystem__Group__0");
					put(grammarAccess.getAAffineSystemAccess().getGroup_3(), "rule__AAffineSystem__Group_3__0");
					put(grammarAccess.getAAffineSystemAccess().getGroup_4(), "rule__AAffineSystem__Group_4__0");
					put(grammarAccess.getAAffineSystemAccess().getGroup_5(), "rule__AAffineSystem__Group_5__0");
					put(grammarAccess.getAAffineSystemAccess().getGroup_6(), "rule__AAffineSystem__Group_6__0");
					put(grammarAccess.getAOutputDeclarationAccess().getGroup(), "rule__AOutputDeclaration__Group__0");
					put(grammarAccess.getAInputDeclarationAccess().getGroup(), "rule__AInputDeclaration__Group__0");
					put(grammarAccess.getALocalDeclarationAccess().getGroup(), "rule__ALocalDeclaration__Group__0");
					put(grammarAccess.getAIdentifierListAccess().getGroup(), "rule__AIdentifierList__Group__0");
					put(grammarAccess.getAIdentifierListAccess().getGroup_1(), "rule__AIdentifierList__Group_1__0");
					put(grammarAccess.getADomainAccess().getGroup(), "rule__ADomain__Group__0");
					put(grammarAccess.getADomainAccess().getGroup_1(), "rule__ADomain__Group_1__0");
					put(grammarAccess.getAPolyhedronAccess().getGroup(), "rule__APolyhedron__Group__0");
					put(grammarAccess.getAPolyhedronAccess().getGroup_3(), "rule__APolyhedron__Group_3__0");
					put(grammarAccess.getAPolyhedronAccess().getGroup_3_1(), "rule__APolyhedron__Group_3_1__0");
					put(grammarAccess.getInEqualityAccess().getGroup(), "rule__InEquality__Group__0");
					put(grammarAccess.getInEqualityAccess().getGroup_1(), "rule__InEquality__Group_1__0");
					put(grammarAccess.getIDListAccess().getGroup_0(), "rule__IDList__Group_0__0");
					put(grammarAccess.getIDListAccess().getGroup_0_1(), "rule__IDList__Group_0_1__0");
					put(grammarAccess.getIDListAccess().getGroup_1(), "rule__IDList__Group_1__0");
					put(grammarAccess.getIDListAccess().getGroup_1_2(), "rule__IDList__Group_1_2__0");
					put(grammarAccess.getIDExpressionAccess().getGroup(), "rule__IDExpression__Group__0");
					put(grammarAccess.getIDExpressionAccess().getGroup_1(), "rule__IDExpression__Group_1__0");
					put(grammarAccess.getInEqIDAccess().getGroup(), "rule__InEqID__Group__0");
					put(grammarAccess.getInEqIDAccess().getGroup_1_1(), "rule__InEqID__Group_1_1__0");
					put(grammarAccess.getAStandardEquationAccess().getGroup(), "rule__AStandardEquation__Group__0");
					put(grammarAccess.getAStandardEquationAccess().getGroup_1(), "rule__AStandardEquation__Group_1__0");
					put(grammarAccess.getAParanthesizedAlphabetsExpressionAccess().getGroup(), "rule__AParanthesizedAlphabetsExpression__Group__0");
					put(grammarAccess.getAOrExpressionAccess().getGroup(), "rule__AOrExpression__Group__0");
					put(grammarAccess.getAOrExpressionAccess().getGroup_1(), "rule__AOrExpression__Group_1__0");
					put(grammarAccess.getAAndExpressionAccess().getGroup(), "rule__AAndExpression__Group__0");
					put(grammarAccess.getAAndExpressionAccess().getGroup_1(), "rule__AAndExpression__Group_1__0");
					put(grammarAccess.getARelationalExpressionAccess().getGroup(), "rule__ARelationalExpression__Group__0");
					put(grammarAccess.getARelationalExpressionAccess().getGroup_1(), "rule__ARelationalExpression__Group_1__0");
					put(grammarAccess.getAAdditiveExpressionAccess().getGroup(), "rule__AAdditiveExpression__Group__0");
					put(grammarAccess.getAAdditiveExpressionAccess().getGroup_1(), "rule__AAdditiveExpression__Group_1__0");
					put(grammarAccess.getAMultiplicativeExpressionAccess().getGroup(), "rule__AMultiplicativeExpression__Group__0");
					put(grammarAccess.getAMultiplicativeExpressionAccess().getGroup_1(), "rule__AMultiplicativeExpression__Group_1__0");
					put(grammarAccess.getAMinMaxExpressionAccess().getGroup(), "rule__AMinMaxExpression__Group__0");
					put(grammarAccess.getAMinMaxExpressionAccess().getGroup_1(), "rule__AMinMaxExpression__Group_1__0");
					put(grammarAccess.getANotExpressionAccess().getGroup(), "rule__ANotExpression__Group__0");
					put(grammarAccess.getANegateExpressionAccess().getGroup(), "rule__ANegateExpression__Group__0");
					put(grammarAccess.getACaseExpressionAccess().getGroup(), "rule__ACaseExpression__Group__0");
					put(grammarAccess.getACaseExpressionAccess().getGroup_1(), "rule__ACaseExpression__Group_1__0");
					put(grammarAccess.getADependenceExpressionAccess().getGroup(), "rule__ADependenceExpression__Group__0");
					put(grammarAccess.getADependenceInArrayNotationAccess().getGroup(), "rule__ADependenceInArrayNotation__Group__0");
					put(grammarAccess.getAIfExpressionAccess().getGroup(), "rule__AIfExpression__Group__0");
					put(grammarAccess.getAIndexExpressionAccess().getGroup_0(), "rule__AIndexExpression__Group_0__0");
					put(grammarAccess.getAIndexExpressionAccess().getGroup_1(), "rule__AIndexExpression__Group_1__0");
					put(grammarAccess.getAReduceExpressionAccess().getGroup(), "rule__AReduceExpression__Group__0");
					put(grammarAccess.getARestrictExpressionAccess().getGroup(), "rule__ARestrictExpression__Group__0");
					put(grammarAccess.getAMultiArgArithmeticExpressionAccess().getGroup(), "rule__AMultiArgArithmeticExpression__Group__0");
					put(grammarAccess.getAMultiArgArithmeticExpressionAccess().getGroup_3(), "rule__AMultiArgArithmeticExpression__Group_3__0");
					put(grammarAccess.getAMultiArgLogicalExpressionAccess().getGroup(), "rule__AMultiArgLogicalExpression__Group__0");
					put(grammarAccess.getAMultiArgLogicalExpressionAccess().getGroup_3(), "rule__AMultiArgLogicalExpression__Group_3__0");
					put(grammarAccess.getAExternalFunctionCallAccess().getGroup(), "rule__AExternalFunctionCall__Group__0");
					put(grammarAccess.getAExternalFunctionCallAccess().getGroup_2(), "rule__AExternalFunctionCall__Group_2__0");
					put(grammarAccess.getAExternalFunctionCallAccess().getGroup_2_1(), "rule__AExternalFunctionCall__Group_2_1__0");
					put(grammarAccess.getAIndexListAccess().getGroup(), "rule__AIndexList__Group__0");
					put(grammarAccess.getAIndexListAccess().getGroup_1(), "rule__AIndexList__Group_1__0");
					put(grammarAccess.getAIndexListAccess().getGroup_1_1(), "rule__AIndexList__Group_1_1__0");
					put(grammarAccess.getIndexAffineExpressionAccess().getGroup(), "rule__IndexAffineExpression__Group__0");
					put(grammarAccess.getIndexAffineExpressionAccess().getGroup_2(), "rule__IndexAffineExpression__Group_2__0");
					put(grammarAccess.getIndexAffineExpressionTerminalAccess().getGroup_1(), "rule__IndexAffineExpressionTerminal__Group_1__0");
					put(grammarAccess.getAIndexAffineExpressionListAccess().getGroup(), "rule__AIndexAffineExpressionList__Group__0");
					put(grammarAccess.getAIndexAffineExpressionListAccess().getGroup_1(), "rule__AIndexAffineExpressionList__Group_1__0");
					put(grammarAccess.getAIndexAffineExpressionListAccess().getGroup_1_1(), "rule__AIndexAffineExpressionList__Group_1_1__0");
					put(grammarAccess.getAFunctionAccess().getGroup_0(), "rule__AFunction__Group_0__0");
					put(grammarAccess.getAFunctionAccess().getGroup_1(), "rule__AFunction__Group_1__0");
					put(grammarAccess.getAFunctionInArrayNotationAccess().getGroup(), "rule__AFunctionInArrayNotation__Group__0");
					put(grammarAccess.getATypeAccess().getGroup(), "rule__AType__Group__0");
					put(grammarAccess.getAProgramAccess().getExternalFunctionsAssignment_0(), "rule__AProgram__ExternalFunctionsAssignment_0");
					put(grammarAccess.getAProgramAccess().getSystemsAssignment_1(), "rule__AProgram__SystemsAssignment_1");
					put(grammarAccess.getAExternalFunctionDeclarationAccess().getOutputAssignment_0(), "rule__AExternalFunctionDeclaration__OutputAssignment_0");
					put(grammarAccess.getAExternalFunctionDeclarationAccess().getNameAssignment_1(), "rule__AExternalFunctionDeclaration__NameAssignment_1");
					put(grammarAccess.getAExternalFunctionDeclarationAccess().getInputsAssignment_3(), "rule__AExternalFunctionDeclaration__InputsAssignment_3");
					put(grammarAccess.getAExternalFunctionDeclarationAccess().getInputsAssignment_4_1(), "rule__AExternalFunctionDeclaration__InputsAssignment_4_1");
					put(grammarAccess.getAExternalFunctionIdentifierAccess().getNameAssignment(), "rule__AExternalFunctionIdentifier__NameAssignment");
					put(grammarAccess.getAAffineSystemAccess().getNameAssignment_1(), "rule__AAffineSystem__NameAssignment_1");
					put(grammarAccess.getAAffineSystemAccess().getParametersAssignment_2(), "rule__AAffineSystem__ParametersAssignment_2");
					put(grammarAccess.getAAffineSystemAccess().getInputDeclarationsAssignment_3_1(), "rule__AAffineSystem__InputDeclarationsAssignment_3_1");
					put(grammarAccess.getAAffineSystemAccess().getOutputDeclarationsAssignment_4_1(), "rule__AAffineSystem__OutputDeclarationsAssignment_4_1");
					put(grammarAccess.getAAffineSystemAccess().getLocalvarDeclarationsAssignment_5_1(), "rule__AAffineSystem__LocalvarDeclarationsAssignment_5_1");
					put(grammarAccess.getAAffineSystemAccess().getEquationsAssignment_6_1(), "rule__AAffineSystem__EquationsAssignment_6_1");
					put(grammarAccess.getAOutputDeclarationAccess().getTypeAssignment_0(), "rule__AOutputDeclaration__TypeAssignment_0");
					put(grammarAccess.getAOutputDeclarationAccess().getIdentifierListAssignment_1(), "rule__AOutputDeclaration__IdentifierListAssignment_1");
					put(grammarAccess.getAOutputDeclarationAccess().getDomainAssignment_2(), "rule__AOutputDeclaration__DomainAssignment_2");
					put(grammarAccess.getAInputDeclarationAccess().getTypeAssignment_0(), "rule__AInputDeclaration__TypeAssignment_0");
					put(grammarAccess.getAInputDeclarationAccess().getIdentifierListAssignment_1(), "rule__AInputDeclaration__IdentifierListAssignment_1");
					put(grammarAccess.getAInputDeclarationAccess().getDomainAssignment_2(), "rule__AInputDeclaration__DomainAssignment_2");
					put(grammarAccess.getALocalDeclarationAccess().getTypeAssignment_0(), "rule__ALocalDeclaration__TypeAssignment_0");
					put(grammarAccess.getALocalDeclarationAccess().getIdentifierListAssignment_1(), "rule__ALocalDeclaration__IdentifierListAssignment_1");
					put(grammarAccess.getALocalDeclarationAccess().getDomainAssignment_2(), "rule__ALocalDeclaration__DomainAssignment_2");
					put(grammarAccess.getAIdentifierListAccess().getIdentifiersAssignment_0(), "rule__AIdentifierList__IdentifiersAssignment_0");
					put(grammarAccess.getAIdentifierListAccess().getIdentifiersAssignment_1_1(), "rule__AIdentifierList__IdentifiersAssignment_1_1");
					put(grammarAccess.getADomainAccess().getPolyhedraAssignment_0(), "rule__ADomain__PolyhedraAssignment_0");
					put(grammarAccess.getADomainAccess().getPolyhedraAssignment_1_1(), "rule__ADomain__PolyhedraAssignment_1_1");
					put(grammarAccess.getAPolyhedronAccess().getIndexesAssignment_1(), "rule__APolyhedron__IndexesAssignment_1");
					put(grammarAccess.getAPolyhedronAccess().getConstraintsAssignment_3_0(), "rule__APolyhedron__ConstraintsAssignment_3_0");
					put(grammarAccess.getAPolyhedronAccess().getConstraintsAssignment_3_1_1(), "rule__APolyhedron__ConstraintsAssignment_3_1_1");
					put(grammarAccess.getAStandardEquationAccess().getVarAssignment_0(), "rule__AStandardEquation__VarAssignment_0");
					put(grammarAccess.getAStandardEquationAccess().getIndexesAssignment_1_1(), "rule__AStandardEquation__IndexesAssignment_1_1");
					put(grammarAccess.getAStandardEquationAccess().getExprAssignment_3(), "rule__AStandardEquation__ExprAssignment_3");
					put(grammarAccess.getAOrExpressionAccess().getOperatorAssignment_1_1(), "rule__AOrExpression__OperatorAssignment_1_1");
					put(grammarAccess.getAOrExpressionAccess().getRightAssignment_1_2(), "rule__AOrExpression__RightAssignment_1_2");
					put(grammarAccess.getAAndExpressionAccess().getOperatorAssignment_1_1(), "rule__AAndExpression__OperatorAssignment_1_1");
					put(grammarAccess.getAAndExpressionAccess().getRightAssignment_1_2(), "rule__AAndExpression__RightAssignment_1_2");
					put(grammarAccess.getARelationalExpressionAccess().getOperatorAssignment_1_1(), "rule__ARelationalExpression__OperatorAssignment_1_1");
					put(grammarAccess.getARelationalExpressionAccess().getRightAssignment_1_2(), "rule__ARelationalExpression__RightAssignment_1_2");
					put(grammarAccess.getAAdditiveExpressionAccess().getOpAssignment_1_1(), "rule__AAdditiveExpression__OpAssignment_1_1");
					put(grammarAccess.getAAdditiveExpressionAccess().getRightAssignment_1_2(), "rule__AAdditiveExpression__RightAssignment_1_2");
					put(grammarAccess.getAMultiplicativeExpressionAccess().getOpAssignment_1_1(), "rule__AMultiplicativeExpression__OpAssignment_1_1");
					put(grammarAccess.getAMultiplicativeExpressionAccess().getRightAssignment_1_2(), "rule__AMultiplicativeExpression__RightAssignment_1_2");
					put(grammarAccess.getAMinMaxExpressionAccess().getOpAssignment_1_1(), "rule__AMinMaxExpression__OpAssignment_1_1");
					put(grammarAccess.getAMinMaxExpressionAccess().getRightAssignment_1_2(), "rule__AMinMaxExpression__RightAssignment_1_2");
					put(grammarAccess.getANotExpressionAccess().getOpAssignment_0(), "rule__ANotExpression__OpAssignment_0");
					put(grammarAccess.getANotExpressionAccess().getExprAssignment_1(), "rule__ANotExpression__ExprAssignment_1");
					put(grammarAccess.getANegateExpressionAccess().getOpAssignment_0(), "rule__ANegateExpression__OpAssignment_0");
					put(grammarAccess.getANegateExpressionAccess().getExprAssignment_1(), "rule__ANegateExpression__ExprAssignment_1");
					put(grammarAccess.getACaseExpressionAccess().getExprsAssignment_1_0(), "rule__ACaseExpression__ExprsAssignment_1_0");
					put(grammarAccess.getADependenceExpressionAccess().getFuncAssignment_0(), "rule__ADependenceExpression__FuncAssignment_0");
					put(grammarAccess.getADependenceExpressionAccess().getExprAssignment_2(), "rule__ADependenceExpression__ExprAssignment_2");
					put(grammarAccess.getADependenceInArrayNotationAccess().getVarAssignment_0(), "rule__ADependenceInArrayNotation__VarAssignment_0");
					put(grammarAccess.getADependenceInArrayNotationAccess().getDepAssignment_2(), "rule__ADependenceInArrayNotation__DepAssignment_2");
					put(grammarAccess.getAIfExpressionAccess().getCondAssignment_1(), "rule__AIfExpression__CondAssignment_1");
					put(grammarAccess.getAIfExpressionAccess().getThenAssignment_3(), "rule__AIfExpression__ThenAssignment_3");
					put(grammarAccess.getAIfExpressionAccess().getElseAssignment_5(), "rule__AIfExpression__ElseAssignment_5");
					put(grammarAccess.getAIndexExpressionAccess().getFuncAssignment_0_1(), "rule__AIndexExpression__FuncAssignment_0_1");
					put(grammarAccess.getAIndexExpressionAccess().getIndexesAssignment_1_1(), "rule__AIndexExpression__IndexesAssignment_1_1");
					put(grammarAccess.getAIndexExpressionAccess().getFuncAssignment_1_3(), "rule__AIndexExpression__FuncAssignment_1_3");
					put(grammarAccess.getAReduceExpressionAccess().getOpAssignment_2(), "rule__AReduceExpression__OpAssignment_2");
					put(grammarAccess.getAReduceExpressionAccess().getProjectionAssignment_4(), "rule__AReduceExpression__ProjectionAssignment_4");
					put(grammarAccess.getAReduceExpressionAccess().getExprAssignment_6(), "rule__AReduceExpression__ExprAssignment_6");
					put(grammarAccess.getARestrictExpressionAccess().getDomainAssignment_0(), "rule__ARestrictExpression__DomainAssignment_0");
					put(grammarAccess.getARestrictExpressionAccess().getExprAssignment_2(), "rule__ARestrictExpression__ExprAssignment_2");
					put(grammarAccess.getAVariableExpressionAccess().getVarAssignment(), "rule__AVariableExpression__VarAssignment");
					put(grammarAccess.getABooleanExpressionAccess().getValueAssignment(), "rule__ABooleanExpression__ValueAssignment");
					put(grammarAccess.getAIntegerExpressionAccess().getValueAssignment(), "rule__AIntegerExpression__ValueAssignment");
					put(grammarAccess.getARealExpressionAccess().getValueAssignment(), "rule__ARealExpression__ValueAssignment");
					put(grammarAccess.getAMultiArgArithmeticExpressionAccess().getOpAssignment_0(), "rule__AMultiArgArithmeticExpression__OpAssignment_0");
					put(grammarAccess.getAMultiArgArithmeticExpressionAccess().getExprsAssignment_2(), "rule__AMultiArgArithmeticExpression__ExprsAssignment_2");
					put(grammarAccess.getAMultiArgArithmeticExpressionAccess().getExprsAssignment_3_1(), "rule__AMultiArgArithmeticExpression__ExprsAssignment_3_1");
					put(grammarAccess.getAMultiArgLogicalExpressionAccess().getOpAssignment_0(), "rule__AMultiArgLogicalExpression__OpAssignment_0");
					put(grammarAccess.getAMultiArgLogicalExpressionAccess().getExprsAssignment_2(), "rule__AMultiArgLogicalExpression__ExprsAssignment_2");
					put(grammarAccess.getAMultiArgLogicalExpressionAccess().getExprsAssignment_3_1(), "rule__AMultiArgLogicalExpression__ExprsAssignment_3_1");
					put(grammarAccess.getAExternalFunctionCallAccess().getFuncAssignment_0(), "rule__AExternalFunctionCall__FuncAssignment_0");
					put(grammarAccess.getAExternalFunctionCallAccess().getExprsAssignment_2_0(), "rule__AExternalFunctionCall__ExprsAssignment_2_0");
					put(grammarAccess.getAExternalFunctionCallAccess().getExprsAssignment_2_1_1(), "rule__AExternalFunctionCall__ExprsAssignment_2_1_1");
					put(grammarAccess.getAIndexListAccess().getIdsAssignment_1_0(), "rule__AIndexList__IdsAssignment_1_0");
					put(grammarAccess.getAIndexListAccess().getIdsAssignment_1_1_1(), "rule__AIndexList__IdsAssignment_1_1_1");
					put(grammarAccess.getAIndexAffineExpressionListAccess().getExprsAssignment_1_0(), "rule__AIndexAffineExpressionList__ExprsAssignment_1_0");
					put(grammarAccess.getAIndexAffineExpressionListAccess().getExprsAssignment_1_1_1(), "rule__AIndexAffineExpressionList__ExprsAssignment_1_1_1");
					put(grammarAccess.getAFunctionAccess().getIndexesAssignment_0_1(), "rule__AFunction__IndexesAssignment_0_1");
					put(grammarAccess.getAFunctionAccess().getIndexesAssignment_1_1(), "rule__AFunction__IndexesAssignment_1_1");
					put(grammarAccess.getAFunctionAccess().getFuncAssignment_1_3(), "rule__AFunction__FuncAssignment_1_3");
					put(grammarAccess.getAFunctionInArrayNotationAccess().getNewIdsAssignment_1(), "rule__AFunctionInArrayNotation__NewIdsAssignment_1");
					put(grammarAccess.getATypeAccess().getUnsignedAssignment_0(), "rule__AType__UnsignedAssignment_0");
					put(grammarAccess.getATypeAccess().getTypeAssignment_1(), "rule__AType__TypeAssignment_1");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			edu.csu.melange.alphabets.xtext.ui.contentassist.antlr.internal.InternalAlphabetsParser typedParser = (edu.csu.melange.alphabets.xtext.ui.contentassist.antlr.internal.InternalAlphabetsParser) parser;
			typedParser.entryRuleAProgram();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public AlphabetsGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(AlphabetsGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
