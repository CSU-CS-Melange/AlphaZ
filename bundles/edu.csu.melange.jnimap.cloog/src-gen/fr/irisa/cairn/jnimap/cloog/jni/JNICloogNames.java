package fr.irisa.cairn.jnimap.cloog.jni;

import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

import fr.irisa.cairn.jnimap.runtime.JNIObject;


/*** PROTECTED REGION ID(CloogNames_userImport) ENABLED START ***/
	/*
		Put you custom import here ....
	*/
/*** PROTECTED REGION END ***/

/**
 *  Automatically generated by jnimap 
 * @generated
 */
public class JNICloogNames extends JNIObject {
	
	
	/* @generated */
	protected JNICloogNames(long ptr) {
		/*** PROTECTED REGION ID(CloogNames_Constructor) DISABLED START ***/
		super(ptr);
		/*** PROTECTED REGION END ***/
	}
	
	
	/* @generated */
	static JNICloogNames build(long ptr) {
		{
			return new JNICloogNames(ptr);
		}
	}
	
	
	
	
	/*** PROTECTED REGION ID(CloogNames_userCode) ENABLED START ***/
	/*** PROTECTED REGION END ***/

	/*************************************** 
	 *	     Struct Field Accessors        * 
	 ***************************************/
	/*************************************************************
	 *	nb_scalars : int
	 *************************************************************/
	public int getNb_scalars() {
		return CloogNative.cloognames_get_nb_scalars(getNativePtr(this));
	}
	/*************************************************************
	 *	nb_scalars : int
	 *************************************************************/
	public void setNb_scalars(int object) {
		CloogNative.cloognames_set_nb_scalars(getNativePtr(this), object);
	}
	/*************************************************************
	 * Test if Tnb_scalars is NULL
	 *************************************************************/
	public boolean testNb_scalars() {
		return CloogNative.cloognames_test_nb_scalars(getNativePtr(this)) != 0;
	}
	/*************************************************************
	 *	nb_scattering : int
	 *************************************************************/
	public int getNb_scattering() {
		return CloogNative.cloognames_get_nb_scattering(getNativePtr(this));
	}
	/*************************************************************
	 *	nb_scattering : int
	 *************************************************************/
	public void setNb_scattering(int object) {
		CloogNative.cloognames_set_nb_scattering(getNativePtr(this), object);
	}
	/*************************************************************
	 * Test if Tnb_scattering is NULL
	 *************************************************************/
	public boolean testNb_scattering() {
		return CloogNative.cloognames_test_nb_scattering(getNativePtr(this)) != 0;
	}
	/*************************************************************
	 *	nb_iterators : int
	 *************************************************************/
	public int getNb_iterators() {
		return CloogNative.cloognames_get_nb_iterators(getNativePtr(this));
	}
	/*************************************************************
	 *	nb_iterators : int
	 *************************************************************/
	public void setNb_iterators(int object) {
		CloogNative.cloognames_set_nb_iterators(getNativePtr(this), object);
	}
	/*************************************************************
	 * Test if Tnb_iterators is NULL
	 *************************************************************/
	public boolean testNb_iterators() {
		return CloogNative.cloognames_test_nb_iterators(getNativePtr(this)) != 0;
	}
	/*************************************************************
	 *	nb_parameters : int
	 *************************************************************/
	public int getNb_parameters() {
		return CloogNative.cloognames_get_nb_parameters(getNativePtr(this));
	}
	/*************************************************************
	 *	nb_parameters : int
	 *************************************************************/
	public void setNb_parameters(int object) {
		CloogNative.cloognames_set_nb_parameters(getNativePtr(this), object);
	}
	/*************************************************************
	 * Test if Tnb_parameters is NULL
	 *************************************************************/
	public boolean testNb_parameters() {
		return CloogNative.cloognames_test_nb_parameters(getNativePtr(this)) != 0;
	}

	
	/*************************************** 
	 *	         Static Methods            * 
	 ***************************************/
	
	/*************************************** 
	 *	         Member Methods            * 
	 ***************************************/
	/**
	 * get_scalar 
	 * 
	 * @generated
	**/
	public String getScalar(int index) {
		/*** PROTECTED REGION ID(get_scalar) DISABLED START ***/
		String res;
		
		synchronized(LOCK) {
			checkParameters();
			try {
				res = CloogNative.get_scalar(getNativePtr(this), index);
			} finally {
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * get_scattering 
	 * 
	 * @generated
	**/
	public String getScattering(int index) {
		/*** PROTECTED REGION ID(get_scattering) DISABLED START ***/
		String res;
		
		synchronized(LOCK) {
			checkParameters();
			try {
				res = CloogNative.get_scattering(getNativePtr(this), index);
			} finally {
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * get_parameter 
	 * 
	 * @generated
	**/
	public String getParameter(int index) {
		/*** PROTECTED REGION ID(get_parameter) DISABLED START ***/
		String res;
		
		synchronized(LOCK) {
			checkParameters();
			try {
				res = CloogNative.get_parameter(getNativePtr(this), index);
			} finally {
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * get_iterator 
	 * 
	 * @generated
	**/
	public String getIterator(int index) {
		/*** PROTECTED REGION ID(get_iterator) DISABLED START ***/
		String res;
		
		synchronized(LOCK) {
			checkParameters();
			try {
				res = CloogNative.get_iterator(getNativePtr(this), index);
			} finally {
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	
	public String toString() {
		/*** PROTECTED REGION ID(CloogNames_toString) DISABLED START ***/
			return CloogPrettyPrinter.asString(this);
		/*** PROTECTED REGION END ***/
	}
}
