package fr.irisa.cairn.jnimap.cloog.jni;

import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

import fr.irisa.cairn.jnimap.runtime.JNIObject;


/*** PROTECTED REGION ID(ClastStmt_userImport) ENABLED START ***/
	/*
		Put you custom import here ....
	*/
/*** PROTECTED REGION END ***/

/**
 *  Automatically generated by jnimap 
 * @generated
 */
public class JNIClastStmt extends JNIObject {
	
	
	/* @generated */
	protected JNIClastStmt(long ptr) {
		/*** PROTECTED REGION ID(ClastStmt_Constructor) DISABLED START ***/
		super(ptr);
		/*** PROTECTED REGION END ***/
	}
	
	
	/* @generated */
	static JNIClastStmt build(long ptr) {
		if (isJNIClastAssignment(ptr)) {
			return new JNIClastAssignment(ptr);
		} else 
		if (isJNIClastBlock(ptr)) {
			return new JNIClastBlock(ptr);
		} else 
		if (isJNIClastFor(ptr)) {
			return new JNIClastFor(ptr);
		} else 
		if (isJNIClastGuard(ptr)) {
			return new JNIClastGuard(ptr);
		} else 
		if (isJNIClastRoot(ptr)) {
			return new JNIClastRoot(ptr);
		} else 
		if (isJNIClastUserStmt(ptr)) {
			return new JNIClastUserStmt(ptr);
		} else 
		{
			return new JNIClastStmt(ptr);
		}
	}
	
	/* @generated */
	private static boolean isJNIClastAssignment(long ptr) {
		if (CloogNative.is_clast_assignment(ptr) != 0) {
			return true;
		} else {
			return false;
		}
	}
	
	/* @generated */
	public boolean isJNIClastAssignment() {
		return isJNIClastAssignment(getNativePtr(this));
	}
	
	/* @generated */
	private static boolean isJNIClastBlock(long ptr) {
		if (CloogNative.is_clast_block(ptr) != 0) {
			return true;
		} else {
			return false;
		}
	}
	
	/* @generated */
	public boolean isJNIClastBlock() {
		return isJNIClastBlock(getNativePtr(this));
	}
	
	/* @generated */
	private static boolean isJNIClastFor(long ptr) {
		if (CloogNative.is_clast_for(ptr) != 0) {
			return true;
		} else {
			return false;
		}
	}
	
	/* @generated */
	public boolean isJNIClastFor() {
		return isJNIClastFor(getNativePtr(this));
	}
	
	/* @generated */
	private static boolean isJNIClastGuard(long ptr) {
		if (CloogNative.is_clast_guard(ptr) != 0) {
			return true;
		} else {
			return false;
		}
	}
	
	/* @generated */
	public boolean isJNIClastGuard() {
		return isJNIClastGuard(getNativePtr(this));
	}
	
	/* @generated */
	private static boolean isJNIClastRoot(long ptr) {
		if (CloogNative.is_clast_root(ptr) != 0) {
			return true;
		} else {
			return false;
		}
	}
	
	/* @generated */
	public boolean isJNIClastRoot() {
		return isJNIClastRoot(getNativePtr(this));
	}
	
	/* @generated */
	private static boolean isJNIClastUserStmt(long ptr) {
		if (CloogNative.is_clast_user_stmt(ptr) != 0) {
			return true;
		} else {
			return false;
		}
	}
	
	/* @generated */
	public boolean isJNIClastUserStmt() {
		return isJNIClastUserStmt(getNativePtr(this));
	}
	
	
	public Object accept(IClastStmtVisitor visitor, Object arg) {
		return visitor.visitJNIClastStmt(this, arg);
	}
	
	
	/*** PROTECTED REGION ID(ClastStmt_userCode) ENABLED START ***/
	/*** PROTECTED REGION END ***/

	/*************************************** 
	 *	     Struct Field Accessors        * 
	 ***************************************/
	// default get JNIClatStmtOp, op
	/*************************************************************
	 *	op : JNIClatStmtOp
	 *************************************************************/
	public void setOp(JNIClatStmtOp object) {
		CloogNative.clast_stmt_set_op(getNativePtr(this), getNativePtr(object));
	}
	/*************************************************************
	 * Test if Top is NULL
	 *************************************************************/
	public boolean testOp() {
		return CloogNative.clast_stmt_test_op(getNativePtr(this)) != 0;
	}
	/*************************************************************
	 *	next : JNIClastStmt
	 *************************************************************/
	public JNIClastStmt getNext() {
		return JNIClastStmt.build(CloogNative.clast_stmt_get_next(getNativePtr(this)));
	}
	/*************************************************************
	 *	next : JNIClastStmt
	 *************************************************************/
	public void setNext(JNIClastStmt object) {
		CloogNative.clast_stmt_set_next(getNativePtr(this), getNativePtr(object));
	}
	/*************************************************************
	 * Test if Tnext is NULL
	 *************************************************************/
	public boolean testNext() {
		return CloogNative.clast_stmt_test_next(getNativePtr(this)) != 0;
	}

	
	/*************************************** 
	 *	         Static Methods            * 
	 ***************************************/
	
	/*************************************** 
	 *	         Member Methods            * 
	 ***************************************/
	/**
	 * clast_print 
	 * 
	 * @generated
	**/
	public void pprint(JNICloogOptions opts) {
		/*** PROTECTED REGION ID(clast_print) DISABLED START ***/
		
		synchronized(LOCK) {
			checkParameters();
			try {
				CloogNative.clast_print(getNativePtr(this), getNativePtr(opts));
			} finally {
			}
		}
		
		/*** PROTECTED REGION END ***/
	}
	
	
	public String toString() {
		/*** PROTECTED REGION ID(ClastStmt_toString) DISABLED START ***/
			return CloogPrettyPrinter.asString(this);
		/*** PROTECTED REGION END ***/
	}
}
