import "platform:/resource/edu.csu.melange.jnimap.isl/src/Isl.jnimap";

/*
 * This is an example mapping model for fr.irisa.cairn.jnimap.cloog
 */
mapping Cloog [linux_32,linux_64,cygwin_32,mingw_32,macosx_32,macosx_64]; 

use ISL from ISL;
use GMP from ISL;

library {
	libname= "CLOOG"; 
	linux_32 = "libcloog-isl.so.4";
	linux_64 = "libcloog-isl.so.4";
	macosx_32 = "libcloog-isl.4.dylib";
	macosx_64 = "libcloog-isl.4.dylib";
}

module addons {
	struct clast_stmt* cloog_clast_from_union_map(struct cloogstate *state, struct cloogoptions *opts, string context, string union_map_str);
	struct clast_stmt* cloog_clast_from_set(struct cloogstate *state, struct cloogoptions *opts, string context, string set_str);
	struct clooginput* cloog_input_read_from_isl_union_map_str(isl_ctx* ctx, struct cloogstate *state, string context, string  union_map_str);
	struct clooginput* cloog_input_read_from_isl_set_str(isl_ctx* ctx, struct cloogstate *state, string context, string  set_str);
	void clast_print(struct clast_stmt *stmt,struct cloogoptions *opts);
	struct clast_expr* clast_reduction_get_element(struct clast_reduction *stmt,int offset);
	int clast_reduction_get_number_of_elements(struct clast_reduction *stmt);
	int clast_binary_get_value(struct clast_binary *stmt);
	int clast_term_get_value(struct clast_term *stmt);
	string clast_user_stmt_get_cloog_domain(struct clast_user_stmt *stmt);
	string clast_for_get_cloog_domain(struct clast_for *stmt);
	int clast_for_get_stride(struct clast_for *stmt);
	struct clast_equation* clast_guard_get_equation(struct clast_guard *stmt, int offset);
	int clast_guard_get_n(struct clast_guard *stmt);
	string get_scalar(struct cloognames* names, int index);
	string get_scattering(struct cloognames* names, int index);
	string get_parameter(struct cloognames* names, int index);
	string get_iterator(struct cloognames* names, int index);
	int is_clast_guard(struct clast_stmt *stmt) ;
	int is_clast_for(struct clast_stmt *stmt);
	int is_clast_assignment(struct clast_stmt *stmt) ;
	int is_clast_user_stmt(struct clast_stmt *stmt);
	int is_clast_block(struct clast_stmt *stmt);
	int is_clast_root(struct clast_stmt *stmt);
	int is_clast_expr_binary(struct clast_expr *expr);
	int is_clast_expr_term(struct clast_expr *expr);
	int is_clast_expr_reduction(struct clast_expr *expr);
	int is_clast_expr_name(struct clast_expr *expr);
}

enum clast_expr_type {
    clast_expr_name=0,
    clast_expr_term=1,
    clast_expr_bin=2,
    clast_expr_red=3
} as ClastExprType;


//typedef cloog_int_t as class CloogInt;

enum clast_red_type { clast_red_sum=0, clast_red_min=1, clast_red_max=2} as ClastRedType;
enum clast_bin_type { clast_bin_fdiv=0, clast_bin_cdiv=1, clast_bin_div=2, clast_bin_mod=3} as ClastBinType;


struct clast_expr as ClastExpr;

struct clast_name {
    string	name;
} as ClastName extending ClastExpr;

struct clast_term {
    struct clast_expr  *var;
} as ClastTerm  extending ClastExpr;

struct clast_reduction {
    enum clast_red_type	type;
    int			n;
} as ClastReduction  extending ClastExpr;

struct clast_binary {
    enum clast_bin_type type;
    struct clast_expr*	LHS;
} as ClastBinary extending ClastExpr;

struct clast_stmt_op as ClatStmtOp;

struct clast_stmt {
    const struct clast_stmt_op    *op;
    struct clast_stmt	*next;
} as ClastStmt  ;

struct clast_assignment {
   	string	LHS;
    struct clast_expr *	RHS;
} as ClastAssignment extending ClastStmt;

struct clast_root {
    struct cloognames *	names;
} as ClastRoot extending ClastStmt;

struct clast_block {
    struct clast_stmt *	body;
} as ClastBlock extending ClastStmt;

struct cloogstatement {
  string name;			 /* Name of the statement. */
  int number;                    /* The statement unique number. */
} as CloogStatement ;

struct clast_user_stmt {
    struct cloogstatement *	statement;
    struct clast_stmt *	substitutions;
} as ClastUserStmt extending ClastStmt;



struct clast_for {
    string	iterator;
    struct clast_expr *	LB;
    struct clast_expr *	UB;
    struct clast_stmt *	body;
} as ClastFor extending ClastStmt;



struct clast_equation {
    struct clast_expr *	LHS;
    struct clast_expr *	RHS;
    int			sign;
} as ClastEquation;

struct clast_guard {
    //struct clast_stmt	stmt;
    struct clast_stmt *	then;
    int			n;
//    struct clast_equation eq[1];
//    struct clast_equation *eq;
} as ClastGuard extending ClastStmt;



struct cloognames
{ 
	int nb_scalars ;         /**< Scalar dimension number. */
  	int nb_scattering ;      /**< Scattering iterator number. */
  	int nb_iterators ;       /**< Iterator number. */
  	int nb_parameters ;      /**< Parameter number. */
} as CloogNames;

struct cloogoptions
{
  /* OPTIONS FOR LOOP GENERATION */
  int l ;         /* Last level to optimize. */
  int f ;         /* First level to optimize. */
  int stop ;      /* Level to stop code generation. */
  int strides ;   /* 1 if user wants to handle non-unit strides (then loop
                   * increment can be something else than one), 0 otherwise.
		   */
  int sh;	  /* 1 for computing simple hulls */

  /* OPTIONS FOR PRETTY PRINTING */
  int esp ;       /* 1 if user wants to spread all equalities, i.e. when there
                   * is something like "i = 3*j + 1 ; A[i] = 0 ;" the generator
                   * will write "A[3*j + 1] = 0 ;", 0 otherwise.
                   */
  int fsp ;       /* The iteration level where equalities spreading can begin
                   * (it might happen that the user wants not to spread values
                   * of scattering iterators).
                   */
  int otl ;       /* 1 for eliminate loops running just one time and write them
                   * as an affectation of the iterator, 0 otherwise.
                   */
  int block ;     /* 1 to make one new block {...} per new dimension,
                   * 0 otherwise.
                   */
  int compilable; /* 1 to generate a compilable code by using
                   * preprocessing, 0 otherwise.
                   */
  int callable;   /* 1 to generate callable code by using
                   * preprocessing, 0 otherwise.
                   */
  int language;   /* 1 to generate FORTRAN, 0 for C otherwise. */

  int save_domains;/* Save unsimplified copy of domain. */

  int quiet;      /* Don't print any informational messages. */

  /* UNDOCUMENTED OPTIONS FOR THE AUTHOR ONLY */
  int leaks ;     /* 1 if I want to print the allocation statistics,
                   * 0 otherwise.
		   */
  int backtrack;  /* 1 to perform backtracking in 
                   * Quillere's algorithm, 0 otherwise.
		   */
  int override ;  /* 1 if I want to bypass CLooG decisions on option correctness
                   * (generated code may be incorrect), 0 otherwise.
		   */
  int structure ; /* 1 if I want to print the CloogProgram structure before the
                   * pretty printed code, 0 otherwise.
		   */
  int noblocks ;  /* 1 if I don't want to make statement blocks, 0 otherwise. */
  int noscalars ; /* 1 if I don't want to use scalar dimensions, 0 otherwise. */
  int nosimplify; /* 1 if I don't want to simplify polyhedra, 0 otherwise. */
} as CloogOptions ;

struct clooginput as CloogInput;
struct cloogstate as CloogState;


include "<cloog/cloog.h>";
include "<isl/ctx.h>";

group CloogInput {
	[static rename=createFromUnionMapString]
	struct clooginput* cloog_input_read_from_isl_union_map_str(keep isl_ctx *ctx, struct cloogstate *state, string context, string  union_domain) ;
	[static rename=createFromSetString]
	struct clooginput* cloog_input_read_from_isl_set_str(keep isl_ctx *ctx, struct cloogstate *state, string context, string  union_domain) ;
	[rename=generate] struct clast_stmt *cloog_clast_create_from_input(struct clooginput *input,struct cloogoptions *opts);
//	[rename=free] void cloog_input_free(take struct clooginput *input);
}

group CloogState {
	[static rename=malloc] struct cloogstate* cloog_state_malloc();
//	[rename=free] void cloog_state_free(take struct cloogstate* state);
}

group ClastRoot {
	[static rename=fromUnionMap] struct clast_stmt* cloog_clast_from_union_map(struct cloogstate *state, struct cloogoptions *opts, string context, string union_map_str);
	[static rename=fromSet] struct clast_stmt* cloog_clast_from_set(struct cloogstate *state, struct cloogoptions *opts, string context, string set_str);
	[instanceOf] int is_clast_root(struct clast_stmt* stmt);
}

group ClastStmt {
	[rename=pprint] void clast_print(struct clast_stmt *stmt,struct cloogoptions *opts);
//	[rename=free] void free_clast_stmt(take struct clast_stmt *stmt);
}

group CloogOptions {
	[static rename=malloc] struct cloogoptions *cloog_options_malloc(struct cloogstate* state);
//	[rename=free] void cloog_options_free(take struct cloogoptions *opts) ;
}

group ClastGuard {
	[instanceOf] int is_clast_guard(struct clast_stmt* stmt);
	[rename=getEquation] struct clast_equation* clast_guard_get_equation(struct clast_guard *stmt, int offset);
}

group ClastFor {
	[instanceOf] int is_clast_for(struct clast_stmt* stmt);
	[rename=getCloogDomain] string clast_for_get_cloog_domain(struct clast_for *stmt);
	[rename=getStride] int clast_for_get_stride(struct clast_for *stmt);
}

group ClastAssignment {
	[instanceOf] int is_clast_assignment(struct clast_stmt* stmt);
}

group ClastUserStmt {
	[instanceOf] int is_clast_user_stmt(struct clast_stmt* stmt);
	[rename=getCloogDomain] string clast_user_stmt_get_cloog_domain(struct clast_user_stmt *stmt);
}

group ClastBlock {
	[instanceOf] int is_clast_block(struct clast_stmt* stmt);
}

group ClastBinary {
	[instanceOf] int is_clast_expr_binary(struct clast_expr *exp);
	[rename=getRHS] int clast_binary_get_value(struct clast_binary *stmt);
}

group ClastTerm {
	[instanceOf] int is_clast_expr_term(struct clast_expr *exp);
	[rename=getValue] int clast_term_get_value(struct clast_term *stmt);
}

group ClastName {
	[instanceOf] int is_clast_expr_name(struct clast_expr *exp);
}

group ClastReduction {
	[instanceOf] int is_clast_expr_reduction(struct clast_expr *exp);
	[rename=getElement] struct clast_expr *clast_reduction_get_element(struct clast_reduction *stmt,int offset);
	[rename=getNumberOfElement] int clast_reduction_get_number_of_elements(struct clast_reduction *stmt);
}

group CloogNames {
	[rename=getScalar] string get_scalar(struct cloognames* names, int index);
	[rename=getScattering] string get_scattering(struct cloognames* names, int index);
	[rename=getParameter] string get_parameter(struct cloognames* names, int index);
	[rename=getIterator] string get_iterator(struct cloognames* names, int index);
}
