package fr.irisa.cairn.jnimap.isl.jni;

import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

import fr.irisa.cairn.jnimap.runtime.JNIObject;


/*** PROTECTED REGION ID(ISLASTExpression_userImport) ENABLED START ***/
	/*
		Put you custom import here ....
	*/
/*** PROTECTED REGION END ***/

/**
 *  Automatically generated by jnimap 
 * @generated
 */
public class JNIISLASTExpression extends JNIObject {
	
	
	/* @generated */
	protected JNIISLASTExpression(long ptr) {
		/*** PROTECTED REGION ID(ISLASTExpression_Constructor) DISABLED START ***/
		super(ptr);
		/*** PROTECTED REGION END ***/
	}
	
	
	/* @generated */
	static JNIISLASTExpression build(long ptr) {
		if (isJNIISLASTIdentifier(ptr)) {
			return new JNIISLASTIdentifier(ptr);
		} else 
		if (isJNIISLASTLiteral(ptr)) {
			return new JNIISLASTLiteral(ptr);
		} else 
		if (isJNIISLASTOperation(ptr)) {
			return new JNIISLASTOperation(ptr);
		} else 
		{
			return new JNIISLASTExpression(ptr);
		}
	}
	
	/* @generated */
	private static boolean isJNIISLASTIdentifier(long ptr) {
		if (ISLNative.isl_ast_expr_is_id(ptr) != 0) {
			return true;
		} else {
			return false;
		}
	}
	
	/* @generated */
	public boolean isJNIISLASTIdentifier() {
		return isJNIISLASTIdentifier(getNativePtr(this));
	}
	
	/* @generated */
	private static boolean isJNIISLASTLiteral(long ptr) {
		if (ISLNative.isl_ast_expr_is_literal(ptr) != 0) {
			return true;
		} else {
			return false;
		}
	}
	
	/* @generated */
	public boolean isJNIISLASTLiteral() {
		return isJNIISLASTLiteral(getNativePtr(this));
	}
	
	/* @generated */
	private static boolean isJNIISLASTOperation(long ptr) {
		if (ISLNative.isl_ast_expr_is_operation(ptr) != 0) {
			return true;
		} else {
			return false;
		}
	}
	
	/* @generated */
	public boolean isJNIISLASTOperation() {
		return isJNIISLASTOperation(getNativePtr(this));
	}
	
	
	public Object accept(IISLASTExpressionVisitor visitor, Object arg) {
		return visitor.visitJNIISLASTExpression(this, arg);
	}
	
	
	/*** PROTECTED REGION ID(ISLASTExpression_userCode) ENABLED START ***/
	/*** PROTECTED REGION END ***/

	/*************************************** 
	 *	     Struct Field Accessors        * 
	 ***************************************/

	
	/*************************************** 
	 *	         Static Methods            * 
	 ***************************************/
	/**
	 * isl_ast_expr_to_string 
	 * 
	 * @generated
	**/
	 public static String _toString(JNIISLASTExpression expr) { 
		/*** PROTECTED REGION ID(static_isl_ast_expr_to_string) DISABLED START ***/
		String res;
		
		synchronized(LOCK) {
			checkParameters();
			try {
				res = ISLNative.isl_ast_expr_to_string(getNativePtr(expr));
			} finally {
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	
	/*************************************** 
	 *	         Member Methods            * 
	 ***************************************/
	/**
	 * isl_ast_expr_get_ctx 
	 * 
	 * @generated
	**/
	public JNIISLContext getContext() {
		/*** PROTECTED REGION ID(isl_ast_expr_get_ctx) DISABLED START ***/
		JNIISLContext res;
		
		synchronized(LOCK) {
			checkParameters();
			try {
				res = JNIISLContext.build(ISLNative.isl_ast_expr_get_ctx(getNativePtr(this)));
			} finally {
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_ast_expr_get_type 
	 * 
	 * @generated
	**/
	public JNIISLAstExprType getType() {
		/*** PROTECTED REGION ID(isl_ast_expr_get_type) DISABLED START ***/
		JNIISLAstExprType res;
		
		synchronized(LOCK) {
			checkParameters();
			try {
				res = JNIISLAstExprType.build(ISLNative.isl_ast_expr_get_type(getNativePtr(this)));
			} finally {
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	
	public String toString() {
		/*** PROTECTED REGION ID(ISLASTExpression_toString) DISABLED START ***/
			return ISLPrettyPrinter.asString(this);
		/*** PROTECTED REGION END ***/
	}
}
