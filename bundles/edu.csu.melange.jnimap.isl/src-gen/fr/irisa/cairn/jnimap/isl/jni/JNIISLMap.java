package fr.irisa.cairn.jnimap.isl.jni;

import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

import fr.irisa.cairn.jnimap.runtime.JNIObject;


/*** PROTECTED REGION ID(ISLMap_userImport) ENABLED START ***/
	/*
		Put you custom import here ....
	*/
/*** PROTECTED REGION END ***/

/**
 *  Automatically generated by jnimap 
 * @generated
 */
public class JNIISLMap extends JNIObject {
	
	/* @generated */
	protected JNIISLMap(long ptr) {
		/*** PROTECTED REGION ID(ISLMap_Constructor) DISABLED START ***/
		super(ptr);
		/*** PROTECTED REGION END ***/
	}
	
	/* @generated */
	protected static JNIISLMap build(long ptr) {
		return new JNIISLMap(ptr);
	}
	
	/*** PROTECTED REGION ID(ISLMap_userCode) ENABLED START ***/
	@Deprecated
	public JNIISLMap(JNIISLContext ctx, String s) {
		this(ISLNative.isl_map_read_from_str(getNativePtr(ctx), s));
	}
	
	@Deprecated
	public int getNumberOfBasicMap() {
		return getNbBasicMap();
	}
	
	@Deprecated
	public JNIISLMap insertDim(JNIISLDimType type, int pos, int n) {
		return insertDims(type, pos, n);
	}
	
	@Deprecated
	public static JNIISLMap fromBasicMap(JNIISLBasicMap bmap) {
		return bmap.toMap();
	}
	
	@Deprecated
	public boolean singleValued() {
		return isSingleValued();
	}
	
	public static JNIISLMap islMapEmpty(JNIISLSpace space) {
		return buildEmpty(space);
	}
	
	@Deprecated
	public static JNIISLMap lexGTFirst(JNIISLSpace space, int n) {
		return lexGTfirst(space, n);
	}
	
	@Deprecated
	public int getNbBasicMap() {
		return getNbBasicMaps();
	}
	
	@Deprecated
	public static JNIISLMap applyRange(JNIISLMap map1, JNIISLMap map2) {
		return map1.applyRange(map2);
	}
	
	@Deprecated
	public static JNIISLMap applyDomain(JNIISLMap map1, JNIISLMap map2) {
		return map1.applyDomain(map2);
	}
	
	@Deprecated
	public static JNIISLMap intersect(JNIISLMap map1, JNIISLMap map2) {
		return map1.intersect(map2);
	}
	@Deprecated
	public static JNIISLMap intersectDomain(JNIISLMap map, JNIISLSet set) {
		return map.intersectDomain(set);
	}
	@Deprecated
	public static JNIISLMap intersectRange(JNIISLMap map, JNIISLSet set) {
		return map.intersectRange(set);
	}
	
	@Deprecated
	public static JNIISLMap union(JNIISLMap map1, JNIISLMap map2) {
		return map1.union(map2);
	}
	
	@Deprecated
	public static JNIISLMap lexLT(JNIISLSpace space) {
		return space.lexLT();
	}
	@Deprecated
	public static JNIISLMap lexLTfirst(JNIISLSpace space, int n) {
		return space.lexLTfirst(n);
	}
	
	@Deprecated
	public static JNIISLMap lexLE(JNIISLSpace space) {
		return space.lexLE();
	}

	@Deprecated
	public static JNIISLMap lexLEfirst(JNIISLSpace space, int n) {
		return space.lexLEfirst(n);
	}
	@Deprecated
	public static JNIISLMap lexGT(JNIISLSpace space) {
		return space.lexGT();
	}
	@Deprecated
	public static JNIISLMap lexGTfirst(JNIISLSpace space, int n) {
		return space.lexGTfirst(n);
	}
	
	@Deprecated
	public static JNIISLMap lexGE(JNIISLSpace space) {
		return space.lexGE();
	}

	@Deprecated
	public static JNIISLMap lexGEfirst(JNIISLSpace space, int n) {
		return space.lexGEfirst(n);
	}
	@Deprecated
	public JNIISLMap fixedPower(int n) {
		return power(n);
	}

	@Deprecated
	public int getNbDim(JNIISLDimType type) {
		return getNbDims(type);
	}
	

	@Deprecated
	public int getNbParam() {
		return getNbParams();
	}

	@Deprecated
	public int getNbIn() {
		return getNbIns();
	}

	@Deprecated
	public int getNbOut() {
		return getNbOuts();
	}
	


	public JNIISLSet getDomain() {
		return copy().domain();
	}
	
	public JNIISLSet getRange() {
		return copy().range();
	}
	
	public JNIISLMap getDomainMap() {
		return copy().domainMap();
	}
	
	public JNIISLMap getRangeMap() {
		return copy().rangeMap();
	}
	

	public JNIISLMap power(long pow) {
		return power(JNIISLVal.buildFromLong(getContext(), pow));
	}

	
	public JNIISLMap parametricPower() {
		JNIPtrBoolean val = new JNIPtrBoolean();
		return parametricPower(val);
	}


	public JNIISLMap reachingPathLengths() {
		JNIPtrBoolean val = new JNIPtrBoolean();
		return reachingPathLengths(val);
	}

	public int getNbParams() {
		return getNbDims(JNIISLDimType.isl_dim_param);
	}
	
	public int getNbIns() {
		return getNbDims(JNIISLDimType.isl_dim_in);
	}

	public int getNbOuts() {
		return getNbDims(JNIISLDimType.isl_dim_out);
	}
	
	public String getInputTupleName() {
		return getTupleName(JNIISLDimType.isl_dim_in);
	}

	public String getOutputTupleName() {
		return getTupleName(JNIISLDimType.isl_dim_out);
	}

	public JNIISLMap setInputTupleName(String s) {
		return setTupleName(JNIISLDimType.isl_dim_in, s);
	}

	public JNIISLMap setOutputTupleName(String s) {
		return setTupleName(JNIISLDimType.isl_dim_out, s);
	}

	public static JNIISLMap buildFromString(String str) {
		return buildFromString(JNIISLContext.getCtx(), str);
	}
	
	private Iterable<String> getDimensionNames(JNIISLDimType dim) {
		List<String> res = new ArrayList<String>();
		for (int i=0;i<this.getNbDims(dim);i++) {
			res.add(this.getDimName(dim, i));
		}
		return res;
	}

	public String getInputDimName(int i) {
		return this.getDimName(JNIISLDimType.isl_dim_in, i);
	}

	public String getOutputDimName(int i) {
		return this.getDimName(JNIISLDimType.isl_dim_out, i);
	}

	public String getParameterName(int i) {
		return this.getDimName(JNIISLDimType.isl_dim_param, i);
	}
	
	public Iterable<String> getInputDimensionNames() {
		return getDimensionNames(JNIISLDimType.isl_dim_in);
	}

	public Iterable<String> getOutputDimensionNames() {
		return getDimensionNames(JNIISLDimType.isl_dim_out);
	}

	public Iterable<String> getParamDimensionNames() {
		return getDimensionNames(JNIISLDimType.isl_dim_param);
	}
	
	public JNIISLMap renameDimensions(Iterable<String> names,JNIISLDimType dimType) {
		int i= this.getNbDims(dimType);
		JNIISLMap res = this.copy();
		for (String s: names) {
			res = res.setDimName(dimType, i,s);
			i++;
		}
		return res;
		
	}
	
	public JNIISLMap moveAllDims(JNIISLDimType dst, JNIISLDimType src) {
		return this.copy().moveDims(dst, getNbDim(dst), src, 0, getNbDim(src));
	}

	public JNIISLMap moveInputDimsAsParameters() {
		return moveAllDims(JNIISLDimType.isl_dim_param, JNIISLDimType.isl_dim_in);
	}

	public JNIISLMap moveInputDimsAsParameters(JNIISLDimType from, JNIISLDimType to) {
		return moveAllDims(JNIISLDimType.isl_dim_param, JNIISLDimType.isl_dim_out);
	}

	public JNIISLSet moveAllDimensions(JNIISLDimType from, JNIISLDimType to) {
		return this.copy().moveDims(JNIISLDimType.isl_dim_param, getNbParam(), JNIISLDimType.isl_dim_in, 0, getNbIn()).toSet();
	}

	public JNIISLMap projectOutAllBut(JNIISLDimType dimType, int i) {
		JNIISLMap res = this.copy();
		int nb = this.getNbDims(dimType);
		if (i>0) res = res.projectOut(dimType,0,i);
		if (i<nb-1) res = res.projectOut(dimType,1,nb-i-1);
		return res;
	}

	public JNIISLMap addDimensions(Iterable<String> names,JNIISLDimType dimType) {
		int i= this.getNbDims(dimType);
		JNIISLMap res = this.copy();
		for (String s: names) {
			res = res.addDims(dimType, 1);
			res= res.setDimName(dimType, i, s);
			i++;
		}
		return res;
	}

	public JNIISLMap addOutputDimensions(Iterable<String> names) {
		return addDimensions(names, JNIISLDimType.isl_dim_out);
	}

	public JNIISLMap addInputDimensions(Iterable<String> names) {
		return addDimensions(names, JNIISLDimType.isl_dim_in);
	}

	public JNIISLMap addParamDimensions(Iterable<String> names) {
		return addDimensions(names, JNIISLDimType.isl_dim_param);
	}


	/**
	 * Try to combine 2 closed form relations into one.
	 * 
	 * @param e1
	 * @param e2
	 * @return the combination if it is possible to combine both arguments. null
	 *         otherwise.
	 */
	private static Entry<JNIISLSet, JNIISLMultiAff> combine(
			Entry<JNIISLSet, JNIISLMultiAff> e1,
			Entry<JNIISLSet, JNIISLMultiAff> e2) {
		JNIISLMultiAff expr1 = e1.getValue();
		JNIISLSet set1 = e1.getKey();
		JNIISLMultiAff expr2 = e2.getValue();
		JNIISLSet set2 = e2.getKey();

		//first make sure that the inputs are compatible
		if (expr1.getNbAff() != expr2.getNbAff()
				|| !set1.getSpace().isCompatibleWith(set2.getSpace()))
			throw new RuntimeException();

		JNIISLSet union = set1.copy().union(set2.copy());

		//if the 2 expressions are equivalent, combine them.
		if (expr1 == expr2 || expr1.isPlainEqual(expr2))
			return new AbstractMap.SimpleEntry<JNIISLSet, JNIISLMultiAff>(union.simplify(), expr1);

		JNIISLMap mapFunc1 = expr1.copy().toBasicMap().toMap();
		JNIISLMap map1 = mapFunc1.copy().intersectDomain(set1.copy());
		JNIISLMap mapFunc2 = expr2.copy().toBasicMap().toMap();
		JNIISLMap map2 = mapFunc2.copy().intersectDomain(set2.copy());
		JNIISLMap mapUnion = map2.copy().union(map1.copy());
		JNIISLSpace mapSpace = mapUnion.getSpace();

		// try different combinations of expressions and domains in order to
		// find one equivalent
		JNIISLMap map21 = mapFunc1.intersectDomain(set2.copy());
		if (map21.isEqual(map2))
			return null;//new AbstractMap.SimpleEntry<JNIISLMultiAff, JNIISLSet>(expr1, union);

		JNIISLMap map12 = mapFunc2.intersectDomain(set1.copy());
		if (map12.equivalence(map1))
			return new AbstractMap.SimpleEntry<JNIISLSet, JNIISLMultiAff>(union.simplify(), expr2);

		JNIISLMap func1 = expr1.copy().toBasicMap().toMap();
		func1 = func1.intersectDomain(union.copy());
		if (func1.equivalence(mapUnion.copy()))
			return new AbstractMap.SimpleEntry<JNIISLSet, JNIISLMultiAff>(union.simplify(), expr1);

		JNIISLMap func2 = expr2.copy().toBasicMap().toMap();
		func2 = func2.intersectDomain(union.copy());
		if (func2.equivalence(mapUnion.copy()))
			return new AbstractMap.SimpleEntry<JNIISLSet, JNIISLMultiAff>(union.simplify(), expr2);

		// if the number of dimensions from the input (of the map) differs from
		// the output, stop here (return null).
		if (expr1.getNbAff() != set1.getNbDims())
			return null;

		// else try to replace some dimensions with constants (in order to fix
		// some ISL artifacts)
		JNIISLMultiAff tCopy = expr1.copy();
		List<JNIISLAff> tAffs = tCopy.getAffs();
		for (int i = 0; i < mapSpace.getNbDims(JNIISLDimType.isl_dim_out); i++) {
			JNIISLBasicMap tbm1 = JNIISLBasicMap.buildUniverse(mapSpace.copy());
			JNIISLBasicMap tbm2 = JNIISLBasicMap.buildUniverse(mapSpace.copy());
			for (int j = 0; j <= i; j++)
				if (tAffs.get(j).isConstant())
					tbm2 = tbm2.addConstraint(JNIISLConstraint.dimEqual(mapSpace.copy(), j));
				else
					tbm1 = tbm1.addConstraint(JNIISLConstraint.dimEqual(mapSpace.copy(), j));
			for (int j = i + 1; j < mapSpace.getNbDims(JNIISLDimType.isl_dim_out); j++)
				tbm1 = tbm1.addConstraint(JNIISLConstraint.dimEqual(mapSpace.copy(), j));
			JNIISLBasicMap omg = tCopy.copy().toBasicMap().applyRange(tbm1).intersect(tbm2);
			func1 = omg.copy().toMap().intersectDomain(
					union.copy());
			if (func1.equivalence(mapUnion.copy())) {
				JNIISLMultiAff mergedValue = omg.getClosedFormRelation()
						.values().iterator().next();
				return new AbstractMap.SimpleEntry<JNIISLSet, JNIISLMultiAff>(
						union.simplify(), mergedValue);
			}
		}

		return null;
	}

	/**
	 * This method computes the closed form expressions of a relation. For
	 * example, given "{[i] -> [j] : 0 <= i < 8 && i = j + 8}", the result is a
	 * map with single entry containing the expression of "j" given "i" : "i-8",
	 * and its validity domain : "{[i] : 0 <= i < 8}". <br/>
	 * IMPORTANT : this methods compute the expressions using the lexmin
	 * algorithm. If the lexmax is expected, first apply the lexmax on the
	 * relation, and then call this method.
	 * 
	 * @return Map containing the closed form expressions of the relation, and
	 *         their associated validity domains.
	 */
	public Map<JNIISLSet, JNIISLMultiAff> getClosedFormRelation() {
		if (!this.isSingleValued())
			throw new RuntimeException(this + " is not single valued.");

		//compute the closed form
		Map<JNIISLSet, JNIISLMultiAff> tmp = new LinkedHashMap<JNIISLSet, JNIISLMultiAff>();
		List<JNIISLBasicMap> basicMaps = getBasicMaps();
		for (JNIISLBasicMap bmap : basicMaps) {
			Map<JNIISLSet, JNIISLMultiAff> res = bmap.getClosedFormRelation();
			for (Entry<JNIISLSet, JNIISLMultiAff> e : res.entrySet()) {
				JNIISLMultiAff value = e.getValue();
				JNIISLSet validityDomain = e.getKey();
				tmp.put(validityDomain.simplify(), value);
			}
		}

		//try to reduce the number of expressions
		List<Entry<JNIISLSet, JNIISLMultiAff>> l1 = new ArrayList<Map.Entry<JNIISLSet, JNIISLMultiAff>>(tmp.entrySet());
		main : for (int i = 0; i < l1.size(); i++) {
			Entry<JNIISLSet, JNIISLMultiAff> current = l1.get(i);
			for (int j = i + 1; j < l1.size(); j++) {
				if (i == j)
					continue;
				Entry<JNIISLSet, JNIISLMultiAff> combine = combine(current, l1.get(j));
				if (combine != null) {
					l1.remove(j);
					l1.remove(i);
					l1.add(combine);
					i--;
					continue main;
				}
			}
		}

		// convert list to map 
		// no gist at this point, no need to keep any order
		// although we keep order for deterministic executions
		Map<JNIISLSet, JNIISLMultiAff> res = new LinkedHashMap<JNIISLSet, JNIISLMultiAff>();
		for (Entry<JNIISLSet, JNIISLMultiAff> e : l1)
			res.put(e.getKey(), e.getValue());
		return res;
	}

	public JNIISLMap simplify() {
		return detectEqualities().coalesce();
	}


	public boolean equivalence(Object obj) {
		if (obj instanceof JNIISLMap) {
			return (isEqual((JNIISLMap) obj));
		}
		return false;
	}

	@Deprecated
	public boolean empty() {
		return (this.isEmpty());
	}

	public String toString(ISL_FORMAT format) {
		return ISLPrettyPrinter.asString(this, format);
	}

	public List<String> getParametersNames() {
		int nbParams = (int) getSpace().getNbDims(JNIISLDimType.isl_dim_param);//for(StringBuffer dim : map.get)
		List<String> params = new ArrayList<String>();
		for (int i = 0; i < nbParams; i++) {
			String name = getSpace().getName(JNIISLDimType.isl_dim_param, i);
			params.add(name);
		}
		return params;
	}

	public List<String> getDomainNames() {
		int nbIndices = (int) getSpace().getNbDims(JNIISLDimType.isl_dim_in);//for(StringBuffer dim : map.get)
		List<String> indices = new ArrayList<String>();
		for (int i = 0; i < nbIndices; i++) {
			String name = getSpace().getName(JNIISLDimType.isl_dim_in, i);
			indices.add(name);
		}
		return indices;
	}

	public List<String> getRangeNames() {
		int nbIndices = (int) getSpace().getNbDims(JNIISLDimType.isl_dim_out);//for(StringBuffer dim : map.get)
		List<String> indices = new ArrayList<String>();
		for (int i = 0; i < nbIndices; i++) {
			String name = getSpace().getName(JNIISLDimType.isl_dim_out, i);
			indices.add(name);
		}
		return indices;
	}

	public List<JNIISLBasicMap> getBasicMaps() {
		List<JNIISLBasicMap> res = new ArrayList<JNIISLBasicMap>();
		for (int i = 0; i < getNbBasicMaps(); i++) {
			res.add(getBasicMapAt(i));
		}
		return res;
	}

	public static JNIISLMap lexEQFirst(JNIISLSpace dim, long n) {
		JNIISLBasicMap bmap = JNIISLBasicMap.buildUniverse(dim.copy());

		for (int i = 0; i < n; i++) {
			JNIISLConstraint c = JNIISLConstraint.buildEquality(JNIISLLocalSpace
					.fromSpace(dim.copy()));
			c = c.setConstant(0);
			c = c.setCoefficient(JNIISLDimType.isl_dim_in, i, 1);
			c = c.setCoefficient(JNIISLDimType.isl_dim_out, i, -1);
			bmap = bmap.addConstraint(c);
		}

		return bmap.toMap();
	}

	//FIXME see JNIISLMap.identity(JNIISLSpace set_dim)
	public static JNIISLMap lexEQ(JNIISLSpace dimSet) {
		int n = (int) dimSet.getNbDims(JNIISLDimType.isl_dim_set);
		JNIISLSpace dim = JNIISLSpace.idMapDimFromSetDim(dimSet.copy());
		JNIISLBasicMap bmap = JNIISLBasicMap.buildUniverse(dim.copy());
		for (int i = 0; i < n; i++) {
			JNIISLConstraint c = JNIISLConstraint.buildEquality(dim.copy().toLocalSpace());
			c = c.setConstant(0);
			c = c.setCoefficient(JNIISLDimType.isl_dim_in, i, 1);
			c = c.setCoefficient(JNIISLDimType.isl_dim_out, i, -1);
			bmap = bmap.addConstraint(c);
		}
		return bmap.toMap();
	}

	/**
	 * keeps only one given dimension (pos) of the given dimension type
	 * 
	 * @param type
	 * @param pos
	 * @return
	 */
	public JNIISLMap projectIn(JNIISLDimType type, int pos) {
		int nbdims = (int) this.getSpace().getNbDims(type);
		if (pos < 0 || pos >= nbdims)
			throw new IllegalArgumentException("Cannot project in : nbDims = "
					+ nbdims + "; pos = " + pos);
		JNIISLMap res = this;
		if (pos + 1 <= nbdims - 1)
			res = res.projectOut(type, pos + 1, nbdims - pos - 1);
		if (pos - 1 >= 0)
			res = res.projectOut(type, 0, pos);
		return res;
	}
	
	/***
	 * Converts ISLMap to ISLSet with equivalent constraints, but without the distinction of inputs/outputs.
	 * 
	 * @return
	 */
	public JNIISLSet toSet() {
		return this.moveDims(JNIISLDimType.isl_dim_in, this.getNbIns(), JNIISLDimType.isl_dim_out, 0, this.getNbOuts()).getDomain();
	}
	/*** PROTECTED REGION END ***/


	
	/*************************************** 
	 *	         Static Methods            * 
	 ***************************************/
	/**
	 * isl_map_read_from_str 
	 * 
	 * @generated
	**/
	 public static JNIISLMap buildFromString(JNIISLContext ctx, String str) { 
		/*** PROTECTED REGION ID(static_isl_map_read_from_str) DISABLED START ***/
		JNIISLMap res;
		
		synchronized(LOCK) {
			checkParameters();
			try {
				res = JNIISLMap.build(ISLNative.isl_map_read_from_str(getNativePtr(ctx), str));
			} finally {
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_map_empty 
	 * 
	@take space
	 * @generated
	**/
	 public static JNIISLMap buildEmpty(JNIISLSpace space) { 
		/*** PROTECTED REGION ID(static_isl_map_empty) DISABLED START ***/
		JNIISLMap res;
		
		synchronized(LOCK) {
			checkParameters(space);
			try {
				res = JNIISLMap.build(ISLNative.isl_map_empty(getNativePtr(space)));
			} finally {
				taken(space);
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_map_universe 
	 * 
	@take space
	 * @generated
	**/
	 public static JNIISLMap buildUniverse(JNIISLSpace space) { 
		/*** PROTECTED REGION ID(static_isl_map_universe) DISABLED START ***/
		JNIISLMap res;
		
		synchronized(LOCK) {
			checkParameters(space);
			try {
				res = JNIISLMap.build(ISLNative.isl_map_universe(getNativePtr(space)));
			} finally {
				taken(space);
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_map_nat_universe 
	 * 
	@take space
	 * @generated
	**/
	 public static JNIISLMap buildNonNegUniverse(JNIISLSpace space) { 
		/*** PROTECTED REGION ID(static_isl_map_nat_universe) DISABLED START ***/
		JNIISLMap res;
		
		synchronized(LOCK) {
			checkParameters(space);
			try {
				res = JNIISLMap.build(ISLNative.isl_map_nat_universe(getNativePtr(space)));
			} finally {
				taken(space);
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_map_identity 
	 * 
	@take space
	 * @generated
	**/
	 public static JNIISLMap buildIdentity(JNIISLSpace space) { 
		/*** PROTECTED REGION ID(static_isl_map_identity) DISABLED START ***/
		JNIISLMap res;
		
		synchronized(LOCK) {
			checkParameters(space);
			try {
				res = JNIISLMap.build(ISLNative.isl_map_identity(getNativePtr(space)));
			} finally {
				taken(space);
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_map_from_domain 
	 * 
	@take set
	 * @generated
	**/
	 public static JNIISLMap fromDomain(JNIISLSet set) { 
		/*** PROTECTED REGION ID(static_isl_map_from_domain) DISABLED START ***/
		JNIISLMap res;
		
		synchronized(LOCK) {
			checkParameters(set);
			try {
				res = JNIISLMap.build(ISLNative.isl_map_from_domain(getNativePtr(set)));
			} finally {
				taken(set);
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_map_from_range 
	 * 
	@take set
	 * @generated
	**/
	 public static JNIISLMap fromRange(JNIISLSet set) { 
		/*** PROTECTED REGION ID(static_isl_map_from_range) DISABLED START ***/
		JNIISLMap res;
		
		synchronized(LOCK) {
			checkParameters(set);
			try {
				res = JNIISLMap.build(ISLNative.isl_map_from_range(getNativePtr(set)));
			} finally {
				taken(set);
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_map_from_domain_and_range 
	 * 
	@take domain range
	 * @generated
	**/
	 public static JNIISLMap fromDomainAndRange(JNIISLSet domain, JNIISLSet range) { 
		/*** PROTECTED REGION ID(static_isl_map_from_domain_and_range) DISABLED START ***/
		JNIISLMap res;
		
		synchronized(LOCK) {
			checkParameters(domain, range);
			try {
				res = JNIISLMap.build(ISLNative.isl_map_from_domain_and_range(getNativePtr(domain), getNativePtr(range)));
			} finally {
				taken(domain);
				taken(range);
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_map_to_string 
	 * 
	 * @generated
	**/
	 public static String _toString(JNIISLMap map, int format) { 
		/*** PROTECTED REGION ID(static_isl_map_to_string) DISABLED START ***/
		String res;
		
		synchronized(LOCK) {
			checkParameters();
			try {
				res = ISLNative.isl_map_to_string(getNativePtr(map), format);
			} finally {
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	
	/*************************************** 
	 *	         Member Methods            * 
	 ***************************************/
	/**
	 * isl_union_map_from_map 
	 * 
	 * @take this
	 * @generated
	**/
	public JNIISLUnionMap toUnionMap() {
		/*** PROTECTED REGION ID(isl_union_map_from_map) DISABLED START ***/
		JNIISLUnionMap res;
		
		synchronized(LOCK) {
			checkParameters(this);
			try {
				res = JNIISLUnionMap.build(ISLNative.isl_union_map_from_map(getNativePtr(this)));
			} finally {
				taken(this);
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_pw_multi_aff_from_map 
	 * 
	 * @take this
	 * @generated
	**/
	public JNIISLPWMultiAff toPWMultiAff() {
		/*** PROTECTED REGION ID(isl_pw_multi_aff_from_map) DISABLED START ***/
		JNIISLPWMultiAff res;
		
		synchronized(LOCK) {
			checkParameters(this);
			try {
				res = JNIISLPWMultiAff.build(ISLNative.isl_pw_multi_aff_from_map(getNativePtr(this)));
			} finally {
				taken(this);
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_map_get_ctx 
	 * 
	 * @generated
	**/
	public JNIISLContext getContext() {
		/*** PROTECTED REGION ID(isl_map_get_ctx) DISABLED START ***/
		JNIISLContext res;
		
		synchronized(LOCK) {
			checkParameters();
			try {
				res = JNIISLContext.build(ISLNative.isl_map_get_ctx(getNativePtr(this)));
			} finally {
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_map_get_space 
	 * 
	 * @generated
	**/
	public JNIISLSpace getSpace() {
		/*** PROTECTED REGION ID(isl_map_get_space) DISABLED START ***/
		JNIISLSpace res;
		
		synchronized(LOCK) {
			checkParameters();
			try {
				res = JNIISLSpace.build(ISLNative.isl_map_get_space(getNativePtr(this)));
			} finally {
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_map_copy 
	 * 
	 * @generated
	**/
	public JNIISLMap copy() {
		/*** PROTECTED REGION ID(isl_map_copy) DISABLED START ***/
		JNIISLMap res;
		
		synchronized(LOCK) {
			checkParameters();
			try {
				res = JNIISLMap.build(ISLNative.isl_map_copy(getNativePtr(this)));
			} finally {
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_map_free 
	 * 
	 * @take this
	 * @generated
	**/
	public void free() {
		/*** PROTECTED REGION ID(isl_map_free) DISABLED START ***/
		
		synchronized(LOCK) {
			checkParameters(this);
			try {
				ISLNative.isl_map_free(getNativePtr(this));
			} finally {
				taken(this);
			}
		}
		
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_map_add_constraint 
	 * 
	 * @take this constraint
	 * @generated
	**/
	public JNIISLMap addConstraint(JNIISLConstraint constraint) {
		/*** PROTECTED REGION ID(isl_map_add_constraint) DISABLED START ***/
		JNIISLMap res;
		
		synchronized(LOCK) {
			checkParameters(this, constraint);
			try {
				res = JNIISLMap.build(ISLNative.isl_map_add_constraint(getNativePtr(this), getNativePtr(constraint)));
			} finally {
				taken(this);
				taken(constraint);
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_map_make_disjoint 
	 * 
	 * @take this
	 * @generated
	**/
	public JNIISLMap makeDisjoint() {
		/*** PROTECTED REGION ID(isl_map_make_disjoint) DISABLED START ***/
		JNIISLMap res;
		
		synchronized(LOCK) {
			checkParameters(this);
			try {
				res = JNIISLMap.build(ISLNative.isl_map_make_disjoint(getNativePtr(this)));
			} finally {
				taken(this);
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_map_compute_divs 
	 * 
	 * @take this
	 * @generated
	**/
	public JNIISLMap computeDivs() {
		/*** PROTECTED REGION ID(isl_map_compute_divs) DISABLED START ***/
		JNIISLMap res;
		
		synchronized(LOCK) {
			checkParameters(this);
			try {
				res = JNIISLMap.build(ISLNative.isl_map_compute_divs(getNativePtr(this)));
			} finally {
				taken(this);
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_map_remove_divs 
	 * 
	 * @take this
	 * @generated
	**/
	public JNIISLMap removeDivs() {
		/*** PROTECTED REGION ID(isl_map_remove_divs) DISABLED START ***/
		JNIISLMap res;
		
		synchronized(LOCK) {
			checkParameters(this);
			try {
				res = JNIISLMap.build(ISLNative.isl_map_remove_divs(getNativePtr(this)));
			} finally {
				taken(this);
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_map_remove_unknown_divs 
	 * 
	 * @take this
	 * @generated
	**/
	public JNIISLMap removeUnknownDivs() {
		/*** PROTECTED REGION ID(isl_map_remove_unknown_divs) DISABLED START ***/
		JNIISLMap res;
		
		synchronized(LOCK) {
			checkParameters(this);
			try {
				res = JNIISLMap.build(ISLNative.isl_map_remove_unknown_divs(getNativePtr(this)));
			} finally {
				taken(this);
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_map_remove_divs_involving_dims 
	 * 
	 * @take this
	 * @generated
	**/
	public JNIISLMap removeDivsInvolvingDims(JNIISLDimType type, int first, int n) {
		/*** PROTECTED REGION ID(isl_map_remove_divs_involving_dims) DISABLED START ***/
		JNIISLMap res;
		
		synchronized(LOCK) {
			checkParameters(this);
			try {
				res = JNIISLMap.build(ISLNative.isl_map_remove_divs_involving_dims(getNativePtr(this), type.getValue(), first, n));
			} finally {
				taken(this);
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_map_dim 
	 * 
	 * @generated
	**/
	public int getNbDims(JNIISLDimType type) {
		/*** PROTECTED REGION ID(isl_map_dim) DISABLED START ***/
		int res;
		
		synchronized(LOCK) {
			checkParameters();
			try {
				res = ISLNative.isl_map_dim(getNativePtr(this), type.getValue());
			} finally {
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_map_get_tuple_name 
	 * 
	 * @generated
	**/
	public String getTupleName(JNIISLDimType type) {
		/*** PROTECTED REGION ID(isl_map_get_tuple_name) DISABLED START ***/
		String res;
		
		synchronized(LOCK) {
			checkParameters();
			try {
				res = ISLNative.isl_map_get_tuple_name(getNativePtr(this), type.getValue());
			} finally {
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_map_set_tuple_name 
	 * 
	 * @take this
	 * @generated
	**/
	public JNIISLMap setTupleName(JNIISLDimType type, String s) {
		/*** PROTECTED REGION ID(isl_map_set_tuple_name) DISABLED START ***/
		JNIISLMap res;
		
		synchronized(LOCK) {
			checkParameters(this);
			try {
				res = JNIISLMap.build(ISLNative.isl_map_set_tuple_name(getNativePtr(this), type.getValue(), s));
			} finally {
				taken(this);
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_map_get_dim_name 
	 * 
	 * @generated
	**/
	public String getDimName(JNIISLDimType type, int pos) {
		/*** PROTECTED REGION ID(isl_map_get_dim_name) DISABLED START ***/
		String res;
		
		synchronized(LOCK) {
			checkParameters();
			try {
				res = ISLNative.isl_map_get_dim_name(getNativePtr(this), type.getValue(), pos);
			} finally {
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_map_set_dim_name 
	 * 
	 * @take this
	 * @generated
	**/
	public JNIISLMap setDimName(JNIISLDimType type, int pos, String s) {
		/*** PROTECTED REGION ID(isl_map_set_dim_name) DISABLED START ***/
		JNIISLMap res;
		
		synchronized(LOCK) {
			checkParameters(this);
			try {
				res = JNIISLMap.build(ISLNative.isl_map_set_dim_name(getNativePtr(this), type.getValue(), pos, s));
			} finally {
				taken(this);
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_map_has_tuple_name 
	 * 
	 * @generated
	**/
	public boolean hasTupleName(JNIISLDimType type) {
		/*** PROTECTED REGION ID(isl_map_has_tuple_name) DISABLED START ***/
		boolean res;
		
		synchronized(LOCK) {
			checkParameters();
			try {
				res = ISLNative.isl_map_has_tuple_name(getNativePtr(this), type.getValue()) != 0;
			} finally {
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_map_has_dim_name 
	 * 
	 * @generated
	**/
	public boolean hasDimName(JNIISLDimType type, int pos) {
		/*** PROTECTED REGION ID(isl_map_has_dim_name) DISABLED START ***/
		boolean res;
		
		synchronized(LOCK) {
			checkParameters();
			try {
				res = ISLNative.isl_map_has_dim_name(getNativePtr(this), type.getValue(), pos) != 0;
			} finally {
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_map_find_dim_by_name 
	 * 
	 * @generated
	**/
	public int findDimByName(JNIISLDimType type, String name) {
		/*** PROTECTED REGION ID(isl_map_find_dim_by_name) DISABLED START ***/
		int res;
		
		synchronized(LOCK) {
			checkParameters();
			try {
				res = ISLNative.isl_map_find_dim_by_name(getNativePtr(this), type.getValue(), name);
			} finally {
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_map_involves_dims 
	 * 
	 * @generated
	**/
	public boolean involvesDims(JNIISLDimType type, int first, int n) {
		/*** PROTECTED REGION ID(isl_map_involves_dims) DISABLED START ***/
		boolean res;
		
		synchronized(LOCK) {
			checkParameters();
			try {
				res = ISLNative.isl_map_involves_dims(getNativePtr(this), type.getValue(), first, n) != 0;
			} finally {
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_map_is_empty 
	 * 
	 * @generated
	**/
	public boolean isEmpty() {
		/*** PROTECTED REGION ID(isl_map_is_empty) DISABLED START ***/
		boolean res;
		
		synchronized(LOCK) {
			checkParameters();
			try {
				res = ISLNative.isl_map_is_empty(getNativePtr(this)) != 0;
			} finally {
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_map_is_bijective 
	 * 
	 * @generated
	**/
	public boolean isBijective() {
		/*** PROTECTED REGION ID(isl_map_is_bijective) DISABLED START ***/
		boolean res;
		
		synchronized(LOCK) {
			checkParameters();
			try {
				res = ISLNative.isl_map_is_bijective(getNativePtr(this)) != 0;
			} finally {
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_map_is_injective 
	 * 
	 * @generated
	**/
	public boolean isInjective() {
		/*** PROTECTED REGION ID(isl_map_is_injective) DISABLED START ***/
		boolean res;
		
		synchronized(LOCK) {
			checkParameters();
			try {
				res = ISLNative.isl_map_is_injective(getNativePtr(this)) != 0;
			} finally {
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_map_is_single_valued 
	 * 
	 * @generated
	**/
	public boolean isSingleValued() {
		/*** PROTECTED REGION ID(isl_map_is_single_valued) DISABLED START ***/
		boolean res;
		
		synchronized(LOCK) {
			checkParameters();
			try {
				res = ISLNative.isl_map_is_single_valued(getNativePtr(this)) != 0;
			} finally {
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_map_domain_is_wrapping 
	 * 
	 * @generated
	**/
	public boolean domainIsWrapping() {
		/*** PROTECTED REGION ID(isl_map_domain_is_wrapping) DISABLED START ***/
		boolean res;
		
		synchronized(LOCK) {
			checkParameters();
			try {
				res = ISLNative.isl_map_domain_is_wrapping(getNativePtr(this)) != 0;
			} finally {
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_map_range_is_wrapping 
	 * 
	 * @generated
	**/
	public boolean rangeIsWrapping() {
		/*** PROTECTED REGION ID(isl_map_range_is_wrapping) DISABLED START ***/
		boolean res;
		
		synchronized(LOCK) {
			checkParameters();
			try {
				res = ISLNative.isl_map_range_is_wrapping(getNativePtr(this)) != 0;
			} finally {
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_map_can_curry 
	 * 
	 * @generated
	**/
	public boolean canCurry() {
		/*** PROTECTED REGION ID(isl_map_can_curry) DISABLED START ***/
		boolean res;
		
		synchronized(LOCK) {
			checkParameters();
			try {
				res = ISLNative.isl_map_can_curry(getNativePtr(this)) != 0;
			} finally {
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_map_can_uncurry 
	 * 
	 * @generated
	**/
	public boolean canUncurry() {
		/*** PROTECTED REGION ID(isl_map_can_uncurry) DISABLED START ***/
		boolean res;
		
		synchronized(LOCK) {
			checkParameters();
			try {
				res = ISLNative.isl_map_can_uncurry(getNativePtr(this)) != 0;
			} finally {
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_map_can_zip 
	 * 
	 * @generated
	**/
	public boolean canZip() {
		/*** PROTECTED REGION ID(isl_map_can_zip) DISABLED START ***/
		boolean res;
		
		synchronized(LOCK) {
			checkParameters();
			try {
				res = ISLNative.isl_map_can_zip(getNativePtr(this)) != 0;
			} finally {
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_map_plain_is_empty 
	 * 
	 * @generated
	**/
	public boolean isPlainEmpty() {
		/*** PROTECTED REGION ID(isl_map_plain_is_empty) DISABLED START ***/
		boolean res;
		
		synchronized(LOCK) {
			checkParameters();
			try {
				res = ISLNative.isl_map_plain_is_empty(getNativePtr(this)) != 0;
			} finally {
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_map_plain_is_injective 
	 * 
	 * @generated
	**/
	public boolean isPlainInjective() {
		/*** PROTECTED REGION ID(isl_map_plain_is_injective) DISABLED START ***/
		boolean res;
		
		synchronized(LOCK) {
			checkParameters();
			try {
				res = ISLNative.isl_map_plain_is_injective(getNativePtr(this)) != 0;
			} finally {
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_map_plain_is_single_valued 
	 * 
	 * @generated
	**/
	public boolean isPlainSingleValued() {
		/*** PROTECTED REGION ID(isl_map_plain_is_single_valued) DISABLED START ***/
		boolean res;
		
		synchronized(LOCK) {
			checkParameters();
			try {
				res = ISLNative.isl_map_plain_is_single_valued(getNativePtr(this)) != 0;
			} finally {
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_map_is_equal 
	 * 
	 * @generated
	**/
	public boolean isEqual(JNIISLMap map2) {
		/*** PROTECTED REGION ID(isl_map_is_equal) DISABLED START ***/
		boolean res;
		
		synchronized(LOCK) {
			checkParameters();
			try {
				res = ISLNative.isl_map_is_equal(getNativePtr(this), getNativePtr(map2)) != 0;
			} finally {
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_map_is_disjoint 
	 * 
	 * @generated
	**/
	public boolean isDisjoint(JNIISLMap map2) {
		/*** PROTECTED REGION ID(isl_map_is_disjoint) DISABLED START ***/
		boolean res;
		
		synchronized(LOCK) {
			checkParameters();
			try {
				res = ISLNative.isl_map_is_disjoint(getNativePtr(this), getNativePtr(map2)) != 0;
			} finally {
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_map_is_subset 
	 * 
	 * @generated
	**/
	public boolean isSubset(JNIISLMap map2) {
		/*** PROTECTED REGION ID(isl_map_is_subset) DISABLED START ***/
		boolean res;
		
		synchronized(LOCK) {
			checkParameters();
			try {
				res = ISLNative.isl_map_is_subset(getNativePtr(this), getNativePtr(map2)) != 0;
			} finally {
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_map_is_strict_subset 
	 * 
	 * @generated
	**/
	public boolean isStrictSubset(JNIISLMap map2) {
		/*** PROTECTED REGION ID(isl_map_is_strict_subset) DISABLED START ***/
		boolean res;
		
		synchronized(LOCK) {
			checkParameters();
			try {
				res = ISLNative.isl_map_is_strict_subset(getNativePtr(this), getNativePtr(map2)) != 0;
			} finally {
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_map_plain_is_equal 
	 * 
	 * @generated
	**/
	public boolean isPlainEqual(JNIISLMap map2) {
		/*** PROTECTED REGION ID(isl_map_plain_is_equal) DISABLED START ***/
		boolean res;
		
		synchronized(LOCK) {
			checkParameters();
			try {
				res = ISLNative.isl_map_plain_is_equal(getNativePtr(this), getNativePtr(map2)) != 0;
			} finally {
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_map_params 
	 * 
	 * @take this
	 * @generated
	**/
	public JNIISLSet paramSet() {
		/*** PROTECTED REGION ID(isl_map_params) DISABLED START ***/
		JNIISLSet res;
		
		synchronized(LOCK) {
			checkParameters(this);
			try {
				res = JNIISLSet.build(ISLNative.isl_map_params(getNativePtr(this)));
			} finally {
				taken(this);
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_map_complement 
	 * 
	 * @take this
	 * @generated
	**/
	public JNIISLMap complement() {
		/*** PROTECTED REGION ID(isl_map_complement) DISABLED START ***/
		JNIISLMap res;
		
		synchronized(LOCK) {
			checkParameters(this);
			try {
				res = JNIISLMap.build(ISLNative.isl_map_complement(getNativePtr(this)));
			} finally {
				taken(this);
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_map_reverse 
	 * 
	 * @take this
	 * @generated
	**/
	public JNIISLMap reverse() {
		/*** PROTECTED REGION ID(isl_map_reverse) DISABLED START ***/
		JNIISLMap res;
		
		synchronized(LOCK) {
			checkParameters(this);
			try {
				res = JNIISLMap.build(ISLNative.isl_map_reverse(getNativePtr(this)));
			} finally {
				taken(this);
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_map_project_out 
	 * 
	 * @take this
	 * @generated
	**/
	public JNIISLMap projectOut(JNIISLDimType type, int first, int n) {
		/*** PROTECTED REGION ID(isl_map_project_out) DISABLED START ***/
		JNIISLMap res;
		
		synchronized(LOCK) {
			checkParameters(this);
			try {
				res = JNIISLMap.build(ISLNative.isl_map_project_out(getNativePtr(this), type.getValue(), first, n));
			} finally {
				taken(this);
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_map_domain 
	 * 
	 * @take this
	 * @generated
	**/
	public JNIISLSet domain() {
		/*** PROTECTED REGION ID(isl_map_domain) DISABLED START ***/
		JNIISLSet res;
		
		synchronized(LOCK) {
			checkParameters(this);
			try {
				res = JNIISLSet.build(ISLNative.isl_map_domain(getNativePtr(this)));
			} finally {
				taken(this);
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_map_range 
	 * 
	 * @take this
	 * @generated
	**/
	public JNIISLSet range() {
		/*** PROTECTED REGION ID(isl_map_range) DISABLED START ***/
		JNIISLSet res;
		
		synchronized(LOCK) {
			checkParameters(this);
			try {
				res = JNIISLSet.build(ISLNative.isl_map_range(getNativePtr(this)));
			} finally {
				taken(this);
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_map_domain_map 
	 * 
	 * @take this
	 * @generated
	**/
	public JNIISLMap domainMap() {
		/*** PROTECTED REGION ID(isl_map_domain_map) DISABLED START ***/
		JNIISLMap res;
		
		synchronized(LOCK) {
			checkParameters(this);
			try {
				res = JNIISLMap.build(ISLNative.isl_map_domain_map(getNativePtr(this)));
			} finally {
				taken(this);
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_map_range_map 
	 * 
	 * @take this
	 * @generated
	**/
	public JNIISLMap rangeMap() {
		/*** PROTECTED REGION ID(isl_map_range_map) DISABLED START ***/
		JNIISLMap res;
		
		synchronized(LOCK) {
			checkParameters(this);
			try {
				res = JNIISLMap.build(ISLNative.isl_map_range_map(getNativePtr(this)));
			} finally {
				taken(this);
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_map_eliminate 
	 * 
	 * @take this
	 * @generated
	**/
	public JNIISLMap eliminate(JNIISLDimType type, int first, int n) {
		/*** PROTECTED REGION ID(isl_map_eliminate) DISABLED START ***/
		JNIISLMap res;
		
		synchronized(LOCK) {
			checkParameters(this);
			try {
				res = JNIISLMap.build(ISLNative.isl_map_eliminate(getNativePtr(this), type.getValue(), first, n));
			} finally {
				taken(this);
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_map_fix_si 
	 * 
	 * @take this
	 * @generated
	**/
	public JNIISLMap sliceFixed(JNIISLDimType type, int pos, int value) {
		/*** PROTECTED REGION ID(isl_map_fix_si) DISABLED START ***/
		JNIISLMap res;
		
		synchronized(LOCK) {
			checkParameters(this);
			try {
				res = JNIISLMap.build(ISLNative.isl_map_fix_si(getNativePtr(this), type.getValue(), pos, value));
			} finally {
				taken(this);
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_map_fix_val 
	 * 
	 * @take this v
	 * @generated
	**/
	public JNIISLMap sliceFixed(JNIISLDimType type, int pos, JNIISLVal v) {
		/*** PROTECTED REGION ID(isl_map_fix_val) DISABLED START ***/
		JNIISLMap res;
		
		synchronized(LOCK) {
			checkParameters(this, v);
			try {
				res = JNIISLMap.build(ISLNative.isl_map_fix_val(getNativePtr(this), type.getValue(), pos, getNativePtr(v)));
			} finally {
				taken(this);
				taken(v);
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_map_lower_bound_si 
	 * 
	 * @take this
	 * @generated
	**/
	public JNIISLMap sliceLB(JNIISLDimType type, int pos, int value) {
		/*** PROTECTED REGION ID(isl_map_lower_bound_si) DISABLED START ***/
		JNIISLMap res;
		
		synchronized(LOCK) {
			checkParameters(this);
			try {
				res = JNIISLMap.build(ISLNative.isl_map_lower_bound_si(getNativePtr(this), type.getValue(), pos, value));
			} finally {
				taken(this);
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_map_upper_bound_si 
	 * 
	 * @take this
	 * @generated
	**/
	public JNIISLMap sliceUB(JNIISLDimType type, int pos, int value) {
		/*** PROTECTED REGION ID(isl_map_upper_bound_si) DISABLED START ***/
		JNIISLMap res;
		
		synchronized(LOCK) {
			checkParameters(this);
			try {
				res = JNIISLMap.build(ISLNative.isl_map_upper_bound_si(getNativePtr(this), type.getValue(), pos, value));
			} finally {
				taken(this);
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_map_equate 
	 * 
	 * @take this
	 * @generated
	**/
	public JNIISLMap sliceEquate(JNIISLDimType type1, int pos1, JNIISLDimType type2, int pos2) {
		/*** PROTECTED REGION ID(isl_map_equate) DISABLED START ***/
		JNIISLMap res;
		
		synchronized(LOCK) {
			checkParameters(this);
			try {
				res = JNIISLMap.build(ISLNative.isl_map_equate(getNativePtr(this), type1.getValue(), pos1, type2.getValue(), pos2));
			} finally {
				taken(this);
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_map_oppose 
	 * 
	 * @take this
	 * @generated
	**/
	public JNIISLMap sliceOppose(JNIISLDimType type1, int pos1, JNIISLDimType type2, int pos2) {
		/*** PROTECTED REGION ID(isl_map_oppose) DISABLED START ***/
		JNIISLMap res;
		
		synchronized(LOCK) {
			checkParameters(this);
			try {
				res = JNIISLMap.build(ISLNative.isl_map_oppose(getNativePtr(this), type1.getValue(), pos1, type2.getValue(), pos2));
			} finally {
				taken(this);
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_map_order_ge 
	 * 
	 * @take this
	 * @generated
	**/
	public JNIISLMap sliceGE(JNIISLDimType type1, int pos1, JNIISLDimType type2, int pos2) {
		/*** PROTECTED REGION ID(isl_map_order_ge) DISABLED START ***/
		JNIISLMap res;
		
		synchronized(LOCK) {
			checkParameters(this);
			try {
				res = JNIISLMap.build(ISLNative.isl_map_order_ge(getNativePtr(this), type1.getValue(), pos1, type2.getValue(), pos2));
			} finally {
				taken(this);
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_map_order_gt 
	 * 
	 * @take this
	 * @generated
	**/
	public JNIISLMap sliceGT(JNIISLDimType type1, int pos1, JNIISLDimType type2, int pos2) {
		/*** PROTECTED REGION ID(isl_map_order_gt) DISABLED START ***/
		JNIISLMap res;
		
		synchronized(LOCK) {
			checkParameters(this);
			try {
				res = JNIISLMap.build(ISLNative.isl_map_order_gt(getNativePtr(this), type1.getValue(), pos1, type2.getValue(), pos2));
			} finally {
				taken(this);
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_map_order_le 
	 * 
	 * @take this
	 * @generated
	**/
	public JNIISLMap sliceLE(JNIISLDimType type1, int pos1, JNIISLDimType type2, int pos2) {
		/*** PROTECTED REGION ID(isl_map_order_le) DISABLED START ***/
		JNIISLMap res;
		
		synchronized(LOCK) {
			checkParameters(this);
			try {
				res = JNIISLMap.build(ISLNative.isl_map_order_le(getNativePtr(this), type1.getValue(), pos1, type2.getValue(), pos2));
			} finally {
				taken(this);
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_map_order_lt 
	 * 
	 * @take this
	 * @generated
	**/
	public JNIISLMap sliceLT(JNIISLDimType type1, int pos1, JNIISLDimType type2, int pos2) {
		/*** PROTECTED REGION ID(isl_map_order_lt) DISABLED START ***/
		JNIISLMap res;
		
		synchronized(LOCK) {
			checkParameters(this);
			try {
				res = JNIISLMap.build(ISLNative.isl_map_order_lt(getNativePtr(this), type1.getValue(), pos1, type2.getValue(), pos2));
			} finally {
				taken(this);
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_map_deltas 
	 * 
	 * @take this
	 * @generated
	**/
	public JNIISLSet deltas() {
		/*** PROTECTED REGION ID(isl_map_deltas) DISABLED START ***/
		JNIISLSet res;
		
		synchronized(LOCK) {
			checkParameters(this);
			try {
				res = JNIISLSet.build(ISLNative.isl_map_deltas(getNativePtr(this)));
			} finally {
				taken(this);
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_map_deltas_map 
	 * 
	 * @take this
	 * @generated
	**/
	public JNIISLMap deltasMap() {
		/*** PROTECTED REGION ID(isl_map_deltas_map) DISABLED START ***/
		JNIISLMap res;
		
		synchronized(LOCK) {
			checkParameters(this);
			try {
				res = JNIISLMap.build(ISLNative.isl_map_deltas_map(getNativePtr(this)));
			} finally {
				taken(this);
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_map_coalesce 
	 * 
	 * @take this
	 * @generated
	**/
	public JNIISLMap coalesce() {
		/*** PROTECTED REGION ID(isl_map_coalesce) DISABLED START ***/
		JNIISLMap res;
		
		synchronized(LOCK) {
			checkParameters(this);
			try {
				res = JNIISLMap.build(ISLNative.isl_map_coalesce(getNativePtr(this)));
			} finally {
				taken(this);
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_map_detect_equalities 
	 * 
	 * @take this
	 * @generated
	**/
	public JNIISLMap detectEqualities() {
		/*** PROTECTED REGION ID(isl_map_detect_equalities) DISABLED START ***/
		JNIISLMap res;
		
		synchronized(LOCK) {
			checkParameters(this);
			try {
				res = JNIISLMap.build(ISLNative.isl_map_detect_equalities(getNativePtr(this)));
			} finally {
				taken(this);
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_map_remove_redundancies 
	 * 
	 * @take this
	 * @generated
	**/
	public JNIISLMap removeRedundancies() {
		/*** PROTECTED REGION ID(isl_map_remove_redundancies) DISABLED START ***/
		JNIISLMap res;
		
		synchronized(LOCK) {
			checkParameters(this);
			try {
				res = JNIISLMap.build(ISLNative.isl_map_remove_redundancies(getNativePtr(this)));
			} finally {
				taken(this);
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_map_convex_hull 
	 * 
	 * @take this
	 * @generated
	**/
	public JNIISLBasicMap convexHull() {
		/*** PROTECTED REGION ID(isl_map_convex_hull) DISABLED START ***/
		JNIISLBasicMap res;
		
		synchronized(LOCK) {
			checkParameters(this);
			try {
				res = JNIISLBasicMap.build(ISLNative.isl_map_convex_hull(getNativePtr(this)));
			} finally {
				taken(this);
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_map_affine_hull 
	 * 
	 * @take this
	 * @generated
	**/
	public JNIISLBasicMap affineHull() {
		/*** PROTECTED REGION ID(isl_map_affine_hull) DISABLED START ***/
		JNIISLBasicMap res;
		
		synchronized(LOCK) {
			checkParameters(this);
			try {
				res = JNIISLBasicMap.build(ISLNative.isl_map_affine_hull(getNativePtr(this)));
			} finally {
				taken(this);
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_map_polyhedral_hull 
	 * 
	 * @take this
	 * @generated
	**/
	public JNIISLBasicMap polyhedralHull() {
		/*** PROTECTED REGION ID(isl_map_polyhedral_hull) DISABLED START ***/
		JNIISLBasicMap res;
		
		synchronized(LOCK) {
			checkParameters(this);
			try {
				res = JNIISLBasicMap.build(ISLNative.isl_map_polyhedral_hull(getNativePtr(this)));
			} finally {
				taken(this);
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_map_simple_hull 
	 * 
	 * @take this
	 * @generated
	**/
	public JNIISLBasicMap simpleHull() {
		/*** PROTECTED REGION ID(isl_map_simple_hull) DISABLED START ***/
		JNIISLBasicMap res;
		
		synchronized(LOCK) {
			checkParameters(this);
			try {
				res = JNIISLBasicMap.build(ISLNative.isl_map_simple_hull(getNativePtr(this)));
			} finally {
				taken(this);
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_map_unshifted_simple_hull 
	 * 
	 * @take this
	 * @generated
	**/
	public JNIISLBasicMap unshiftedSimpleHull() {
		/*** PROTECTED REGION ID(isl_map_unshifted_simple_hull) DISABLED START ***/
		JNIISLBasicMap res;
		
		synchronized(LOCK) {
			checkParameters(this);
			try {
				res = JNIISLBasicMap.build(ISLNative.isl_map_unshifted_simple_hull(getNativePtr(this)));
			} finally {
				taken(this);
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_map_drop_constraints_involving_dims 
	 * 
	 * @take this
	 * @generated
	**/
	public JNIISLMap dropConstraintsInvolvingDims(JNIISLDimType type, int first, int n) {
		/*** PROTECTED REGION ID(isl_map_drop_constraints_involving_dims) DISABLED START ***/
		JNIISLMap res;
		
		synchronized(LOCK) {
			checkParameters(this);
			try {
				res = JNIISLMap.build(ISLNative.isl_map_drop_constraints_involving_dims(getNativePtr(this), type.getValue(), first, n));
			} finally {
				taken(this);
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_map_sample 
	 * 
	 * @take this
	 * @generated
	**/
	public JNIISLBasicMap sample() {
		/*** PROTECTED REGION ID(isl_map_sample) DISABLED START ***/
		JNIISLBasicMap res;
		
		synchronized(LOCK) {
			checkParameters(this);
			try {
				res = JNIISLBasicMap.build(ISLNative.isl_map_sample(getNativePtr(this)));
			} finally {
				taken(this);
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_map_fixed_power_val 
	 * 
	 * @take this exp
	 * @generated
	**/
	public JNIISLMap power(JNIISLVal exp) {
		/*** PROTECTED REGION ID(isl_map_fixed_power_val) DISABLED START ***/
		JNIISLMap res;
		
		synchronized(LOCK) {
			checkParameters(this, exp);
			try {
				res = JNIISLMap.build(ISLNative.isl_map_fixed_power_val(getNativePtr(this), getNativePtr(exp)));
			} finally {
				taken(this);
				taken(exp);
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_map_power 
	 * 
	 * @take this
	 * @generated
	**/
	public JNIISLMap parametricPower(JNIPtrBoolean exact) {
		/*** PROTECTED REGION ID(isl_map_power) DISABLED START ***/
		JNIISLMap res;
		
		synchronized(LOCK) {
			checkParameters(this);
			try {
				res = JNIISLMap.build(ISLNative.isl_map_power(getNativePtr(this), exact));
			} finally {
				taken(this);
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_map_transitive_closure 
	 * 
	 * @take this
	 * @generated
	**/
	public JNIISLMap transitiveClosure(JNIPtrBoolean exact) {
		/*** PROTECTED REGION ID(isl_map_transitive_closure) DISABLED START ***/
		JNIISLMap res;
		
		synchronized(LOCK) {
			checkParameters(this);
			try {
				res = JNIISLMap.build(ISLNative.isl_map_transitive_closure(getNativePtr(this), exact));
			} finally {
				taken(this);
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_map_reaching_path_lengths 
	 * 
	 * @take this
	 * @generated
	**/
	public JNIISLMap reachingPathLengths(JNIPtrBoolean exact) {
		/*** PROTECTED REGION ID(isl_map_reaching_path_lengths) DISABLED START ***/
		JNIISLMap res;
		
		synchronized(LOCK) {
			checkParameters(this);
			try {
				res = JNIISLMap.build(ISLNative.isl_map_reaching_path_lengths(getNativePtr(this), exact));
			} finally {
				taken(this);
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_map_wrap 
	 * 
	 * @take this
	 * @generated
	**/
	public JNIISLSet wrap() {
		/*** PROTECTED REGION ID(isl_map_wrap) DISABLED START ***/
		JNIISLSet res;
		
		synchronized(LOCK) {
			checkParameters(this);
			try {
				res = JNIISLSet.build(ISLNative.isl_map_wrap(getNativePtr(this)));
			} finally {
				taken(this);
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_map_flatten 
	 * 
	 * @take this
	 * @generated
	**/
	public JNIISLMap flatten() {
		/*** PROTECTED REGION ID(isl_map_flatten) DISABLED START ***/
		JNIISLMap res;
		
		synchronized(LOCK) {
			checkParameters(this);
			try {
				res = JNIISLMap.build(ISLNative.isl_map_flatten(getNativePtr(this)));
			} finally {
				taken(this);
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_map_flatten_domain 
	 * 
	 * @take this
	 * @generated
	**/
	public JNIISLMap flattenDomain() {
		/*** PROTECTED REGION ID(isl_map_flatten_domain) DISABLED START ***/
		JNIISLMap res;
		
		synchronized(LOCK) {
			checkParameters(this);
			try {
				res = JNIISLMap.build(ISLNative.isl_map_flatten_domain(getNativePtr(this)));
			} finally {
				taken(this);
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_map_flatten_range 
	 * 
	 * @take this
	 * @generated
	**/
	public JNIISLMap flattenRange() {
		/*** PROTECTED REGION ID(isl_map_flatten_range) DISABLED START ***/
		JNIISLMap res;
		
		synchronized(LOCK) {
			checkParameters(this);
			try {
				res = JNIISLMap.build(ISLNative.isl_map_flatten_range(getNativePtr(this)));
			} finally {
				taken(this);
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_map_zip 
	 * 
	 * @take this
	 * @generated
	**/
	public JNIISLMap zip() {
		/*** PROTECTED REGION ID(isl_map_zip) DISABLED START ***/
		JNIISLMap res;
		
		synchronized(LOCK) {
			checkParameters(this);
			try {
				res = JNIISLMap.build(ISLNative.isl_map_zip(getNativePtr(this)));
			} finally {
				taken(this);
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_map_curry 
	 * 
	 * @take this
	 * @generated
	**/
	public JNIISLMap curry() {
		/*** PROTECTED REGION ID(isl_map_curry) DISABLED START ***/
		JNIISLMap res;
		
		synchronized(LOCK) {
			checkParameters(this);
			try {
				res = JNIISLMap.build(ISLNative.isl_map_curry(getNativePtr(this)));
			} finally {
				taken(this);
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_map_uncurry 
	 * 
	 * @take this
	 * @generated
	**/
	public JNIISLMap uncurry() {
		/*** PROTECTED REGION ID(isl_map_uncurry) DISABLED START ***/
		JNIISLMap res;
		
		synchronized(LOCK) {
			checkParameters(this);
			try {
				res = JNIISLMap.build(ISLNative.isl_map_uncurry(getNativePtr(this)));
			} finally {
				taken(this);
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_map_align_params 
	 * 
	 * @take this model
	 * @generated
	**/
	public JNIISLMap alignParams(JNIISLSpace model) {
		/*** PROTECTED REGION ID(isl_map_align_params) DISABLED START ***/
		JNIISLMap res;
		
		synchronized(LOCK) {
			checkParameters(this, model);
			try {
				res = JNIISLMap.build(ISLNative.isl_map_align_params(getNativePtr(this), getNativePtr(model)));
			} finally {
				taken(this);
				taken(model);
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_map_add_dims 
	 * 
	 * @take this
	 * @generated
	**/
	public JNIISLMap addDims(JNIISLDimType type, int n) {
		/*** PROTECTED REGION ID(isl_map_add_dims) DISABLED START ***/
		JNIISLMap res;
		
		synchronized(LOCK) {
			checkParameters(this);
			try {
				res = JNIISLMap.build(ISLNative.isl_map_add_dims(getNativePtr(this), type.getValue(), n));
			} finally {
				taken(this);
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_map_insert_dims 
	 * 
	 * @take this
	 * @generated
	**/
	public JNIISLMap insertDims(JNIISLDimType type, int pos, int n) {
		/*** PROTECTED REGION ID(isl_map_insert_dims) DISABLED START ***/
		JNIISLMap res;
		
		synchronized(LOCK) {
			checkParameters(this);
			try {
				res = JNIISLMap.build(ISLNative.isl_map_insert_dims(getNativePtr(this), type.getValue(), pos, n));
			} finally {
				taken(this);
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_map_move_dims 
	 * 
	 * @take this
	 * @generated
	**/
	public JNIISLMap moveDims(JNIISLDimType dst_type, int dst_pos, JNIISLDimType src_type, int src_pos, int n) {
		/*** PROTECTED REGION ID(isl_map_move_dims) DISABLED START ***/
		JNIISLMap res;
		
		synchronized(LOCK) {
			checkParameters(this);
			try {
				res = JNIISLMap.build(ISLNative.isl_map_move_dims(getNativePtr(this), dst_type.getValue(), dst_pos, src_type.getValue(), src_pos, n));
			} finally {
				taken(this);
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_map_intersect_params 
	 * 
	 * @take this params
	 * @generated
	**/
	public JNIISLMap intersectParams(JNIISLSet params) {
		/*** PROTECTED REGION ID(isl_map_intersect_params) DISABLED START ***/
		JNIISLMap res;
		
		synchronized(LOCK) {
			checkParameters(this, params);
			try {
				res = JNIISLMap.build(ISLNative.isl_map_intersect_params(getNativePtr(this), getNativePtr(params)));
			} finally {
				taken(this);
				taken(params);
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_map_intersect_domain 
	 * 
	 * @take this set
	 * @generated
	**/
	public JNIISLMap intersectDomain(JNIISLSet set) {
		/*** PROTECTED REGION ID(isl_map_intersect_domain) DISABLED START ***/
		JNIISLMap res;
		
		synchronized(LOCK) {
			checkParameters(this, set);
			try {
				res = JNIISLMap.build(ISLNative.isl_map_intersect_domain(getNativePtr(this), getNativePtr(set)));
			} finally {
				taken(this);
				taken(set);
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_map_intersect_range 
	 * 
	 * @take this set
	 * @generated
	**/
	public JNIISLMap intersectRange(JNIISLSet set) {
		/*** PROTECTED REGION ID(isl_map_intersect_range) DISABLED START ***/
		JNIISLMap res;
		
		synchronized(LOCK) {
			checkParameters(this, set);
			try {
				res = JNIISLMap.build(ISLNative.isl_map_intersect_range(getNativePtr(this), getNativePtr(set)));
			} finally {
				taken(this);
				taken(set);
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_map_intersect 
	 * 
	 * @take this map2
	 * @generated
	**/
	public JNIISLMap intersect(JNIISLMap map2) {
		/*** PROTECTED REGION ID(isl_map_intersect) DISABLED START ***/
		JNIISLMap res;
		
		synchronized(LOCK) {
			checkParameters(this, map2);
			try {
				res = JNIISLMap.build(ISLNative.isl_map_intersect(getNativePtr(this), getNativePtr(map2)));
			} finally {
				taken(this);
				taken(map2);
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_map_union 
	 * 
	 * @take this map2
	 * @generated
	**/
	public JNIISLMap union(JNIISLMap map2) {
		/*** PROTECTED REGION ID(isl_map_union) DISABLED START ***/
		JNIISLMap res;
		
		synchronized(LOCK) {
			checkParameters(this, map2);
			try {
				res = JNIISLMap.build(ISLNative.isl_map_union(getNativePtr(this), getNativePtr(map2)));
			} finally {
				taken(this);
				taken(map2);
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_map_subtract 
	 * 
	 * @take this map2
	 * @generated
	**/
	public JNIISLMap subtract(JNIISLMap map2) {
		/*** PROTECTED REGION ID(isl_map_subtract) DISABLED START ***/
		JNIISLMap res;
		
		synchronized(LOCK) {
			checkParameters(this, map2);
			try {
				res = JNIISLMap.build(ISLNative.isl_map_subtract(getNativePtr(this), getNativePtr(map2)));
			} finally {
				taken(this);
				taken(map2);
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_map_subtract_domain 
	 * 
	 * @take this dom
	 * @generated
	**/
	public JNIISLMap subtractDomain(JNIISLSet dom) {
		/*** PROTECTED REGION ID(isl_map_subtract_domain) DISABLED START ***/
		JNIISLMap res;
		
		synchronized(LOCK) {
			checkParameters(this, dom);
			try {
				res = JNIISLMap.build(ISLNative.isl_map_subtract_domain(getNativePtr(this), getNativePtr(dom)));
			} finally {
				taken(this);
				taken(dom);
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_map_subtract_range 
	 * 
	 * @take this dom
	 * @generated
	**/
	public JNIISLMap subtractRange(JNIISLSet dom) {
		/*** PROTECTED REGION ID(isl_map_subtract_range) DISABLED START ***/
		JNIISLMap res;
		
		synchronized(LOCK) {
			checkParameters(this, dom);
			try {
				res = JNIISLMap.build(ISLNative.isl_map_subtract_range(getNativePtr(this), getNativePtr(dom)));
			} finally {
				taken(this);
				taken(dom);
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_map_apply_domain 
	 * 
	 * @take this map2
	 * @generated
	**/
	public JNIISLMap applyDomain(JNIISLMap map2) {
		/*** PROTECTED REGION ID(isl_map_apply_domain) DISABLED START ***/
		JNIISLMap res;
		
		synchronized(LOCK) {
			checkParameters(this, map2);
			try {
				res = JNIISLMap.build(ISLNative.isl_map_apply_domain(getNativePtr(this), getNativePtr(map2)));
			} finally {
				taken(this);
				taken(map2);
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_map_apply_range 
	 * 
	 * @take this map2
	 * @generated
	**/
	public JNIISLMap applyRange(JNIISLMap map2) {
		/*** PROTECTED REGION ID(isl_map_apply_range) DISABLED START ***/
		JNIISLMap res;
		
		synchronized(LOCK) {
			checkParameters(this, map2);
			try {
				res = JNIISLMap.build(ISLNative.isl_map_apply_range(getNativePtr(this), getNativePtr(map2)));
			} finally {
				taken(this);
				taken(map2);
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_map_preimage_domain_multi_aff 
	 * 
	 * @take this ma
	 * @generated
	**/
	public JNIISLMap preimageDomain(JNIISLMultiAff ma) {
		/*** PROTECTED REGION ID(isl_map_preimage_domain_multi_aff) DISABLED START ***/
		JNIISLMap res;
		
		synchronized(LOCK) {
			checkParameters(this, ma);
			try {
				res = JNIISLMap.build(ISLNative.isl_map_preimage_domain_multi_aff(getNativePtr(this), getNativePtr(ma)));
			} finally {
				taken(this);
				taken(ma);
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_map_preimage_domain_pw_multi_aff 
	 * 
	 * @take this pma
	 * @generated
	**/
	public JNIISLMap preimageDomain(JNIISLPWMultiAff pma) {
		/*** PROTECTED REGION ID(isl_map_preimage_domain_pw_multi_aff) DISABLED START ***/
		JNIISLMap res;
		
		synchronized(LOCK) {
			checkParameters(this, pma);
			try {
				res = JNIISLMap.build(ISLNative.isl_map_preimage_domain_pw_multi_aff(getNativePtr(this), getNativePtr(pma)));
			} finally {
				taken(this);
				taken(pma);
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_map_preimage_domain_multi_pw_aff 
	 * 
	 * @take this mpa
	 * @generated
	**/
	public JNIISLMap preimageDomain(JNIISLMultiPWAff mpa) {
		/*** PROTECTED REGION ID(isl_map_preimage_domain_multi_pw_aff) DISABLED START ***/
		JNIISLMap res;
		
		synchronized(LOCK) {
			checkParameters(this, mpa);
			try {
				res = JNIISLMap.build(ISLNative.isl_map_preimage_domain_multi_pw_aff(getNativePtr(this), getNativePtr(mpa)));
			} finally {
				taken(this);
				taken(mpa);
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_map_preimage_range_multi_aff 
	 * 
	 * @take this ma
	 * @generated
	**/
	public JNIISLMap preimageRange(JNIISLMultiAff ma) {
		/*** PROTECTED REGION ID(isl_map_preimage_range_multi_aff) DISABLED START ***/
		JNIISLMap res;
		
		synchronized(LOCK) {
			checkParameters(this, ma);
			try {
				res = JNIISLMap.build(ISLNative.isl_map_preimage_range_multi_aff(getNativePtr(this), getNativePtr(ma)));
			} finally {
				taken(this);
				taken(ma);
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_map_preimage_range_pw_multi_aff 
	 * 
	 * @take this pma
	 * @generated
	**/
	public JNIISLMap preimageRange(JNIISLPWMultiAff pma) {
		/*** PROTECTED REGION ID(isl_map_preimage_range_pw_multi_aff) DISABLED START ***/
		JNIISLMap res;
		
		synchronized(LOCK) {
			checkParameters(this, pma);
			try {
				res = JNIISLMap.build(ISLNative.isl_map_preimage_range_pw_multi_aff(getNativePtr(this), getNativePtr(pma)));
			} finally {
				taken(this);
				taken(pma);
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_map_product 
	 * 
	 * @take this map2
	 * @generated
	**/
	public JNIISLMap product(JNIISLMap map2) {
		/*** PROTECTED REGION ID(isl_map_product) DISABLED START ***/
		JNIISLMap res;
		
		synchronized(LOCK) {
			checkParameters(this, map2);
			try {
				res = JNIISLMap.build(ISLNative.isl_map_product(getNativePtr(this), getNativePtr(map2)));
			} finally {
				taken(this);
				taken(map2);
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_map_domain_product 
	 * 
	 * @take this map2
	 * @generated
	**/
	public JNIISLMap domainProduct(JNIISLMap map2) {
		/*** PROTECTED REGION ID(isl_map_domain_product) DISABLED START ***/
		JNIISLMap res;
		
		synchronized(LOCK) {
			checkParameters(this, map2);
			try {
				res = JNIISLMap.build(ISLNative.isl_map_domain_product(getNativePtr(this), getNativePtr(map2)));
			} finally {
				taken(this);
				taken(map2);
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_map_range_product 
	 * 
	 * @take this map2
	 * @generated
	**/
	public JNIISLMap rangeProduct(JNIISLMap map2) {
		/*** PROTECTED REGION ID(isl_map_range_product) DISABLED START ***/
		JNIISLMap res;
		
		synchronized(LOCK) {
			checkParameters(this, map2);
			try {
				res = JNIISLMap.build(ISLNative.isl_map_range_product(getNativePtr(this), getNativePtr(map2)));
			} finally {
				taken(this);
				taken(map2);
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_map_flat_product 
	 * 
	 * @take this map2
	 * @generated
	**/
	public JNIISLMap flatProduct(JNIISLMap map2) {
		/*** PROTECTED REGION ID(isl_map_flat_product) DISABLED START ***/
		JNIISLMap res;
		
		synchronized(LOCK) {
			checkParameters(this, map2);
			try {
				res = JNIISLMap.build(ISLNative.isl_map_flat_product(getNativePtr(this), getNativePtr(map2)));
			} finally {
				taken(this);
				taken(map2);
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_map_gist 
	 * 
	 * @take this context
	 * @generated
	**/
	public JNIISLMap gist(JNIISLMap context) {
		/*** PROTECTED REGION ID(isl_map_gist) DISABLED START ***/
		JNIISLMap res;
		
		synchronized(LOCK) {
			checkParameters(this, context);
			try {
				res = JNIISLMap.build(ISLNative.isl_map_gist(getNativePtr(this), getNativePtr(context)));
			} finally {
				taken(this);
				taken(context);
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_map_gist_params 
	 * 
	 * @take this context
	 * @generated
	**/
	public JNIISLMap gistParams(JNIISLSet context) {
		/*** PROTECTED REGION ID(isl_map_gist_params) DISABLED START ***/
		JNIISLMap res;
		
		synchronized(LOCK) {
			checkParameters(this, context);
			try {
				res = JNIISLMap.build(ISLNative.isl_map_gist_params(getNativePtr(this), getNativePtr(context)));
			} finally {
				taken(this);
				taken(context);
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_map_gist_domain 
	 * 
	 * @take this context
	 * @generated
	**/
	public JNIISLMap gistDomain(JNIISLSet context) {
		/*** PROTECTED REGION ID(isl_map_gist_domain) DISABLED START ***/
		JNIISLMap res;
		
		synchronized(LOCK) {
			checkParameters(this, context);
			try {
				res = JNIISLMap.build(ISLNative.isl_map_gist_domain(getNativePtr(this), getNativePtr(context)));
			} finally {
				taken(this);
				taken(context);
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_map_gist_range 
	 * 
	 * @take this context
	 * @generated
	**/
	public JNIISLMap gistRange(JNIISLSet context) {
		/*** PROTECTED REGION ID(isl_map_gist_range) DISABLED START ***/
		JNIISLMap res;
		
		synchronized(LOCK) {
			checkParameters(this, context);
			try {
				res = JNIISLMap.build(ISLNative.isl_map_gist_range(getNativePtr(this), getNativePtr(context)));
			} finally {
				taken(this);
				taken(context);
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_map_partial_lexmin 
	 * 
	 * @take this dom
	 * @generated
	**/
	public JNIISLMap partialLexMin(JNIISLSet dom) {
		/*** PROTECTED REGION ID(isl_map_partial_lexmin) DISABLED START ***/
		JNIISLMap res;
		
		synchronized(LOCK) {
			checkParameters(this, dom);
			try {
				res = JNIISLMap.build(ISLNative.isl_map_partial_lexmin(getNativePtr(this), getNativePtr(dom)));
			} finally {
				taken(this);
				taken(dom);
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_map_partial_lexmax 
	 * 
	 * @take this dom
	 * @generated
	**/
	public JNIISLMap partialLexMax(JNIISLSet dom) {
		/*** PROTECTED REGION ID(isl_map_partial_lexmax) DISABLED START ***/
		JNIISLMap res;
		
		synchronized(LOCK) {
			checkParameters(this, dom);
			try {
				res = JNIISLMap.build(ISLNative.isl_map_partial_lexmax(getNativePtr(this), getNativePtr(dom)));
			} finally {
				taken(this);
				taken(dom);
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_map_lexmin 
	 * 
	 * @take this
	 * @generated
	**/
	public JNIISLMap lexMin() {
		/*** PROTECTED REGION ID(isl_map_lexmin) DISABLED START ***/
		JNIISLMap res;
		
		synchronized(LOCK) {
			checkParameters(this);
			try {
				res = JNIISLMap.build(ISLNative.isl_map_lexmin(getNativePtr(this)));
			} finally {
				taken(this);
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_map_lexmax 
	 * 
	 * @take this
	 * @generated
	**/
	public JNIISLMap lexMax() {
		/*** PROTECTED REGION ID(isl_map_lexmax) DISABLED START ***/
		JNIISLMap res;
		
		synchronized(LOCK) {
			checkParameters(this);
			try {
				res = JNIISLMap.build(ISLNative.isl_map_lexmax(getNativePtr(this)));
			} finally {
				taken(this);
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_map_lexmin_pw_multi_aff 
	 * 
	 * @take this
	 * @generated
	**/
	public JNIISLPWMultiAff lexMinAsPWMultiAff() {
		/*** PROTECTED REGION ID(isl_map_lexmin_pw_multi_aff) DISABLED START ***/
		JNIISLPWMultiAff res;
		
		synchronized(LOCK) {
			checkParameters(this);
			try {
				res = JNIISLPWMultiAff.build(ISLNative.isl_map_lexmin_pw_multi_aff(getNativePtr(this)));
			} finally {
				taken(this);
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_map_lexmax_pw_multi_aff 
	 * 
	 * @take this
	 * @generated
	**/
	public JNIISLPWMultiAff lexMaxAsPWMultiAff() {
		/*** PROTECTED REGION ID(isl_map_lexmax_pw_multi_aff) DISABLED START ***/
		JNIISLPWMultiAff res;
		
		synchronized(LOCK) {
			checkParameters(this);
			try {
				res = JNIISLPWMultiAff.build(ISLNative.isl_map_lexmax_pw_multi_aff(getNativePtr(this)));
			} finally {
				taken(this);
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_map_get_basic_map_at 
	 * 
	 * @generated
	**/
	public JNIISLBasicMap getBasicMapAt(int pos) {
		/*** PROTECTED REGION ID(isl_map_get_basic_map_at) DISABLED START ***/
		JNIISLBasicMap res;
		
		synchronized(LOCK) {
			checkParameters();
			try {
				res = JNIISLBasicMap.build(ISLNative.isl_map_get_basic_map_at(getNativePtr(this), pos));
			} finally {
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_map_numberof_basic_map 
	 * 
	 * @generated
	**/
	public int getNbBasicMaps() {
		/*** PROTECTED REGION ID(isl_map_numberof_basic_map) DISABLED START ***/
		int res;
		
		synchronized(LOCK) {
			checkParameters();
			try {
				res = ISLNative.isl_map_numberof_basic_map(getNativePtr(this));
			} finally {
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * clear_in_tuple_name 
	 * 
	 * @take this
	 * @generated
	**/
	public JNIISLMap clearInputTupleName() {
		/*** PROTECTED REGION ID(clear_in_tuple_name) DISABLED START ***/
		JNIISLMap res;
		
		synchronized(LOCK) {
			checkParameters(this);
			try {
				res = JNIISLMap.build(ISLNative.clear_in_tuple_name(getNativePtr(this)));
			} finally {
				taken(this);
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * clear_out_tuple_name 
	 * 
	 * @take this
	 * @generated
	**/
	public JNIISLMap clearOutputTupleName() {
		/*** PROTECTED REGION ID(clear_out_tuple_name) DISABLED START ***/
		JNIISLMap res;
		
		synchronized(LOCK) {
			checkParameters(this);
			try {
				res = JNIISLMap.build(ISLNative.clear_out_tuple_name(getNativePtr(this)));
			} finally {
				taken(this);
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	
	public String toString() {
		/*** PROTECTED REGION ID(ISLMap_toString) DISABLED START ***/
			return ISLPrettyPrinter.asString(this);
		/*** PROTECTED REGION END ***/
	}
}
