package fr.irisa.cairn.jnimap.isl.jni;

import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

import fr.irisa.cairn.jnimap.runtime.JNIObject;


/*** PROTECTED REGION ID(ISLBasicMap_userImport) ENABLED START ***/
/*** PROTECTED REGION END ***/

/**
 *  Automatically generated by jnimap 
 * @generated
 */
public class JNIISLBasicMap extends JNIObject {
	
	/* @generated */
	protected JNIISLBasicMap(long ptr) {
		/*** PROTECTED REGION ID(ISLBasicMap_Constructor) DISABLED START ***/
		super(ptr);
		/*** PROTECTED REGION END ***/
	}
	
	/* @generated */
	protected static JNIISLBasicMap build(long ptr) {
		return new JNIISLBasicMap(ptr);
	}
	
	/*** PROTECTED REGION ID(ISLBasicMap_userCode) ENABLED START ***/
	@Deprecated
	public JNIISLBasicMap(JNIISLContext ctx, String str) {
		this(ISLNative.isl_basic_map_read_from_str(getNativePtr(ctx), str));
	}
	
	@Deprecated
	public static JNIISLBasicMap fromMultiAff(JNIISLMultiAff maf) {
		return maf.toBasicMap();
	}

	@Deprecated
	public static JNIISLBasicMap universe(JNIISLSpace space) {
		return buildUniverse(space);
	}

	@Deprecated
	/**
	 * This is actually a keep method. basicmap is not consumed.
	 * 
	 * @param c1
	 * @param c2
	 * @param c3
	 * @param c4
	 * @param c5
	 * @return
	 */
	public JNIISLMatrix toEqualityMatrix(JNIISLDimType c1, JNIISLDimType c2, JNIISLDimType c3, JNIISLDimType c4, JNIISLDimType c5) {
		return getEqualityMatrix(c1, c2, c3, c4, c5);
	}
	
	@Deprecated
	/**
	 * This is actually a keep method. basicmap is not consumed.
	 * 
	 * @param c1
	 * @param c2
	 * @param c3
	 * @param c4
	 * @param c5
	 * @return
	 */
	public JNIISLMatrix toInequalityMatrix(JNIISLDimType c1, JNIISLDimType c2, JNIISLDimType c3, JNIISLDimType c4, JNIISLDimType c5) {
		return getInequalityMatrix(c1, c2, c3, c4, c5);
	}

	public JNIISLBasicSet getDomain() {
		return copy().domain();
	}
	
	public JNIISLBasicSet getRange() {
		return copy().range();
	}
	
	public JNIISLBasicMap getDomainMap() {
		return copy().domainMap();
	}
	
	public JNIISLBasicMap getRangeMap() {
		return copy().rangeMap();
	}
	
//	public JNIISLBasicMap universeLike() {
//		return getUniverseLike();
//	}
	
	private Iterable<String> getDimensionNames(JNIISLDimType dim) {
		List<String> res = new ArrayList<String>();
		for (int i=0;i<this.getNbDims(dim);i++) {
			res.add(this.getDimName(dim, i));
		}
		return res;
	}

	public String getInputDimName(int i) {
		return this.getDimName(JNIISLDimType.isl_dim_in, i);
	}

	public String getOutputDimName(int i) {
		return this.getDimName(JNIISLDimType.isl_dim_out, i);
	}

	public String getParameterName(int i) {
		return this.getDimName(JNIISLDimType.isl_dim_param, i);
	}
	
	public Iterable<String> getInputDimensionNames() {
		return getDimensionNames(JNIISLDimType.isl_dim_in);
	}

	public Iterable<String> getOutputDimensionNames() {
		return getDimensionNames(JNIISLDimType.isl_dim_out);
	}

	public Iterable<String> getParamDimensionNames() {
		return getDimensionNames(JNIISLDimType.isl_dim_param);
	}

	/***
	 * Converts ISLMap to ISLSet with equivalent constraints, but without the distinction of inputs/outputs.
	 * 
	 * @return
	 */
	public JNIISLBasicSet toBasicSet() {
		return this.moveDims(JNIISLDimType.isl_dim_in, this.getNbIns(), JNIISLDimType.isl_dim_out, 0, this.getNbOuts()).getDomain();
	}
	
	/**
	 * Builds a shift relation.
	 * 
	 * @param setSpace space of the set on which the relation will be applied (in and out are equivalent)
	 * @param dim dimension that will be shifted
	 * @param size number of iterations to shift
	 * @return
	 */
	public static JNIISLBasicMap shift(JNIISLSpace setSpace, int dim, int size) {
		JNIISLBasicMap shift = JNIISLBasicMap.buildUniverse(JNIISLSpace
				.idMapDimFromSetDim(setSpace.copy()));
		long n = setSpace.getNbDims(JNIISLDimType.isl_dim_set);
		for (int i = 0; i < n; i++) {
			JNIISLConstraint c = JNIISLConstraint.buildEquality(shift.getSpace().copy().toLocalSpace());
			c = c.setCoefficient(JNIISLDimType.isl_dim_in, i, 1);
			c = c.setCoefficient(JNIISLDimType.isl_dim_out, i, -1);
			if (i == dim)
				c = c.setConstant(size);
			shift = shift.addConstraint(c);
		}
		return shift;
	}

	public List<JNIISLConstraint> getConstraints() {
		List<JNIISLConstraint> res = new ArrayList<JNIISLConstraint>();
		for (int i = 0; i < getNumberOfConstraints(); i++) {
			res.add(this.getConstraintAt(i));
		}
		return res;
	}

	public List<String> getParametersNames() {
		int nbParams = (int) getSpace().getNbDims(JNIISLDimType.isl_dim_param);//for(StringBuffer dim : map.get)
		List<String> params = new ArrayList<String>();
		for (int i = 0; i < nbParams; i++) {
			String name = getSpace().getName(JNIISLDimType.isl_dim_param, i);
			params.add(name);
		}
		return params;
	}

	public List<String> getDomainNames() {
		int nbIndices = (int) getSpace().getNbDims(JNIISLDimType.isl_dim_in);//for(StringBuffer dim : map.get)
		List<String> indices = new ArrayList<String>();
		for (int i = 0; i < nbIndices; i++) {
			String name = getSpace().getName(JNIISLDimType.isl_dim_in, i);
			indices.add(name);
		}
		return indices;
	}

	public List<String> getRangeNames() {
		int nbIndices = (int) getSpace().getNbDims(JNIISLDimType.isl_dim_out);//for(StringBuffer dim : map.get)
		List<String> indices = new ArrayList<String>();
		for (int i = 0; i < nbIndices; i++) {
			String name = getSpace().getName(JNIISLDimType.isl_dim_out, i);
			indices.add(name);
		}
		return indices;
	}

	public int getNbParams() {
		return getNbDims(JNIISLDimType.isl_dim_param);
	}
	
	public int getNbIns() {
		return getNbDims(JNIISLDimType.isl_dim_in);
	}

	public int getNbOuts() {
		return getNbDims(JNIISLDimType.isl_dim_out);
	}
	
	public String getInputTupleName() {
		return getTupleName(JNIISLDimType.isl_dim_in);
	}

	public String getOutputTupleName() {
		return getTupleName(JNIISLDimType.isl_dim_out);
	}

	public JNIISLBasicMap setInputTupleName(String s) {
		return setTupleName(JNIISLDimType.isl_dim_in, s);
	}

	public JNIISLBasicMap setOutputTupleName(String s) {
		return setTupleName(JNIISLDimType.isl_dim_out, s);
	}

	/**
	 * This method computes the closed form expressions of a relation. For
	 * example, given "{[i] -> [j] : 0 <= i < 8 && i = j + 8}", the result is a
	 * map with single entry containing the expression of "j" given "i" : "i-8",
	 * and its validity domain : "{[i] : 0 <= i < 8}". <br/>
	 * IMPORTANT : this methods compute the expressions using the lexmin
	 * algorithm. If the lexmax is expected, first apply the lexmax on the
	 * relation, and then call this method.
	 * 
	 * @return Map containing the closed form expressions of the relation, and
	 *         their associated validity domains.
	 */
	public Map<JNIISLSet, JNIISLMultiAff> getClosedFormRelation() {
		if (!isSingleValued())
			throw new RuntimeException(this + " is not single valued.");
		
		JNIISLPWMultiAff pwma = copy().lexMinAsPWMultiAff();
		
		Map<JNIISLMultiAff, JNIISLSet> tmp = new HashMap<JNIISLMultiAff, JNIISLSet>();
		main : for (JNIISLPWMultiAffPiece piece : pwma.getPieces()) {
			JNIISLSet validityDomain = piece.getSet();
			JNIISLMultiAff value = piece.getMaff();
			for (JNIISLMultiAff t : tmp.keySet())
			if (t.isPlainEqual(value)) {
				tmp.put(t, tmp.get(t).union(validityDomain));
				continue main;
			}
			tmp.put(value, validityDomain.coalesce());
		}

//		int n = getNbClosedFormRelations();
//		Map<JNIISLMultiAff, JNIISLSet> tmp = new HashMap<JNIISLMultiAff, JNIISLSet>();
//		main : for (int i = 0; i < n; i++) {
//			JNIISLClosedFormRelation cLosedFormRelationAt = this
//					.getClosedFormRelationAt(i);
//			JNIISLSet validityDomain = cLosedFormRelationAt.getDom();
//			JNIISLMultiAff value = cLosedFormRelationAt.getMultiAff();
//			for (JNIISLMultiAff t : tmp.keySet())
//				if (t.equivalent(value)) {
//					tmp.put(t, tmp.get(t).union(validityDomain));
//					continue main;
//				}
//			tmp.put(value, validityDomain.coalesce());
//		}
		
		Map<JNIISLSet, JNIISLMultiAff> res = new HashMap<JNIISLSet, JNIISLMultiAff>();
		for (Entry<JNIISLMultiAff, JNIISLSet> e : tmp.entrySet()) {
			res.put(e.getValue(), e.getKey());
		}
		return res;
	}
	/*** PROTECTED REGION END ***/


	
	/*************************************** 
	 *	         Static Methods            * 
	 ***************************************/
	/**
	 * isl_basic_map_read_from_str 
	 * 
	 * @generated
	**/
	 public static JNIISLBasicMap buildFromString(JNIISLContext ctx, String str) { 
		/*** PROTECTED REGION ID(static_isl_basic_map_read_from_str) DISABLED START ***/
		JNIISLBasicMap res;
		
		synchronized(LOCK) {
			checkParameters();
			try {
				res = JNIISLBasicMap.build(ISLNative.isl_basic_map_read_from_str(getNativePtr(ctx), str));
			} finally {
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_basic_map_empty 
	 * 
	@take space
	 * @generated
	**/
	 public static JNIISLBasicMap buildEmpty(JNIISLSpace space) { 
		/*** PROTECTED REGION ID(static_isl_basic_map_empty) DISABLED START ***/
		JNIISLBasicMap res;
		
		synchronized(LOCK) {
			checkParameters(space);
			try {
				res = JNIISLBasicMap.build(ISLNative.isl_basic_map_empty(getNativePtr(space)));
			} finally {
				taken(space);
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_basic_map_universe 
	 * 
	@take space
	 * @generated
	**/
	 public static JNIISLBasicMap buildUniverse(JNIISLSpace space) { 
		/*** PROTECTED REGION ID(static_isl_basic_map_universe) DISABLED START ***/
		JNIISLBasicMap res;
		
		synchronized(LOCK) {
			checkParameters(space);
			try {
				res = JNIISLBasicMap.build(ISLNative.isl_basic_map_universe(getNativePtr(space)));
			} finally {
				taken(space);
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_basic_map_nat_universe 
	 * 
	@take space
	 * @generated
	**/
	 public static JNIISLBasicMap buildNonNegUniverse(JNIISLSpace space) { 
		/*** PROTECTED REGION ID(static_isl_basic_map_nat_universe) DISABLED START ***/
		JNIISLBasicMap res;
		
		synchronized(LOCK) {
			checkParameters(space);
			try {
				res = JNIISLBasicMap.build(ISLNative.isl_basic_map_nat_universe(getNativePtr(space)));
			} finally {
				taken(space);
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_basic_map_identity 
	 * 
	@take space
	 * @generated
	**/
	 public static JNIISLBasicMap buildIdentity(JNIISLSpace space) { 
		/*** PROTECTED REGION ID(static_isl_basic_map_identity) DISABLED START ***/
		JNIISLBasicMap res;
		
		synchronized(LOCK) {
			checkParameters(space);
			try {
				res = JNIISLBasicMap.build(ISLNative.isl_basic_map_identity(getNativePtr(space)));
			} finally {
				taken(space);
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_basic_map_from_constraint_matrices 
	 * 
	@take space eq ineq
	 * @generated
	**/
	 public static JNIISLBasicMap fromConstraintMatrices(JNIISLSpace space, JNIISLMatrix eq, JNIISLMatrix ineq, JNIISLDimType c1, JNIISLDimType c2, JNIISLDimType c3, JNIISLDimType c4, JNIISLDimType c5) { 
		/*** PROTECTED REGION ID(static_isl_basic_map_from_constraint_matrices) DISABLED START ***/
		JNIISLBasicMap res;
		
		synchronized(LOCK) {
			checkParameters(space, eq, ineq);
			try {
				res = JNIISLBasicMap.build(ISLNative.isl_basic_map_from_constraint_matrices(getNativePtr(space), getNativePtr(eq), getNativePtr(ineq), c1.getValue(), c2.getValue(), c3.getValue(), c4.getValue(), c5.getValue()));
			} finally {
				taken(space);
				taken(eq);
				taken(ineq);
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_basic_map_to_string 
	 * 
	 * @generated
	**/
	 public static String _toString(JNIISLBasicMap bmap, int format) { 
		/*** PROTECTED REGION ID(static_isl_basic_map_to_string) DISABLED START ***/
		String res;
		
		synchronized(LOCK) {
			checkParameters();
			try {
				res = ISLNative.isl_basic_map_to_string(getNativePtr(bmap), format);
			} finally {
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	
	/*************************************** 
	 *	         Member Methods            * 
	 ***************************************/
	/**
	 * isl_map_from_basic_map 
	 * 
	 * @take this
	 * @generated
	**/
	public JNIISLMap toMap() {
		/*** PROTECTED REGION ID(isl_map_from_basic_map) DISABLED START ***/
		JNIISLMap res;
		
		synchronized(LOCK) {
			checkParameters(this);
			try {
				res = JNIISLMap.build(ISLNative.isl_map_from_basic_map(getNativePtr(this)));
			} finally {
				taken(this);
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_union_map_from_basic_map 
	 * 
	 * @take this
	 * @generated
	**/
	public JNIISLUnionMap toUnionMap() {
		/*** PROTECTED REGION ID(isl_union_map_from_basic_map) DISABLED START ***/
		JNIISLUnionMap res;
		
		synchronized(LOCK) {
			checkParameters(this);
			try {
				res = JNIISLUnionMap.build(ISLNative.isl_union_map_from_basic_map(getNativePtr(this)));
			} finally {
				taken(this);
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_basic_map_get_ctx 
	 * 
	 * @generated
	**/
	public JNIISLContext getContext() {
		/*** PROTECTED REGION ID(isl_basic_map_get_ctx) DISABLED START ***/
		JNIISLContext res;
		
		synchronized(LOCK) {
			checkParameters();
			try {
				res = JNIISLContext.build(ISLNative.isl_basic_map_get_ctx(getNativePtr(this)));
			} finally {
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_basic_map_get_space 
	 * 
	 * @generated
	**/
	public JNIISLSpace getSpace() {
		/*** PROTECTED REGION ID(isl_basic_map_get_space) DISABLED START ***/
		JNIISLSpace res;
		
		synchronized(LOCK) {
			checkParameters();
			try {
				res = JNIISLSpace.build(ISLNative.isl_basic_map_get_space(getNativePtr(this)));
			} finally {
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_basic_map_copy 
	 * 
	 * @generated
	**/
	public JNIISLBasicMap copy() {
		/*** PROTECTED REGION ID(isl_basic_map_copy) DISABLED START ***/
		JNIISLBasicMap res;
		
		synchronized(LOCK) {
			checkParameters();
			try {
				res = JNIISLBasicMap.build(ISLNative.isl_basic_map_copy(getNativePtr(this)));
			} finally {
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_basic_map_free 
	 * 
	 * @take this
	 * @generated
	**/
	public void free() {
		/*** PROTECTED REGION ID(isl_basic_map_free) DISABLED START ***/
		
		synchronized(LOCK) {
			checkParameters(this);
			try {
				ISLNative.isl_basic_map_free(getNativePtr(this));
			} finally {
				taken(this);
			}
		}
		
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_basic_map_add_constraint 
	 * 
	 * @take this constraint
	 * @generated
	**/
	public JNIISLBasicMap addConstraint(JNIISLConstraint constraint) {
		/*** PROTECTED REGION ID(isl_basic_map_add_constraint) DISABLED START ***/
		JNIISLBasicMap res;
		
		synchronized(LOCK) {
			checkParameters(this, constraint);
			try {
				res = JNIISLBasicMap.build(ISLNative.isl_basic_map_add_constraint(getNativePtr(this), getNativePtr(constraint)));
			} finally {
				taken(this);
				taken(constraint);
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_basic_map_dim 
	 * 
	 * @generated
	**/
	public int getNbDims(JNIISLDimType type) {
		/*** PROTECTED REGION ID(isl_basic_map_dim) DISABLED START ***/
		int res;
		
		synchronized(LOCK) {
			checkParameters();
			try {
				res = ISLNative.isl_basic_map_dim(getNativePtr(this), type.getValue());
			} finally {
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_basic_map_get_tuple_name 
	 * 
	 * @generated
	**/
	public String getTupleName(JNIISLDimType type) {
		/*** PROTECTED REGION ID(isl_basic_map_get_tuple_name) DISABLED START ***/
		String res;
		
		synchronized(LOCK) {
			checkParameters();
			try {
				res = ISLNative.isl_basic_map_get_tuple_name(getNativePtr(this), type.getValue());
			} finally {
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_basic_map_set_tuple_name 
	 * 
	 * @take this
	 * @generated
	**/
	public JNIISLBasicMap setTupleName(JNIISLDimType type, String s) {
		/*** PROTECTED REGION ID(isl_basic_map_set_tuple_name) DISABLED START ***/
		JNIISLBasicMap res;
		
		synchronized(LOCK) {
			checkParameters(this);
			try {
				res = JNIISLBasicMap.build(ISLNative.isl_basic_map_set_tuple_name(getNativePtr(this), type.getValue(), s));
			} finally {
				taken(this);
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_basic_map_get_dim_name 
	 * 
	 * @generated
	**/
	public String getDimName(JNIISLDimType type, int pos) {
		/*** PROTECTED REGION ID(isl_basic_map_get_dim_name) DISABLED START ***/
		String res;
		
		synchronized(LOCK) {
			checkParameters();
			try {
				res = ISLNative.isl_basic_map_get_dim_name(getNativePtr(this), type.getValue(), pos);
			} finally {
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_basic_map_set_dim_name 
	 * 
	 * @take this
	 * @generated
	**/
	public JNIISLBasicMap setDimName(JNIISLDimType type, int pos, String s) {
		/*** PROTECTED REGION ID(isl_basic_map_set_dim_name) DISABLED START ***/
		JNIISLBasicMap res;
		
		synchronized(LOCK) {
			checkParameters(this);
			try {
				res = JNIISLBasicMap.build(ISLNative.isl_basic_map_set_dim_name(getNativePtr(this), type.getValue(), pos, s));
			} finally {
				taken(this);
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_basic_map_involves_dims 
	 * 
	 * @generated
	**/
	public boolean involvesDims(JNIISLDimType type, int first, int n) {
		/*** PROTECTED REGION ID(isl_basic_map_involves_dims) DISABLED START ***/
		boolean res;
		
		synchronized(LOCK) {
			checkParameters();
			try {
				res = ISLNative.isl_basic_map_involves_dims(getNativePtr(this), type.getValue(), first, n) != 0;
			} finally {
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_basic_map_has_dim_id 
	 * 
	 * @generated
	**/
	public boolean hasDimID(JNIISLDimType type, int pos) {
		/*** PROTECTED REGION ID(isl_basic_map_has_dim_id) DISABLED START ***/
		boolean res;
		
		synchronized(LOCK) {
			checkParameters();
			try {
				res = ISLNative.isl_basic_map_has_dim_id(getNativePtr(this), type.getValue(), pos) != 0;
			} finally {
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_basic_map_remove_divs 
	 * 
	 * @take this
	 * @generated
	**/
	public JNIISLBasicMap removeDivs() {
		/*** PROTECTED REGION ID(isl_basic_map_remove_divs) DISABLED START ***/
		JNIISLBasicMap res;
		
		synchronized(LOCK) {
			checkParameters(this);
			try {
				res = JNIISLBasicMap.build(ISLNative.isl_basic_map_remove_divs(getNativePtr(this)));
			} finally {
				taken(this);
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_basic_map_remove_divs_involving_dims 
	 * 
	 * @take this
	 * @generated
	**/
	public JNIISLBasicMap removeDivsInvolvingDims(JNIISLDimType type, int first, int n) {
		/*** PROTECTED REGION ID(isl_basic_map_remove_divs_involving_dims) DISABLED START ***/
		JNIISLBasicMap res;
		
		synchronized(LOCK) {
			checkParameters(this);
			try {
				res = JNIISLBasicMap.build(ISLNative.isl_basic_map_remove_divs_involving_dims(getNativePtr(this), type.getValue(), first, n));
			} finally {
				taken(this);
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_basic_map_equalities_matrix 
	 * 
	 * @generated
	**/
	public JNIISLMatrix getEqualityMatrix(JNIISLDimType c1, JNIISLDimType c2, JNIISLDimType c3, JNIISLDimType c4, JNIISLDimType c5) {
		/*** PROTECTED REGION ID(isl_basic_map_equalities_matrix) DISABLED START ***/
		JNIISLMatrix res;
		
		synchronized(LOCK) {
			checkParameters();
			try {
				res = JNIISLMatrix.build(ISLNative.isl_basic_map_equalities_matrix(getNativePtr(this), c1.getValue(), c2.getValue(), c3.getValue(), c4.getValue(), c5.getValue()));
			} finally {
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_basic_map_inequalities_matrix 
	 * 
	 * @generated
	**/
	public JNIISLMatrix getInequalityMatrix(JNIISLDimType c1, JNIISLDimType c2, JNIISLDimType c3, JNIISLDimType c4, JNIISLDimType c5) {
		/*** PROTECTED REGION ID(isl_basic_map_inequalities_matrix) DISABLED START ***/
		JNIISLMatrix res;
		
		synchronized(LOCK) {
			checkParameters();
			try {
				res = JNIISLMatrix.build(ISLNative.isl_basic_map_inequalities_matrix(getNativePtr(this), c1.getValue(), c2.getValue(), c3.getValue(), c4.getValue(), c5.getValue()));
			} finally {
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_basic_map_plain_is_empty 
	 * 
	 * @generated
	**/
	public boolean plainIsEmpty() {
		/*** PROTECTED REGION ID(isl_basic_map_plain_is_empty) DISABLED START ***/
		boolean res;
		
		synchronized(LOCK) {
			checkParameters();
			try {
				res = ISLNative.isl_basic_map_plain_is_empty(getNativePtr(this)) != 0;
			} finally {
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_basic_map_is_empty 
	 * 
	 * @generated
	**/
	public boolean isEmpty() {
		/*** PROTECTED REGION ID(isl_basic_map_is_empty) DISABLED START ***/
		boolean res;
		
		synchronized(LOCK) {
			checkParameters();
			try {
				res = ISLNative.isl_basic_map_is_empty(getNativePtr(this)) != 0;
			} finally {
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_basic_map_is_universe 
	 * 
	 * @generated
	**/
	public boolean isUniverse() {
		/*** PROTECTED REGION ID(isl_basic_map_is_universe) DISABLED START ***/
		boolean res;
		
		synchronized(LOCK) {
			checkParameters();
			try {
				res = ISLNative.isl_basic_map_is_universe(getNativePtr(this)) != 0;
			} finally {
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_basic_map_is_single_valued 
	 * 
	 * @generated
	**/
	public boolean isSingleValued() {
		/*** PROTECTED REGION ID(isl_basic_map_is_single_valued) DISABLED START ***/
		boolean res;
		
		synchronized(LOCK) {
			checkParameters();
			try {
				res = ISLNative.isl_basic_map_is_single_valued(getNativePtr(this)) != 0;
			} finally {
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_basic_map_can_curry 
	 * 
	 * @generated
	**/
	public boolean canCurry() {
		/*** PROTECTED REGION ID(isl_basic_map_can_curry) DISABLED START ***/
		boolean res;
		
		synchronized(LOCK) {
			checkParameters();
			try {
				res = ISLNative.isl_basic_map_can_curry(getNativePtr(this)) != 0;
			} finally {
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_basic_map_can_uncurry 
	 * 
	 * @generated
	**/
	public boolean canUncurry() {
		/*** PROTECTED REGION ID(isl_basic_map_can_uncurry) DISABLED START ***/
		boolean res;
		
		synchronized(LOCK) {
			checkParameters();
			try {
				res = ISLNative.isl_basic_map_can_uncurry(getNativePtr(this)) != 0;
			} finally {
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_basic_map_can_zip 
	 * 
	 * @generated
	**/
	public boolean canZip() {
		/*** PROTECTED REGION ID(isl_basic_map_can_zip) DISABLED START ***/
		boolean res;
		
		synchronized(LOCK) {
			checkParameters();
			try {
				res = ISLNative.isl_basic_map_can_zip(getNativePtr(this)) != 0;
			} finally {
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_basic_map_is_equal 
	 * 
	 * @generated
	**/
	public boolean isEqual(JNIISLBasicMap bmap2) {
		/*** PROTECTED REGION ID(isl_basic_map_is_equal) DISABLED START ***/
		boolean res;
		
		synchronized(LOCK) {
			checkParameters();
			try {
				res = ISLNative.isl_basic_map_is_equal(getNativePtr(this), getNativePtr(bmap2)) != 0;
			} finally {
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_basic_map_is_disjoint 
	 * 
	 * @generated
	**/
	public boolean isDisjoint(JNIISLBasicMap bmap2) {
		/*** PROTECTED REGION ID(isl_basic_map_is_disjoint) DISABLED START ***/
		boolean res;
		
		synchronized(LOCK) {
			checkParameters();
			try {
				res = ISLNative.isl_basic_map_is_disjoint(getNativePtr(this), getNativePtr(bmap2)) != 0;
			} finally {
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_basic_map_is_subset 
	 * 
	 * @generated
	**/
	public boolean isSubset(JNIISLBasicMap bmap2) {
		/*** PROTECTED REGION ID(isl_basic_map_is_subset) DISABLED START ***/
		boolean res;
		
		synchronized(LOCK) {
			checkParameters();
			try {
				res = ISLNative.isl_basic_map_is_subset(getNativePtr(this), getNativePtr(bmap2)) != 0;
			} finally {
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_basic_map_is_strict_subset 
	 * 
	 * @generated
	**/
	public boolean isStrictSubset(JNIISLBasicMap bmap2) {
		/*** PROTECTED REGION ID(isl_basic_map_is_strict_subset) DISABLED START ***/
		boolean res;
		
		synchronized(LOCK) {
			checkParameters();
			try {
				res = ISLNative.isl_basic_map_is_strict_subset(getNativePtr(this), getNativePtr(bmap2)) != 0;
			} finally {
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_basic_map_reverse 
	 * 
	 * @take this
	 * @generated
	**/
	public JNIISLBasicMap reverse() {
		/*** PROTECTED REGION ID(isl_basic_map_reverse) DISABLED START ***/
		JNIISLBasicMap res;
		
		synchronized(LOCK) {
			checkParameters(this);
			try {
				res = JNIISLBasicMap.build(ISLNative.isl_basic_map_reverse(getNativePtr(this)));
			} finally {
				taken(this);
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_basic_map_project_out 
	 * 
	 * @take this
	 * @generated
	**/
	public JNIISLBasicMap projectOut(JNIISLDimType type, int first, int n) {
		/*** PROTECTED REGION ID(isl_basic_map_project_out) DISABLED START ***/
		JNIISLBasicMap res;
		
		synchronized(LOCK) {
			checkParameters(this);
			try {
				res = JNIISLBasicMap.build(ISLNative.isl_basic_map_project_out(getNativePtr(this), type.getValue(), first, n));
			} finally {
				taken(this);
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_basic_map_domain 
	 * 
	 * @take this
	 * @generated
	**/
	public JNIISLBasicSet domain() {
		/*** PROTECTED REGION ID(isl_basic_map_domain) DISABLED START ***/
		JNIISLBasicSet res;
		
		synchronized(LOCK) {
			checkParameters(this);
			try {
				res = JNIISLBasicSet.build(ISLNative.isl_basic_map_domain(getNativePtr(this)));
			} finally {
				taken(this);
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_basic_map_range 
	 * 
	 * @take this
	 * @generated
	**/
	public JNIISLBasicSet range() {
		/*** PROTECTED REGION ID(isl_basic_map_range) DISABLED START ***/
		JNIISLBasicSet res;
		
		synchronized(LOCK) {
			checkParameters(this);
			try {
				res = JNIISLBasicSet.build(ISLNative.isl_basic_map_range(getNativePtr(this)));
			} finally {
				taken(this);
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_basic_map_domain_map 
	 * 
	 * @take this
	 * @generated
	**/
	public JNIISLBasicMap domainMap() {
		/*** PROTECTED REGION ID(isl_basic_map_domain_map) DISABLED START ***/
		JNIISLBasicMap res;
		
		synchronized(LOCK) {
			checkParameters(this);
			try {
				res = JNIISLBasicMap.build(ISLNative.isl_basic_map_domain_map(getNativePtr(this)));
			} finally {
				taken(this);
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_basic_map_range_map 
	 * 
	 * @take this
	 * @generated
	**/
	public JNIISLBasicMap rangeMap() {
		/*** PROTECTED REGION ID(isl_basic_map_range_map) DISABLED START ***/
		JNIISLBasicMap res;
		
		synchronized(LOCK) {
			checkParameters(this);
			try {
				res = JNIISLBasicMap.build(ISLNative.isl_basic_map_range_map(getNativePtr(this)));
			} finally {
				taken(this);
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_basic_map_eliminate 
	 * 
	 * @take this
	 * @generated
	**/
	public JNIISLBasicMap eliminate(JNIISLDimType type, int first, int n) {
		/*** PROTECTED REGION ID(isl_basic_map_eliminate) DISABLED START ***/
		JNIISLBasicMap res;
		
		synchronized(LOCK) {
			checkParameters(this);
			try {
				res = JNIISLBasicMap.build(ISLNative.isl_basic_map_eliminate(getNativePtr(this), type.getValue(), first, n));
			} finally {
				taken(this);
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_basic_map_fix_si 
	 * 
	 * @take this
	 * @generated
	**/
	public JNIISLBasicMap sliceFixed(JNIISLDimType type, int pos, int value) {
		/*** PROTECTED REGION ID(isl_basic_map_fix_si) DISABLED START ***/
		JNIISLBasicMap res;
		
		synchronized(LOCK) {
			checkParameters(this);
			try {
				res = JNIISLBasicMap.build(ISLNative.isl_basic_map_fix_si(getNativePtr(this), type.getValue(), pos, value));
			} finally {
				taken(this);
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_basic_map_fix_val 
	 * 
	 * @take this v
	 * @generated
	**/
	public JNIISLBasicMap sliceFixed(JNIISLDimType type, int pos, JNIISLVal v) {
		/*** PROTECTED REGION ID(isl_basic_map_fix_val) DISABLED START ***/
		JNIISLBasicMap res;
		
		synchronized(LOCK) {
			checkParameters(this, v);
			try {
				res = JNIISLBasicMap.build(ISLNative.isl_basic_map_fix_val(getNativePtr(this), type.getValue(), pos, getNativePtr(v)));
			} finally {
				taken(this);
				taken(v);
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_basic_map_lower_bound_si 
	 * 
	 * @take this
	 * @generated
	**/
	public JNIISLBasicMap sliceLB(JNIISLDimType type, int pos, int value) {
		/*** PROTECTED REGION ID(isl_basic_map_lower_bound_si) DISABLED START ***/
		JNIISLBasicMap res;
		
		synchronized(LOCK) {
			checkParameters(this);
			try {
				res = JNIISLBasicMap.build(ISLNative.isl_basic_map_lower_bound_si(getNativePtr(this), type.getValue(), pos, value));
			} finally {
				taken(this);
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_basic_map_upper_bound_si 
	 * 
	 * @take this
	 * @generated
	**/
	public JNIISLBasicMap sliceUB(JNIISLDimType type, int pos, int value) {
		/*** PROTECTED REGION ID(isl_basic_map_upper_bound_si) DISABLED START ***/
		JNIISLBasicMap res;
		
		synchronized(LOCK) {
			checkParameters(this);
			try {
				res = JNIISLBasicMap.build(ISLNative.isl_basic_map_upper_bound_si(getNativePtr(this), type.getValue(), pos, value));
			} finally {
				taken(this);
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_basic_map_equate 
	 * 
	 * @take this
	 * @generated
	**/
	public JNIISLBasicMap sliceEquate(JNIISLDimType type1, int pos1, JNIISLDimType type2, int pos2) {
		/*** PROTECTED REGION ID(isl_basic_map_equate) DISABLED START ***/
		JNIISLBasicMap res;
		
		synchronized(LOCK) {
			checkParameters(this);
			try {
				res = JNIISLBasicMap.build(ISLNative.isl_basic_map_equate(getNativePtr(this), type1.getValue(), pos1, type2.getValue(), pos2));
			} finally {
				taken(this);
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_basic_map_order_ge 
	 * 
	 * @take this
	 * @generated
	**/
	public JNIISLBasicMap sliceGE(JNIISLDimType type1, int pos1, JNIISLDimType type2, int pos2) {
		/*** PROTECTED REGION ID(isl_basic_map_order_ge) DISABLED START ***/
		JNIISLBasicMap res;
		
		synchronized(LOCK) {
			checkParameters(this);
			try {
				res = JNIISLBasicMap.build(ISLNative.isl_basic_map_order_ge(getNativePtr(this), type1.getValue(), pos1, type2.getValue(), pos2));
			} finally {
				taken(this);
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_basic_map_order_gt 
	 * 
	 * @take this
	 * @generated
	**/
	public JNIISLBasicMap sliceGT(JNIISLDimType type1, int pos1, JNIISLDimType type2, int pos2) {
		/*** PROTECTED REGION ID(isl_basic_map_order_gt) DISABLED START ***/
		JNIISLBasicMap res;
		
		synchronized(LOCK) {
			checkParameters(this);
			try {
				res = JNIISLBasicMap.build(ISLNative.isl_basic_map_order_gt(getNativePtr(this), type1.getValue(), pos1, type2.getValue(), pos2));
			} finally {
				taken(this);
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_basic_map_deltas 
	 * 
	 * @take this
	 * @generated
	**/
	public JNIISLBasicSet deltas() {
		/*** PROTECTED REGION ID(isl_basic_map_deltas) DISABLED START ***/
		JNIISLBasicSet res;
		
		synchronized(LOCK) {
			checkParameters(this);
			try {
				res = JNIISLBasicSet.build(ISLNative.isl_basic_map_deltas(getNativePtr(this)));
			} finally {
				taken(this);
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_basic_map_deltas_map 
	 * 
	 * @take this
	 * @generated
	**/
	public JNIISLBasicMap deltasMap() {
		/*** PROTECTED REGION ID(isl_basic_map_deltas_map) DISABLED START ***/
		JNIISLBasicMap res;
		
		synchronized(LOCK) {
			checkParameters(this);
			try {
				res = JNIISLBasicMap.build(ISLNative.isl_basic_map_deltas_map(getNativePtr(this)));
			} finally {
				taken(this);
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_basic_map_detect_equalities 
	 * 
	 * @take this
	 * @generated
	**/
	public JNIISLBasicMap detectEqualities() {
		/*** PROTECTED REGION ID(isl_basic_map_detect_equalities) DISABLED START ***/
		JNIISLBasicMap res;
		
		synchronized(LOCK) {
			checkParameters(this);
			try {
				res = JNIISLBasicMap.build(ISLNative.isl_basic_map_detect_equalities(getNativePtr(this)));
			} finally {
				taken(this);
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_basic_map_remove_redundancies 
	 * 
	 * @take this
	 * @generated
	**/
	public JNIISLBasicMap removeRedundancies() {
		/*** PROTECTED REGION ID(isl_basic_map_remove_redundancies) DISABLED START ***/
		JNIISLBasicMap res;
		
		synchronized(LOCK) {
			checkParameters(this);
			try {
				res = JNIISLBasicMap.build(ISLNative.isl_basic_map_remove_redundancies(getNativePtr(this)));
			} finally {
				taken(this);
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_basic_map_affine_hull 
	 * 
	 * @take this
	 * @generated
	**/
	public JNIISLBasicMap affineHull() {
		/*** PROTECTED REGION ID(isl_basic_map_affine_hull) DISABLED START ***/
		JNIISLBasicMap res;
		
		synchronized(LOCK) {
			checkParameters(this);
			try {
				res = JNIISLBasicMap.build(ISLNative.isl_basic_map_affine_hull(getNativePtr(this)));
			} finally {
				taken(this);
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_basic_map_drop_constraints_involving_dims 
	 * 
	 * @take this
	 * @generated
	**/
	public JNIISLBasicMap dropConstraintsInvolvingDims(JNIISLDimType type, int first, int n) {
		/*** PROTECTED REGION ID(isl_basic_map_drop_constraints_involving_dims) DISABLED START ***/
		JNIISLBasicMap res;
		
		synchronized(LOCK) {
			checkParameters(this);
			try {
				res = JNIISLBasicMap.build(ISLNative.isl_basic_map_drop_constraints_involving_dims(getNativePtr(this), type.getValue(), first, n));
			} finally {
				taken(this);
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_basic_map_sample 
	 * 
	 * @take this
	 * @generated
	**/
	public JNIISLBasicMap sample() {
		/*** PROTECTED REGION ID(isl_basic_map_sample) DISABLED START ***/
		JNIISLBasicMap res;
		
		synchronized(LOCK) {
			checkParameters(this);
			try {
				res = JNIISLBasicMap.build(ISLNative.isl_basic_map_sample(getNativePtr(this)));
			} finally {
				taken(this);
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_basic_map_wrap 
	 * 
	 * @take this
	 * @generated
	**/
	public JNIISLBasicSet wrap() {
		/*** PROTECTED REGION ID(isl_basic_map_wrap) DISABLED START ***/
		JNIISLBasicSet res;
		
		synchronized(LOCK) {
			checkParameters(this);
			try {
				res = JNIISLBasicSet.build(ISLNative.isl_basic_map_wrap(getNativePtr(this)));
			} finally {
				taken(this);
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_basic_map_flatten 
	 * 
	 * @take this
	 * @generated
	**/
	public JNIISLBasicMap flatten() {
		/*** PROTECTED REGION ID(isl_basic_map_flatten) DISABLED START ***/
		JNIISLBasicMap res;
		
		synchronized(LOCK) {
			checkParameters(this);
			try {
				res = JNIISLBasicMap.build(ISLNative.isl_basic_map_flatten(getNativePtr(this)));
			} finally {
				taken(this);
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_basic_map_flatten_domain 
	 * 
	 * @take this
	 * @generated
	**/
	public JNIISLBasicMap flattenDomain() {
		/*** PROTECTED REGION ID(isl_basic_map_flatten_domain) DISABLED START ***/
		JNIISLBasicMap res;
		
		synchronized(LOCK) {
			checkParameters(this);
			try {
				res = JNIISLBasicMap.build(ISLNative.isl_basic_map_flatten_domain(getNativePtr(this)));
			} finally {
				taken(this);
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_basic_map_flatten_range 
	 * 
	 * @take this
	 * @generated
	**/
	public JNIISLBasicMap flattenRange() {
		/*** PROTECTED REGION ID(isl_basic_map_flatten_range) DISABLED START ***/
		JNIISLBasicMap res;
		
		synchronized(LOCK) {
			checkParameters(this);
			try {
				res = JNIISLBasicMap.build(ISLNative.isl_basic_map_flatten_range(getNativePtr(this)));
			} finally {
				taken(this);
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_basic_map_zip 
	 * 
	 * @take this
	 * @generated
	**/
	public JNIISLBasicMap zip() {
		/*** PROTECTED REGION ID(isl_basic_map_zip) DISABLED START ***/
		JNIISLBasicMap res;
		
		synchronized(LOCK) {
			checkParameters(this);
			try {
				res = JNIISLBasicMap.build(ISLNative.isl_basic_map_zip(getNativePtr(this)));
			} finally {
				taken(this);
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_basic_map_curry 
	 * 
	 * @take this
	 * @generated
	**/
	public JNIISLBasicMap curry() {
		/*** PROTECTED REGION ID(isl_basic_map_curry) DISABLED START ***/
		JNIISLBasicMap res;
		
		synchronized(LOCK) {
			checkParameters(this);
			try {
				res = JNIISLBasicMap.build(ISLNative.isl_basic_map_curry(getNativePtr(this)));
			} finally {
				taken(this);
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_basic_map_uncurry 
	 * 
	 * @take this
	 * @generated
	**/
	public JNIISLBasicMap uncurry() {
		/*** PROTECTED REGION ID(isl_basic_map_uncurry) DISABLED START ***/
		JNIISLBasicMap res;
		
		synchronized(LOCK) {
			checkParameters(this);
			try {
				res = JNIISLBasicMap.build(ISLNative.isl_basic_map_uncurry(getNativePtr(this)));
			} finally {
				taken(this);
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_basic_map_align_params 
	 * 
	 * @take this model
	 * @generated
	**/
	public JNIISLBasicMap alignParams(JNIISLSpace model) {
		/*** PROTECTED REGION ID(isl_basic_map_align_params) DISABLED START ***/
		JNIISLBasicMap res;
		
		synchronized(LOCK) {
			checkParameters(this, model);
			try {
				res = JNIISLBasicMap.build(ISLNative.isl_basic_map_align_params(getNativePtr(this), getNativePtr(model)));
			} finally {
				taken(this);
				taken(model);
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_basic_map_insert_dims 
	 * 
	 * @take this
	 * @generated
	**/
	public JNIISLBasicMap insertDims(JNIISLDimType type, int pos, int n) {
		/*** PROTECTED REGION ID(isl_basic_map_insert_dims) DISABLED START ***/
		JNIISLBasicMap res;
		
		synchronized(LOCK) {
			checkParameters(this);
			try {
				res = JNIISLBasicMap.build(ISLNative.isl_basic_map_insert_dims(getNativePtr(this), type.getValue(), pos, n));
			} finally {
				taken(this);
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_basic_map_move_dims 
	 * 
	 * @take this
	 * @generated
	**/
	public JNIISLBasicMap moveDims(JNIISLDimType dst_type, int dst_pos, JNIISLDimType src_type, int src_pos, int n) {
		/*** PROTECTED REGION ID(isl_basic_map_move_dims) DISABLED START ***/
		JNIISLBasicMap res;
		
		synchronized(LOCK) {
			checkParameters(this);
			try {
				res = JNIISLBasicMap.build(ISLNative.isl_basic_map_move_dims(getNativePtr(this), dst_type.getValue(), dst_pos, src_type.getValue(), src_pos, n));
			} finally {
				taken(this);
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_basic_map_intersect_domain 
	 * 
	 * @take this bset
	 * @generated
	**/
	public JNIISLBasicMap intersectDomain(JNIISLBasicSet bset) {
		/*** PROTECTED REGION ID(isl_basic_map_intersect_domain) DISABLED START ***/
		JNIISLBasicMap res;
		
		synchronized(LOCK) {
			checkParameters(this, bset);
			try {
				res = JNIISLBasicMap.build(ISLNative.isl_basic_map_intersect_domain(getNativePtr(this), getNativePtr(bset)));
			} finally {
				taken(this);
				taken(bset);
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_basic_map_intersect_range 
	 * 
	 * @take this bset
	 * @generated
	**/
	public JNIISLBasicMap intersectRange(JNIISLBasicSet bset) {
		/*** PROTECTED REGION ID(isl_basic_map_intersect_range) DISABLED START ***/
		JNIISLBasicMap res;
		
		synchronized(LOCK) {
			checkParameters(this, bset);
			try {
				res = JNIISLBasicMap.build(ISLNative.isl_basic_map_intersect_range(getNativePtr(this), getNativePtr(bset)));
			} finally {
				taken(this);
				taken(bset);
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_basic_map_intersect 
	 * 
	 * @take this bmap2
	 * @generated
	**/
	public JNIISLBasicMap intersect(JNIISLBasicMap bmap2) {
		/*** PROTECTED REGION ID(isl_basic_map_intersect) DISABLED START ***/
		JNIISLBasicMap res;
		
		synchronized(LOCK) {
			checkParameters(this, bmap2);
			try {
				res = JNIISLBasicMap.build(ISLNative.isl_basic_map_intersect(getNativePtr(this), getNativePtr(bmap2)));
			} finally {
				taken(this);
				taken(bmap2);
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_basic_map_union 
	 * 
	 * @take this bmap2
	 * @generated
	**/
	public JNIISLMap union(JNIISLBasicMap bmap2) {
		/*** PROTECTED REGION ID(isl_basic_map_union) DISABLED START ***/
		JNIISLMap res;
		
		synchronized(LOCK) {
			checkParameters(this, bmap2);
			try {
				res = JNIISLMap.build(ISLNative.isl_basic_map_union(getNativePtr(this), getNativePtr(bmap2)));
			} finally {
				taken(this);
				taken(bmap2);
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_basic_map_apply_domain 
	 * 
	 * @take this bmap2
	 * @generated
	**/
	public JNIISLBasicMap applyDomain(JNIISLBasicMap bmap2) {
		/*** PROTECTED REGION ID(isl_basic_map_apply_domain) DISABLED START ***/
		JNIISLBasicMap res;
		
		synchronized(LOCK) {
			checkParameters(this, bmap2);
			try {
				res = JNIISLBasicMap.build(ISLNative.isl_basic_map_apply_domain(getNativePtr(this), getNativePtr(bmap2)));
			} finally {
				taken(this);
				taken(bmap2);
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_basic_map_apply_range 
	 * 
	 * @take this bmap2
	 * @generated
	**/
	public JNIISLBasicMap applyRange(JNIISLBasicMap bmap2) {
		/*** PROTECTED REGION ID(isl_basic_map_apply_range) DISABLED START ***/
		JNIISLBasicMap res;
		
		synchronized(LOCK) {
			checkParameters(this, bmap2);
			try {
				res = JNIISLBasicMap.build(ISLNative.isl_basic_map_apply_range(getNativePtr(this), getNativePtr(bmap2)));
			} finally {
				taken(this);
				taken(bmap2);
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_basic_map_preimage_domain_multi_aff 
	 * 
	 * @take this ma
	 * @generated
	**/
	public JNIISLBasicMap preimageDomain(JNIISLMultiAff ma) {
		/*** PROTECTED REGION ID(isl_basic_map_preimage_domain_multi_aff) DISABLED START ***/
		JNIISLBasicMap res;
		
		synchronized(LOCK) {
			checkParameters(this, ma);
			try {
				res = JNIISLBasicMap.build(ISLNative.isl_basic_map_preimage_domain_multi_aff(getNativePtr(this), getNativePtr(ma)));
			} finally {
				taken(this);
				taken(ma);
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_basic_map_preimage_range_multi_aff 
	 * 
	 * @take this ma
	 * @generated
	**/
	public JNIISLBasicMap preimageRange(JNIISLMultiAff ma) {
		/*** PROTECTED REGION ID(isl_basic_map_preimage_range_multi_aff) DISABLED START ***/
		JNIISLBasicMap res;
		
		synchronized(LOCK) {
			checkParameters(this, ma);
			try {
				res = JNIISLBasicMap.build(ISLNative.isl_basic_map_preimage_range_multi_aff(getNativePtr(this), getNativePtr(ma)));
			} finally {
				taken(this);
				taken(ma);
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_basic_map_gist 
	 * 
	 * @take this context
	 * @generated
	**/
	public JNIISLBasicMap gist(JNIISLBasicMap context) {
		/*** PROTECTED REGION ID(isl_basic_map_gist) DISABLED START ***/
		JNIISLBasicMap res;
		
		synchronized(LOCK) {
			checkParameters(this, context);
			try {
				res = JNIISLBasicMap.build(ISLNative.isl_basic_map_gist(getNativePtr(this), getNativePtr(context)));
			} finally {
				taken(this);
				taken(context);
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_basic_map_partial_lexmin 
	 * 
	 * @take this dom
	 * @generated
	**/
	public JNIISLMap partialLexMin(JNIISLBasicSet dom) {
		/*** PROTECTED REGION ID(isl_basic_map_partial_lexmin) DISABLED START ***/
		JNIISLMap res;
		
		synchronized(LOCK) {
			checkParameters(this, dom);
			try {
				res = JNIISLMap.build(ISLNative.isl_basic_map_partial_lexmin(getNativePtr(this), getNativePtr(dom)));
			} finally {
				taken(this);
				taken(dom);
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_basic_map_partial_lexmax 
	 * 
	 * @take this dom
	 * @generated
	**/
	public JNIISLMap partialLexMax(JNIISLBasicSet dom) {
		/*** PROTECTED REGION ID(isl_basic_map_partial_lexmax) DISABLED START ***/
		JNIISLMap res;
		
		synchronized(LOCK) {
			checkParameters(this, dom);
			try {
				res = JNIISLMap.build(ISLNative.isl_basic_map_partial_lexmax(getNativePtr(this), getNativePtr(dom)));
			} finally {
				taken(this);
				taken(dom);
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_basic_map_lexmin 
	 * 
	 * @take this
	 * @generated
	**/
	public JNIISLMap lexMin() {
		/*** PROTECTED REGION ID(isl_basic_map_lexmin) DISABLED START ***/
		JNIISLMap res;
		
		synchronized(LOCK) {
			checkParameters(this);
			try {
				res = JNIISLMap.build(ISLNative.isl_basic_map_lexmin(getNativePtr(this)));
			} finally {
				taken(this);
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_basic_map_lexmax 
	 * 
	 * @take this
	 * @generated
	**/
	public JNIISLMap lexMax() {
		/*** PROTECTED REGION ID(isl_basic_map_lexmax) DISABLED START ***/
		JNIISLMap res;
		
		synchronized(LOCK) {
			checkParameters(this);
			try {
				res = JNIISLMap.build(ISLNative.isl_basic_map_lexmax(getNativePtr(this)));
			} finally {
				taken(this);
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_basic_map_lexmin_pw_multi_aff 
	 * 
	 * @take this
	 * @generated
	**/
	public JNIISLPWMultiAff lexMinAsPWMultiAff() {
		/*** PROTECTED REGION ID(isl_basic_map_lexmin_pw_multi_aff) DISABLED START ***/
		JNIISLPWMultiAff res;
		
		synchronized(LOCK) {
			checkParameters(this);
			try {
				res = JNIISLPWMultiAff.build(ISLNative.isl_basic_map_lexmin_pw_multi_aff(getNativePtr(this)));
			} finally {
				taken(this);
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_basic_map_partial_lexmin_pw_multi_aff 
	 * 
	 * @take this dom
	 * @generated
	**/
	public JNIISLPWMultiAff partialLexMinAsPWMultiAff(JNIISLBasicSet dom) {
		/*** PROTECTED REGION ID(isl_basic_map_partial_lexmin_pw_multi_aff) DISABLED START ***/
		JNIISLPWMultiAff res;
		
		synchronized(LOCK) {
			checkParameters(this, dom);
			try {
				res = JNIISLPWMultiAff.build(ISLNative.isl_basic_map_partial_lexmin_pw_multi_aff(getNativePtr(this), getNativePtr(dom)));
			} finally {
				taken(this);
				taken(dom);
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_basic_map_partial_lexmax_pw_multi_aff 
	 * 
	 * @take this dom
	 * @generated
	**/
	public JNIISLPWMultiAff partialLexMaxAsPWMultiAff(JNIISLBasicSet dom) {
		/*** PROTECTED REGION ID(isl_basic_map_partial_lexmax_pw_multi_aff) DISABLED START ***/
		JNIISLPWMultiAff res;
		
		synchronized(LOCK) {
			checkParameters(this, dom);
			try {
				res = JNIISLPWMultiAff.build(ISLNative.isl_basic_map_partial_lexmax_pw_multi_aff(getNativePtr(this), getNativePtr(dom)));
			} finally {
				taken(this);
				taken(dom);
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_basic_map_numberof_constraint 
	 * 
	 * @generated
	**/
	public int getNumberOfConstraints() {
		/*** PROTECTED REGION ID(isl_basic_map_numberof_constraint) DISABLED START ***/
		int res;
		
		synchronized(LOCK) {
			checkParameters();
			try {
				res = ISLNative.isl_basic_map_numberof_constraint(getNativePtr(this));
			} finally {
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_basic_map_get_constraint_at 
	 * 
	 * @generated
	**/
	public JNIISLConstraint getConstraintAt(int pos) {
		/*** PROTECTED REGION ID(isl_basic_map_get_constraint_at) DISABLED START ***/
		JNIISLConstraint res;
		
		synchronized(LOCK) {
			checkParameters();
			try {
				res = JNIISLConstraint.build(ISLNative.isl_basic_map_get_constraint_at(getNativePtr(this), pos));
			} finally {
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	
	public String toString() {
		/*** PROTECTED REGION ID(ISLBasicMap_toString) DISABLED START ***/
			return ISLPrettyPrinter.asString(this);
		/*** PROTECTED REGION END ***/
	}
}
