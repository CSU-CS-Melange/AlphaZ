package fr.irisa.cairn.jnimap.isl.jni;

import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

import fr.irisa.cairn.jnimap.runtime.JNIObject;


/*** PROTECTED REGION ID(ISLContext_userImport) ENABLED START ***/
	/*
		Put you custom import here ....
	*/
/*** PROTECTED REGION END ***/

/**
 *  Automatically generated by jnimap 
 * @generated
 */
public class JNIISLContext extends JNIObject {
	
	/* @generated */
	protected JNIISLContext(long ptr) {
		/*** PROTECTED REGION ID(ISLContext_Constructor) DISABLED START ***/
		super(ptr);
		/*** PROTECTED REGION END ***/
	}
	
	/* @generated */
	protected static JNIISLContext build(long ptr) {
		return new JNIISLContext(ptr);
	}
	
	/*** PROTECTED REGION ID(ISLContext_userCode) ENABLED START ***/
	private static JNIISLContext ctx;
	static {
		ctx = JNIISLContext.alloc();
	}
	public final static JNIISLContext getCtx() {
		return ctx;
	}
	
	public final static void realloc() {
//		final long wait = 100;
//		System.gc();
//		System.runFinalization();
//		try {
//			Thread.sleep(wait);
//		} catch (InterruptedException e) {
//			// TODO Auto-generated catch block
//			e.printStackTrace();
//		}
//		System.gc();
//		System.runFinalization();
//		try {
//			Thread.sleep(wait);
//		} catch (InterruptedException e) {
//			// TODO Auto-generated catch block
//			e.printStackTrace();
//		}
//		ctx.free();
//		ctx = JNIISLContext.alloc();
	}
	
	@Override
	protected void finalize() {
		
	}
	/*** PROTECTED REGION END ***/


	
	/*************************************** 
	 *	         Static Methods            * 
	 ***************************************/
	/**
	 * isl_ctx_alloc 
	 * 
	 * @generated
	**/
	 private static JNIISLContext alloc() { 
		/*** PROTECTED REGION ID(static_isl_ctx_alloc) DISABLED START ***/
		JNIISLContext res;
		
		synchronized(LOCK) {
			checkParameters();
			try {
				res = JNIISLContext.build(ISLNative.isl_ctx_alloc());
			} finally {
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * record_stdout_start 
	 * 
	 * @generated
	**/
	 public static void recordStdoutStart() { 
		/*** PROTECTED REGION ID(static_record_stdout_start) DISABLED START ***/
		
		synchronized(LOCK) {
			checkParameters();
			try {
				ISLNative.record_stdout_start();
			} finally {
			}
		}
		
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * record_stdout_end 
	 * 
	 * @generated
	**/
	 public static String recordStdoutEnd() { 
		/*** PROTECTED REGION ID(static_record_stdout_end) DISABLED START ***/
		String res;
		
		synchronized(LOCK) {
			checkParameters();
			try {
				res = ISLNative.record_stdout_end();
			} finally {
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * record_stderr_start 
	 * 
	 * @generated
	**/
	 public static void recordStderrStart() { 
		/*** PROTECTED REGION ID(static_record_stderr_start) DISABLED START ***/
		
		synchronized(LOCK) {
			checkParameters();
			try {
				ISLNative.record_stderr_start();
			} finally {
			}
		}
		
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * record_stderr_end 
	 * 
	 * @generated
	**/
	 public static String recordStderrEnd() { 
		/*** PROTECTED REGION ID(static_record_stderr_end) DISABLED START ***/
		String res;
		
		synchronized(LOCK) {
			checkParameters();
			try {
				res = ISLNative.record_stderr_end();
			} finally {
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	
	/*************************************** 
	 *	         Member Methods            * 
	 ***************************************/
	/**
	 * isl_ctx_options 
	 * 
	 * @generated
	**/
	public JNIISLOptions islCtxOptions() {
		/*** PROTECTED REGION ID(isl_ctx_options) DISABLED START ***/
		JNIISLOptions res;
		
		synchronized(LOCK) {
			checkParameters();
			try {
				res = JNIISLOptions.build(ISLNative.isl_ctx_options(getNativePtr(this)));
			} finally {
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_ctx_free 
	 * 
	 * @generated
	**/
	public void free() {
		/*** PROTECTED REGION ID(isl_ctx_free) DISABLED START ***/
		
		synchronized(LOCK) {
			checkParameters();
			try {
				ISLNative.isl_ctx_free(getNativePtr(this));
			} finally {
			}
		}
		
		/*** PROTECTED REGION END ***/
	}
	
	
	public String toString() {
		/*** PROTECTED REGION ID(ISLContext_toString) DISABLED START ***/
			return ISLPrettyPrinter.asString(this);
		/*** PROTECTED REGION END ***/
	}
}
