package fr.irisa.cairn.jnimap.isl.jni;

import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

import fr.irisa.cairn.jnimap.runtime.JNIObject;


/*** PROTECTED REGION ID(ISLSchedule_userImport) ENABLED START ***/
/*** PROTECTED REGION END ***/

/**
 *  Automatically generated by jnimap 
 * @generated
 */
public class JNIISLSchedule extends JNIObject {
	
	/* @generated */
	protected JNIISLSchedule(long ptr) {
		/*** PROTECTED REGION ID(ISLSchedule_Constructor) DISABLED START ***/
		super(ptr);
		/*** PROTECTED REGION END ***/
	}
	
	/* @generated */
	protected static JNIISLSchedule build(long ptr) {
		return new JNIISLSchedule(ptr);
	}
	
	/*** PROTECTED REGION ID(ISLSchedule_userCode) ENABLED START ***/
	
	/**
	 * See http://www.kotnet.org/~skimo/isl/user.html#options
	 * 
	 * @author amorvan
	 *
	 */
	public static class JNIISLSchedulingOptions {
		// Values from "include/isl/options.h" in ISL sources.
		public static final int ISL_SCHEDULE_ALGORITHM_ISL = 0;
		public static final int ISL_SCHEDULE_ALGORITHM_FEAUTRIER = 1;

		// Values from "include/isl/schedule.h" in ISL sources.
		public static final int ISL_SCHEDULE_FUSE_MAX = 0;
		public static final int ISL_SCHEDULE_FUSE_MIN = 1;

		public static final int DEFAULT_MAX_COEF = -1; //disable bound on coefs.
		public static final int DEFAULT_MAX_CONSTANT_TERM = -1; //disable bound on coefs.
		public static final int DEFAULT_FUSE = ISL_SCHEDULE_FUSE_MAX;
		public static final int DEFAULT_MAXIMIZE_BAND_DEPTH = 0;
		public static final int DEFAULT_OUTER_ZERO_DISTANCE = 0;
		public static final int DEFAULT_Split_scaled = 1;
		public static final int DEFAULT_ALGORITHM = ISL_SCHEDULE_ALGORITHM_ISL;
		public static final int DEFAULT_SEPARATE_COMPONENTS = 0;

		private int max_coefficient;
		private int max_constant_term;
		private int fuse;
		private int maximize_band_depth;
		private int outer_zero_distance;
		private int split_scaled;
		private int algorithm;
		private int separate_components;

		public JNIISLSchedulingOptions() {
			this(DEFAULT_MAX_COEF, DEFAULT_MAX_CONSTANT_TERM, DEFAULT_FUSE,
					DEFAULT_MAXIMIZE_BAND_DEPTH, DEFAULT_OUTER_ZERO_DISTANCE,
					DEFAULT_Split_scaled, DEFAULT_ALGORITHM,
					DEFAULT_SEPARATE_COMPONENTS);
		}

		public JNIISLSchedulingOptions(int max_coefficient,
				int max_constant_term, int fuse, int maximize_band_depth,
				int outer_zero_distance, int split_scaled, int algorithm,
				int separate_components) {
			this.max_coefficient = max_coefficient;
			this.max_constant_term = max_constant_term;
			this.fuse = fuse;
			this.maximize_band_depth = maximize_band_depth;
			this.outer_zero_distance = outer_zero_distance;
			this.split_scaled = split_scaled;
			this.algorithm = algorithm;
			this.separate_components = separate_components;
		}

		public int getMax_coefficient() {
			return max_coefficient;
		}

		public void setMax_coefficient(int max_coefficient) {
			this.max_coefficient = max_coefficient;
		}

		public int getFuse() {
			return fuse;
		}

		public void setFuse(int fuse) {
			this.fuse = fuse;
		}

		public int getSeparate_components() {
			return separate_components;
		}

		public void setSeparate_components(int separate_components) {
			this.separate_components = separate_components;
		}

		public int getMax_constant_term() {
			return max_constant_term;
		}

		public void setMax_constant_term(int max_constant_term) {
			this.max_constant_term = max_constant_term;
		}

		public int getMaximize_band_depth() {
			return maximize_band_depth;
		}

		public void setMaximize_band_depth(int maximize_band_depth) {
			this.maximize_band_depth = maximize_band_depth;
		}

		public int getOuter_zero_distance() {
			return outer_zero_distance;
		}

		public void setOuter_zero_distance(int outer_zero_distance) {
			this.outer_zero_distance = outer_zero_distance;
		}

		public int getSplit_scaled() {
			return split_scaled;
		}

		public void setSplit_scaled(int split_scaled) {
			this.split_scaled = split_scaled;
		}

		public int getAlgorithm() {
			return algorithm;
		}

		public void setAlgorithm(int algorithm) {
			this.algorithm = algorithm;
		}
	}

	public static JNIISLSchedule computeFeautrierSchedule(
			JNIISLUnionSet domains, JNIISLUnionMap prdg) {
		return computeSchedule(domains, prdg,
				JNIISLSchedulingOptions.ISL_SCHEDULE_ALGORITHM_FEAUTRIER);
	}

	public static JNIISLSchedule computeFeautrierSchedule(
			JNIISLUnionSet domains, JNIISLUnionMap validity,
			JNIISLUnionMap proximity) {
		return computeSchedule(domains, validity, proximity,
				JNIISLSchedulingOptions.ISL_SCHEDULE_ALGORITHM_FEAUTRIER);
	}

	public static JNIISLSchedule computePlutoSchedule(JNIISLUnionSet domains,
			JNIISLUnionMap prdg) {
		return computeSchedule(domains, prdg,
				JNIISLSchedulingOptions.ISL_SCHEDULE_ALGORITHM_ISL);
	}

	public static JNIISLSchedule computePlutoSchedule(JNIISLUnionSet domains,
			JNIISLUnionMap validity, JNIISLUnionMap proximity) {
		return computeSchedule(domains, validity, proximity,
				JNIISLSchedulingOptions.ISL_SCHEDULE_ALGORITHM_ISL);
	}

	public static JNIISLSchedule computeSchedule(JNIISLUnionSet domains,
			JNIISLUnionMap validity, JNIISLUnionMap proximity, int algo) {
		JNIISLSchedulingOptions options = new JNIISLSchedulingOptions();
		options.setAlgorithm(algo);
		return computeSchedule(domains, validity, proximity, options);
	}

	public static JNIISLSchedule computeSchedule(JNIISLUnionSet domains,
			JNIISLUnionMap prdg, int algo) {
		JNIISLSchedulingOptions options = new JNIISLSchedulingOptions();
		options.setAlgorithm(algo);
		return computeSchedule(domains, prdg, options);
	}

	public static JNIISLSchedule computeSchedule(JNIISLUnionSet domains,
			JNIISLUnionMap prdg, JNIISLSchedulingOptions options) {
		JNIISLUnionMap copy = prdg.copy();
		return computeSchedule(domains, copy, prdg, options);
	}

	public static JNIISLSchedule computeSchedule(JNIISLUnionSet domains,
			JNIISLUnionMap validity, JNIISLUnionMap proximity,
			JNIISLSchedulingOptions options) {
		JNIISLSchedule res = JNIISLSchedule.compute(JNIISLContext.getCtx(),
				domains, validity, proximity,

				options.getMax_coefficient(), options.getMax_constant_term(),
				options.getFuse(), options.getMaximize_band_depth(),
				options.getOuter_zero_distance(), options.getSplit_scaled(),
				options.getAlgorithm(), options.getSeparate_components());
		return res;
	}
	/*** PROTECTED REGION END ***/


	
	/*************************************** 
	 *	         Static Methods            * 
	 ***************************************/
	/**
	 * isl_compute_schedule 
	 * 
	@take domain validity proximity
	 * @generated
	**/
	 public static JNIISLSchedule compute(JNIISLContext ctx, JNIISLUnionSet domain, JNIISLUnionMap validity, JNIISLUnionMap proximity, int max_coefficient, int max_constant_term, int fuse, int maximize_band_depth, int outer_coincidence, int split_scaled, int algorithm, int separate_components) { 
		/*** PROTECTED REGION ID(static_isl_compute_schedule) DISABLED START ***/
		JNIISLSchedule res;
		
		synchronized(LOCK) {
			checkParameters(domain, validity, proximity);
			try {
				res = JNIISLSchedule.build(ISLNative.isl_compute_schedule(getNativePtr(ctx), getNativePtr(domain), getNativePtr(validity), getNativePtr(proximity), max_coefficient, max_constant_term, fuse, maximize_band_depth, outer_coincidence, split_scaled, algorithm, separate_components));
			} finally {
				taken(domain);
				taken(validity);
				taken(proximity);
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_schedule_to_string 
	 * 
	 * @generated
	**/
	 public static String _toString(JNIISLSchedule s, int format) { 
		/*** PROTECTED REGION ID(static_isl_schedule_to_string) DISABLED START ***/
		String res;
		
		synchronized(LOCK) {
			checkParameters();
			try {
				res = ISLNative.isl_schedule_to_string(getNativePtr(s), format);
			} finally {
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	
	/*************************************** 
	 *	         Member Methods            * 
	 ***************************************/
	/**
	 * isl_schedule_free 
	 * 
	 * @take this
	 * @generated
	**/
	public void free() {
		/*** PROTECTED REGION ID(isl_schedule_free) DISABLED START ***/
		
		synchronized(LOCK) {
			checkParameters(this);
			try {
				ISLNative.isl_schedule_free(getNativePtr(this));
			} finally {
				taken(this);
			}
		}
		
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_schedule_get_map 
	 * 
	 * @generated
	**/
	public JNIISLUnionMap getMap() {
		/*** PROTECTED REGION ID(isl_schedule_get_map) DISABLED START ***/
		JNIISLUnionMap res;
		
		synchronized(LOCK) {
			checkParameters();
			try {
				res = JNIISLUnionMap.build(ISLNative.isl_schedule_get_map(getNativePtr(this)));
			} finally {
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	
	public String toString() {
		/*** PROTECTED REGION ID(ISLSchedule_toString) DISABLED START ***/
			return ISLPrettyPrinter.asString(this);
		/*** PROTECTED REGION END ***/
	}
}
