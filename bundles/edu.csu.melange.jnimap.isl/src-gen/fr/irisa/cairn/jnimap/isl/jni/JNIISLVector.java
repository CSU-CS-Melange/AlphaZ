package fr.irisa.cairn.jnimap.isl.jni;

import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

import fr.irisa.cairn.jnimap.runtime.JNIObject;


/*** PROTECTED REGION ID(ISLVector_userImport) ENABLED START ***/
import java.util.Collection;
	/*
		Put you custom import here ....
	*/
/*** PROTECTED REGION END ***/

/**
 *  Automatically generated by jnimap 
 * @generated
 */
public class JNIISLVector extends JNIObject {
	
	/* @generated */
	protected JNIISLVector(long ptr) {
		/*** PROTECTED REGION ID(ISLVector_Constructor) DISABLED START ***/
		super(ptr);
		/*** PROTECTED REGION END ***/
	}
	
	/* @generated */
	protected static JNIISLVector build(long ptr) {
		return new JNIISLVector(ptr);
	}
	
	/*** PROTECTED REGION ID(ISLVector_userCode) ENABLED START ***/
	@Deprecated
	public JNIISLVector(JNIISLContext ctx, int size) {
		this(ISLNative.isl_vec_alloc(getNativePtr(ctx), size));
	}
	
	public static JNIISLVector buildFrom(JNIISLContext ctx, Collection<Integer> values) {
		JNIISLVector vec = JNIISLVector.build(ISLNative.isl_vec_alloc(getNativePtr(ctx), values.size())); 
		int i=0;
		for(Integer s : values) {
			vec = vec.setElement(i, s);
			i++;
		}
		return vec;
	}
	/*** PROTECTED REGION END ***/


	
	/*************************************** 
	 *	         Static Methods            * 
	 ***************************************/
	
	/*************************************** 
	 *	         Member Methods            * 
	 ***************************************/
	/**
	 * isl_vec_get_ctx 
	 * 
	 * @generated
	**/
	public JNIISLContext getContext() {
		/*** PROTECTED REGION ID(isl_vec_get_ctx) DISABLED START ***/
		JNIISLContext res;
		
		synchronized(LOCK) {
			checkParameters();
			try {
				res = JNIISLContext.build(ISLNative.isl_vec_get_ctx(getNativePtr(this)));
			} finally {
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_vec_copy 
	 * 
	 * @generated
	**/
	public JNIISLVector copy() {
		/*** PROTECTED REGION ID(isl_vec_copy) DISABLED START ***/
		JNIISLVector res;
		
		synchronized(LOCK) {
			checkParameters();
			try {
				res = JNIISLVector.build(ISLNative.isl_vec_copy(getNativePtr(this)));
			} finally {
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_vec_free 
	 * 
	 * @take this
	 * @generated
	**/
	public void free() {
		/*** PROTECTED REGION ID(isl_vec_free) DISABLED START ***/
		
		synchronized(LOCK) {
			checkParameters(this);
			try {
				ISLNative.isl_vec_free(getNativePtr(this));
			} finally {
				taken(this);
			}
		}
		
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_vec_size 
	 * 
	 * @generated
	**/
	public int getSize() {
		/*** PROTECTED REGION ID(isl_vec_size) DISABLED START ***/
		int res;
		
		synchronized(LOCK) {
			checkParameters();
			try {
				res = ISLNative.isl_vec_size(getNativePtr(this));
			} finally {
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_vec_get_element_val 
	 * 
	 * @generated
	**/
	public JNIISLVal getElementVal(int pos) {
		/*** PROTECTED REGION ID(isl_vec_get_element_val) DISABLED START ***/
		JNIISLVal res;
		
		synchronized(LOCK) {
			checkParameters();
			try {
				res = JNIISLVal.build(ISLNative.isl_vec_get_element_val(getNativePtr(this), pos));
			} finally {
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_vec_set_element_si 
	 * 
	 * @take this
	 * @generated
	**/
	public JNIISLVector setElement(int pos, int v) {
		/*** PROTECTED REGION ID(isl_vec_set_element_si) DISABLED START ***/
		JNIISLVector res;
		
		synchronized(LOCK) {
			checkParameters(this);
			try {
				res = JNIISLVector.build(ISLNative.isl_vec_set_element_si(getNativePtr(this), pos, v));
			} finally {
				taken(this);
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_vec_set_element_val 
	 * 
	 * @take this v
	 * @generated
	**/
	public JNIISLVector setElement(int pos, JNIISLVal v) {
		/*** PROTECTED REGION ID(isl_vec_set_element_val) DISABLED START ***/
		JNIISLVector res;
		
		synchronized(LOCK) {
			checkParameters(this, v);
			try {
				res = JNIISLVector.build(ISLNative.isl_vec_set_element_val(getNativePtr(this), pos, getNativePtr(v)));
			} finally {
				taken(this);
				taken(v);
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	
	public String toString() {
		/*** PROTECTED REGION ID(ISLVector_toString) DISABLED START ***/
			return ISLPrettyPrinter.asString(this);
		/*** PROTECTED REGION END ***/
	}
}
