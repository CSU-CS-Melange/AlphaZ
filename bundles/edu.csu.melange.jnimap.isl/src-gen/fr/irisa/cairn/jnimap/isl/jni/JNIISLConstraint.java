package fr.irisa.cairn.jnimap.isl.jni;

import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

import fr.irisa.cairn.jnimap.runtime.JNIObject;


/*** PROTECTED REGION ID(ISLConstraint_userImport) ENABLED START ***/
	/*
		Put you custom import here ....
	*/
/*** PROTECTED REGION END ***/

/**
 *  Automatically generated by jnimap 
 * @generated
 */
public class JNIISLConstraint extends JNIObject {
	
	/* @generated */
	protected JNIISLConstraint(long ptr) {
		/*** PROTECTED REGION ID(ISLConstraint_Constructor) DISABLED START ***/
		super(ptr);
		/*** PROTECTED REGION END ***/
	}
	
	/* @generated */
	protected static JNIISLConstraint build(long ptr) {
		return new JNIISLConstraint(ptr);
	}
	
	/*** PROTECTED REGION ID(ISLConstraint_userCode) ENABLED START ***/
	@Deprecated
	public JNIISLConstraint setCoef(JNIISLDimType type, int pos, int v) {
		return setCoefficient(type, pos, v);
	}
	
	@Deprecated
	public static JNIISLConstraint equality(JNIISLLocalSpace space) {
		return buildEquality(space);
	}

	@Deprecated
	public static JNIISLConstraint inEquality(JNIISLLocalSpace space) {
		return buildInequality(space);
	}
	
	@Deprecated
	public static JNIISLConstraint equalityFromAff(JNIISLAff aff) {
		return aff.toEqualityConstraint();
	}

	@Deprecated
	public static JNIISLConstraint inEqualityFromAff(JNIISLAff aff) {
		return aff.toInequalityConstraint();
	}
	
	public JNIISLAff getDivAt(int pos) {
		return getDiv(pos);
	}
	
	
	public static JNIISLConstraint dimEqual(JNIISLSpace space, int i) {
		JNIISLConstraint ceq = JNIISLConstraint.buildEquality(JNIISLLocalSpace
				.fromSpace(space.copy()));
		ceq = ceq.setCoefficient(JNIISLDimType.isl_dim_in, i, 1);
		ceq = ceq.setCoefficient(JNIISLDimType.isl_dim_out, i, -1);
		return ceq;
	}

	public static JNIISLConstraint dimGreaterThan(JNIISLSpace space, int i) {
		JNIISLConstraint cgt = JNIISLConstraint.buildInequality(JNIISLLocalSpace
				.fromSpace(space.copy()));
		cgt = cgt.setCoefficient(JNIISLDimType.isl_dim_in, i, 1);
		cgt = cgt.setCoefficient(JNIISLDimType.isl_dim_out, i, -1);
		cgt = cgt.setConstant(-1);
		return cgt;
	}

	/**
	 * Constructs a constraint (for map) where i-th dimension of input is less than the i-th dimension of output. 
	 * 
	 * @param space
	 * @param i
	 * @return
	 */
	public static JNIISLConstraint dimLessThan(JNIISLSpace space, int i) {
		JNIISLConstraint clt = JNIISLConstraint.buildInequality(JNIISLLocalSpace
				.fromSpace(space.copy()));
		clt = clt.setCoefficient(JNIISLDimType.isl_dim_in, i, -1);
		clt = clt.setCoefficient(JNIISLDimType.isl_dim_out, i, 1);
		clt = clt.setConstant(-1);
		return clt;
	}

	public static JNIISLConstraint dimLessThan(JNIISLSpace space, int dim,
			int constant) {
		JNIISLConstraint clt = JNIISLConstraint.buildInequality(JNIISLLocalSpace
				.fromSpace(space.copy()));
		clt = clt.setCoefficient(JNIISLDimType.isl_dim_in, dim, -1);
		clt = clt.setCoefficient(JNIISLDimType.isl_dim_out, dim, 1);
		clt = clt.setConstant(-constant);
		return clt;
	}

	@Deprecated
	public static JNIISLConstraint equality(JNIISLSpace space) {
		return buildEquality(JNIISLLocalSpace.fromSpace(space.copy()));
	}
	
	@Deprecated
	public static JNIISLConstraint inEquality(JNIISLSpace space) {
		return buildInequality(JNIISLLocalSpace.fromSpace(space.copy()));
	}
	
	public long getCoefficient(JNIISLDimType type, int pos){
		return getCoefficientVal(type, pos).asLong();
	}
	
	public long getConstant() {
		return getConstantVal().asLong();
	}

	public long getCoefficientAt(JNIISLDimType type, int pos) {
		return getCoefficient(type, pos);
	}

	public JNIISLConstraint setConstant(long v) {
		return setConstant(JNIISLVal.buildFromLong(getContext(), v));
	}

	
	@Deprecated
	public int getNbDim(JNIISLDimType type) {
		return getSpace().getNbDims(type);
	}

	public int getNbDims(JNIISLDimType type) {
		return getSpace().getNbDims(type);
	}


	public String javaPrint() {
		StringBuffer res = new StringBuffer();
		String javaPrint = "";
		boolean first = true;

		long cst = getConstant();
		if (cst != 0) {
			first = false;
			javaPrint += cst;
		}

		JNIISLSpace dims = this.getSpace();

		JNIISLDimType dimType = JNIISLDimType.isl_dim_in;
		int n = this.getNbDims(dimType);
		for (int i = 0; i < n; i++) {
			long coef = this.getCoefficientAt(dimType, i);
			if (coef != 0) {
				if (!first) {
					if (coef < 0)
						javaPrint += " - ";
					else
						javaPrint += " + ";
				} else {
					if (coef < 0)
						javaPrint += "-";
				}
				first = false;
				if (Math.abs(coef) != 1)
					javaPrint += Math.abs(coef);
				javaPrint += dims.getName(dimType, i);
			}
		}

		dimType = JNIISLDimType.isl_dim_out;
		n = this.getNbDims(dimType);
		for (int i = 0; i < n; i++) {
			long coef = this.getCoefficientAt(dimType, i);
			if (coef != 0) {
				if (!first) {
					if (coef < 0)
						javaPrint += " - ";
					else
						javaPrint += " + ";
				} else {
					if (coef < 0)
						javaPrint += "-";
				}
				first = false;
				if (Math.abs(coef) != 1)
					javaPrint += Math.abs(coef);
				javaPrint += dims.getName(dimType, i);
			}
		}

		dimType = JNIISLDimType.isl_dim_param;
		n = this.getNbDims(dimType);
		for (int i = 0; i < n; i++) {
			long coef = this.getCoefficientAt(dimType, i);
			if (coef != 0) {
				if (!first) {
					if (coef < 0)
						javaPrint += " - ";
					else
						javaPrint += " + ";
				} else {
					if (coef < 0)
						javaPrint += "-";
				}
				first = false;
				if (Math.abs(coef) != 1)
					javaPrint += Math.abs(coef);
				javaPrint += dims.getName(dimType, i);
			}
		}

		dimType = JNIISLDimType.isl_dim_div;
		n = this.getNbDims(dimType);
		for (int i = 0; i < n; i++) {
			long coef = this.getCoefficientAt(dimType, i);
			if (coef != 0) {
				if (!first) {
					if (coef < 0)
						javaPrint += " - ";
					else
						javaPrint += " + ";
				} else {
					if (coef < 0)
						javaPrint += "-";
				}
				first = false;
				if (Math.abs(coef) != 1)
					javaPrint += Math.abs(coef) + "*";

				//				JNIISLDiv div = this.getDivAt(i);
				//				javaPrint += div.javaPrint(dims);
			}
		}

		if (javaPrint.isEmpty())
			javaPrint = "0";

		res.append(javaPrint);

		res.append(!isEquality() ? " >= " : " = ");
		res.append("0");
		return res.toString();
	}

	public static JNIISLConstraint buildEquality(JNIISLSpace s) {
		return buildEquality(s.toLocalSpace());
	}
	public static JNIISLConstraint buildInequality(JNIISLSpace s) {
		return buildInequality(s.toLocalSpace());
	}
	/*** PROTECTED REGION END ***/


	
	/*************************************** 
	 *	         Static Methods            * 
	 ***************************************/
	/**
	 * isl_equality_alloc 
	 * 
	@take ls
	 * @generated
	**/
	 public static JNIISLConstraint buildEquality(JNIISLLocalSpace ls) { 
		/*** PROTECTED REGION ID(static_isl_equality_alloc) DISABLED START ***/
		JNIISLConstraint res;
		
		synchronized(LOCK) {
			checkParameters(ls);
			try {
				res = JNIISLConstraint.build(ISLNative.isl_equality_alloc(getNativePtr(ls)));
			} finally {
				taken(ls);
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_inequality_alloc 
	 * 
	@take ls
	 * @generated
	**/
	 public static JNIISLConstraint buildInequality(JNIISLLocalSpace ls) { 
		/*** PROTECTED REGION ID(static_isl_inequality_alloc) DISABLED START ***/
		JNIISLConstraint res;
		
		synchronized(LOCK) {
			checkParameters(ls);
			try {
				res = JNIISLConstraint.build(ISLNative.isl_inequality_alloc(getNativePtr(ls)));
			} finally {
				taken(ls);
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_constraint_to_string 
	 * 
	 * @generated
	**/
	 public static String _toString(JNIISLConstraint constraint, int format) { 
		/*** PROTECTED REGION ID(static_isl_constraint_to_string) DISABLED START ***/
		String res;
		
		synchronized(LOCK) {
			checkParameters();
			try {
				res = ISLNative.isl_constraint_to_string(getNativePtr(constraint), format);
			} finally {
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	
	/*************************************** 
	 *	         Member Methods            * 
	 ***************************************/
	/**
	 * isl_basic_map_from_constraint 
	 * 
	 * @take this
	 * @generated
	**/
	public JNIISLBasicMap toBasicMap() {
		/*** PROTECTED REGION ID(isl_basic_map_from_constraint) DISABLED START ***/
		JNIISLBasicMap res;
		
		synchronized(LOCK) {
			checkParameters(this);
			try {
				res = JNIISLBasicMap.build(ISLNative.isl_basic_map_from_constraint(getNativePtr(this)));
			} finally {
				taken(this);
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_basic_set_from_constraint 
	 * 
	 * @take this
	 * @generated
	**/
	public JNIISLBasicSet toBasicSet() {
		/*** PROTECTED REGION ID(isl_basic_set_from_constraint) DISABLED START ***/
		JNIISLBasicSet res;
		
		synchronized(LOCK) {
			checkParameters(this);
			try {
				res = JNIISLBasicSet.build(ISLNative.isl_basic_set_from_constraint(getNativePtr(this)));
			} finally {
				taken(this);
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_constraint_get_ctx 
	 * 
	 * @generated
	**/
	public JNIISLContext getContext() {
		/*** PROTECTED REGION ID(isl_constraint_get_ctx) DISABLED START ***/
		JNIISLContext res;
		
		synchronized(LOCK) {
			checkParameters();
			try {
				res = JNIISLContext.build(ISLNative.isl_constraint_get_ctx(getNativePtr(this)));
			} finally {
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_constraint_get_space 
	 * 
	 * @generated
	**/
	public JNIISLSpace getSpace() {
		/*** PROTECTED REGION ID(isl_constraint_get_space) DISABLED START ***/
		JNIISLSpace res;
		
		synchronized(LOCK) {
			checkParameters();
			try {
				res = JNIISLSpace.build(ISLNative.isl_constraint_get_space(getNativePtr(this)));
			} finally {
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_constraint_get_local_space 
	 * 
	 * @generated
	**/
	public JNIISLLocalSpace getLocalSpace() {
		/*** PROTECTED REGION ID(isl_constraint_get_local_space) DISABLED START ***/
		JNIISLLocalSpace res;
		
		synchronized(LOCK) {
			checkParameters();
			try {
				res = JNIISLLocalSpace.build(ISLNative.isl_constraint_get_local_space(getNativePtr(this)));
			} finally {
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_constraint_copy 
	 * 
	 * @generated
	**/
	public JNIISLConstraint copy() {
		/*** PROTECTED REGION ID(isl_constraint_copy) DISABLED START ***/
		JNIISLConstraint res;
		
		synchronized(LOCK) {
			checkParameters();
			try {
				res = JNIISLConstraint.build(ISLNative.isl_constraint_copy(getNativePtr(this)));
			} finally {
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_constraint_free 
	 * 
	 * @take this
	 * @generated
	**/
	public void free() {
		/*** PROTECTED REGION ID(isl_constraint_free) DISABLED START ***/
		
		synchronized(LOCK) {
			checkParameters(this);
			try {
				ISLNative.isl_constraint_free(getNativePtr(this));
			} finally {
				taken(this);
			}
		}
		
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_constraint_set_constant_si 
	 * 
	 * @take this
	 * @generated
	**/
	public JNIISLConstraint setConstant(int v) {
		/*** PROTECTED REGION ID(isl_constraint_set_constant_si) DISABLED START ***/
		JNIISLConstraint res;
		
		synchronized(LOCK) {
			checkParameters(this);
			try {
				res = JNIISLConstraint.build(ISLNative.isl_constraint_set_constant_si(getNativePtr(this), v));
			} finally {
				taken(this);
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_constraint_set_constant_val 
	 * 
	 * @take this v
	 * @generated
	**/
	public JNIISLConstraint setConstant(JNIISLVal v) {
		/*** PROTECTED REGION ID(isl_constraint_set_constant_val) DISABLED START ***/
		JNIISLConstraint res;
		
		synchronized(LOCK) {
			checkParameters(this, v);
			try {
				res = JNIISLConstraint.build(ISLNative.isl_constraint_set_constant_val(getNativePtr(this), getNativePtr(v)));
			} finally {
				taken(this);
				taken(v);
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_constraint_set_coefficient_si 
	 * 
	 * @take this
	 * @generated
	**/
	public JNIISLConstraint setCoefficient(JNIISLDimType type, int pos, int v) {
		/*** PROTECTED REGION ID(isl_constraint_set_coefficient_si) DISABLED START ***/
		JNIISLConstraint res;
		
		synchronized(LOCK) {
			checkParameters(this);
			try {
				res = JNIISLConstraint.build(ISLNative.isl_constraint_set_coefficient_si(getNativePtr(this), type.getValue(), pos, v));
			} finally {
				taken(this);
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_constraint_set_coefficient_val 
	 * 
	 * @take this v
	 * @generated
	**/
	public JNIISLConstraint setCoefficient(JNIISLDimType type, int pos, JNIISLVal v) {
		/*** PROTECTED REGION ID(isl_constraint_set_coefficient_val) DISABLED START ***/
		JNIISLConstraint res;
		
		synchronized(LOCK) {
			checkParameters(this, v);
			try {
				res = JNIISLConstraint.build(ISLNative.isl_constraint_set_coefficient_val(getNativePtr(this), type.getValue(), pos, getNativePtr(v)));
			} finally {
				taken(this);
				taken(v);
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_constraint_is_equal 
	 * 
	 * @generated
	**/
	public boolean isEqual(JNIISLConstraint constraint2) {
		/*** PROTECTED REGION ID(isl_constraint_is_equal) DISABLED START ***/
		boolean res;
		
		synchronized(LOCK) {
			checkParameters();
			try {
				res = ISLNative.isl_constraint_is_equal(getNativePtr(this), getNativePtr(constraint2)) != 0;
			} finally {
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_constraint_is_equality 
	 * 
	 * @generated
	**/
	public boolean isEquality() {
		/*** PROTECTED REGION ID(isl_constraint_is_equality) DISABLED START ***/
		boolean res;
		
		synchronized(LOCK) {
			checkParameters();
			try {
				res = ISLNative.isl_constraint_is_equality(getNativePtr(this)) != 0;
			} finally {
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_constraint_is_div_constraint 
	 * 
	 * @generated
	**/
	public boolean isDivConstraint() {
		/*** PROTECTED REGION ID(isl_constraint_is_div_constraint) DISABLED START ***/
		boolean res;
		
		synchronized(LOCK) {
			checkParameters();
			try {
				res = ISLNative.isl_constraint_is_div_constraint(getNativePtr(this)) != 0;
			} finally {
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_constraint_is_lower_bound 
	 * 
	 * @generated
	**/
	public boolean isLowerBound(JNIISLDimType type, int pos) {
		/*** PROTECTED REGION ID(isl_constraint_is_lower_bound) DISABLED START ***/
		boolean res;
		
		synchronized(LOCK) {
			checkParameters();
			try {
				res = ISLNative.isl_constraint_is_lower_bound(getNativePtr(this), type.getValue(), pos) != 0;
			} finally {
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_constraint_is_upper_bound 
	 * 
	 * @generated
	**/
	public boolean isUpperBound(JNIISLDimType type, int pos) {
		/*** PROTECTED REGION ID(isl_constraint_is_upper_bound) DISABLED START ***/
		boolean res;
		
		synchronized(LOCK) {
			checkParameters();
			try {
				res = ISLNative.isl_constraint_is_upper_bound(getNativePtr(this), type.getValue(), pos) != 0;
			} finally {
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_constraint_get_constant_val 
	 * 
	 * @generated
	**/
	public JNIISLVal getConstantVal() {
		/*** PROTECTED REGION ID(isl_constraint_get_constant_val) DISABLED START ***/
		JNIISLVal res;
		
		synchronized(LOCK) {
			checkParameters();
			try {
				res = JNIISLVal.build(ISLNative.isl_constraint_get_constant_val(getNativePtr(this)));
			} finally {
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_constraint_get_coefficient_val 
	 * 
	 * @generated
	**/
	public JNIISLVal getCoefficientVal(JNIISLDimType type, int pos) {
		/*** PROTECTED REGION ID(isl_constraint_get_coefficient_val) DISABLED START ***/
		JNIISLVal res;
		
		synchronized(LOCK) {
			checkParameters();
			try {
				res = JNIISLVal.build(ISLNative.isl_constraint_get_coefficient_val(getNativePtr(this), type.getValue(), pos));
			} finally {
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_constraint_involves_dims 
	 * 
	 * @generated
	**/
	public boolean involvesDims(JNIISLDimType type, int first, int n) {
		/*** PROTECTED REGION ID(isl_constraint_involves_dims) DISABLED START ***/
		boolean res;
		
		synchronized(LOCK) {
			checkParameters();
			try {
				res = ISLNative.isl_constraint_involves_dims(getNativePtr(this), type.getValue(), first, n) != 0;
			} finally {
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_constraint_get_div 
	 * 
	 * @generated
	**/
	public JNIISLAff getDiv(int pos) {
		/*** PROTECTED REGION ID(isl_constraint_get_div) DISABLED START ***/
		JNIISLAff res;
		
		synchronized(LOCK) {
			checkParameters();
			try {
				res = JNIISLAff.build(ISLNative.isl_constraint_get_div(getNativePtr(this), pos));
			} finally {
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_constraint_get_dim_name 
	 * 
	 * @generated
	**/
	public String getDimName(JNIISLDimType type, int pos) {
		/*** PROTECTED REGION ID(isl_constraint_get_dim_name) DISABLED START ***/
		String res;
		
		synchronized(LOCK) {
			checkParameters();
			try {
				res = ISLNative.isl_constraint_get_dim_name(getNativePtr(this), type.getValue(), pos);
			} finally {
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_constraint_get_bound 
	 * 
	 * @generated
	**/
	public JNIISLAff getBound(JNIISLDimType type, int pos) {
		/*** PROTECTED REGION ID(isl_constraint_get_bound) DISABLED START ***/
		JNIISLAff res;
		
		synchronized(LOCK) {
			checkParameters();
			try {
				res = JNIISLAff.build(ISLNative.isl_constraint_get_bound(getNativePtr(this), type.getValue(), pos));
			} finally {
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	/**
	 * isl_constraint_get_aff 
	 * 
	 * @generated
	**/
	public JNIISLAff getAff() {
		/*** PROTECTED REGION ID(isl_constraint_get_aff) DISABLED START ***/
		JNIISLAff res;
		
		synchronized(LOCK) {
			checkParameters();
			try {
				res = JNIISLAff.build(ISLNative.isl_constraint_get_aff(getNativePtr(this)));
			} finally {
			}
		}
		
		return res;
		/*** PROTECTED REGION END ***/
	}
	
	
	public String toString() {
		/*** PROTECTED REGION ID(ISLConstraint_toString) DISABLED START ***/
			return ISLPrettyPrinter.asString(this);
		/*** PROTECTED REGION END ***/
	}
}
