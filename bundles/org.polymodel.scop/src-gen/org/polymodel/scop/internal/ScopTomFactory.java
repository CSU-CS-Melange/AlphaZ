package org.polymodel.scop.internal;

import java.util.List;

import org.polymodel.algebra.*;
import org.polymodel.algebra.affine.*;
import org.polymodel.algebra.quasiAffine.*;
import org.polymodel.algebra.polynomials.*;
import org.polymodel.algebra.reductions.*;
import org.polymodel.scop.*;
import org.polymodel.scop.annotation.*;

/* PROTECTED REGION ID(scop_tom_factory_imports) ENABLED START */
// protected imports, you should add here required imports that won't be removed after regeneration of the maping code
/* PROTECTED REGION END */

/**
* Factory used by TOM for scop mapping.
* It shouldn't be visible outside of the plugin
* -- Generated by TOM mapping EMF generator --
*/

public class ScopTomFactory {

	/* PROTECTED REGION ID(scop_tom_factory_members) ENABLED START */
	/* PROTECTED REGION END */
	
 	public static ScopFactory scopFactory = ScopFactory.eINSTANCE;


	// User operators

	/** Module nodes **/
	// CreateOperatorWithParameters root
	public static ScopRoot createRoot(List<AbstractScopNode> _statements) {
		ScopRoot o = scopFactory.createScopRoot();
		for(int i=0; i<_statements.size(); i++) {
			o.getStatements().add((AbstractScopNode) _statements.get(i));
		}
		
		/* PROTECTED REGION ID(scop_tom_factory_class_op_root) ENABLED START */
		/* PROTECTED REGION END */
		
		return o;
	}
	
	// CreateOperatorWithParameters loop
	public static ScopFor createLoop(Variable _iterator, IntExpression _LB, IntExpression _UB, IntExpression _stride, AbstractScopNode _body) {
		ScopFor o = scopFactory.createScopFor();
		o.setIterator((Variable) _iterator);
		o.setLB((IntExpression) _LB);
		o.setUB((IntExpression) _UB);
		o.setStride((IntExpression) _stride);
		o.setBody((AbstractScopNode) _body);
		
		/* PROTECTED REGION ID(scop_tom_factory_class_op_loop) ENABLED START */
		/* PROTECTED REGION END */
		
		return o;
	}
	
	// CreateOperatorWithParameters block
	public static ScopBlock createBlock(List<AbstractScopNode> _statements) {
		ScopBlock o = scopFactory.createScopBlock();
		for(int i=0; i<_statements.size(); i++) {
			o.getStatements().add((AbstractScopNode) _statements.get(i));
		}
		
		/* PROTECTED REGION ID(scop_tom_factory_class_op_block) ENABLED START */
		/* PROTECTED REGION END */
		
		return o;
	}
	
	// CreateOperatorWithParameters guard
	public static ScopGuard createGuard(List<IntConstraintSystem> _constraintSystems, AbstractScopNode _thenBody, AbstractScopNode _elseBody) {
		ScopGuard o = scopFactory.createScopGuard();
		for(int i=0; i<_constraintSystems.size(); i++) {
			o.getConstraintSystems().add((IntConstraintSystem) _constraintSystems.get(i));
		}
		o.setThenBody((AbstractScopNode) _thenBody);
		o.setElseBody((AbstractScopNode) _elseBody);
		
		/* PROTECTED REGION ID(scop_tom_factory_class_op_guard) ENABLED START */
		/* PROTECTED REGION END */
		
		return o;
	}
	
	// CreateOperatorWithParameters stmtMacro
	public static ScopStatementMacro createStmtMacro(String _name, List<IntExpression> _macroParams) {
		ScopStatementMacro o = scopFactory.createScopStatementMacro();
		o.setName(_name);
		for(int i=0; i<_macroParams.size(); i++) {
			o.getMacroParams().add((IntExpression) _macroParams.get(i));
		}
		
		/* PROTECTED REGION ID(scop_tom_factory_class_op_stmtMacro) ENABLED START */
		/* PROTECTED REGION END */
		
		return o;
	}
	
	// CreateOperatorWithParameters unscanned
	public static ScopUnscannedDomain createUnscanned(String _name, List<IntExpression> _macroParams, fr.irisa.cairn.jnimap.isl.jni.JNIISLUnionMap _schedule) {
		ScopUnscannedDomain o = scopFactory.createScopUnscannedDomain();
		o.setName(_name);
		for(int i=0; i<_macroParams.size(); i++) {
			o.getMacroParams().add((IntExpression) _macroParams.get(i));
		}
		o.setSchedule(_schedule);
		
		/* PROTECTED REGION ID(scop_tom_factory_class_op_unscanned) ENABLED START */
		/* PROTECTED REGION END */
		
		return o;
	}
	
	// CreateOperatorWithParameters assignment
	public static ScopAssignment createAssignment(Variable _LHS, IntExpression _RHS) {
		ScopAssignment o = scopFactory.createScopAssignment();
		o.setLHS((Variable) _LHS);
		o.setRHS((IntExpression) _RHS);
		
		/* PROTECTED REGION ID(scop_tom_factory_class_op_assignment) ENABLED START */
		/* PROTECTED REGION END */
		
		return o;
	}

	/*
	* Default TOM operators for scop mapping. Each class that has a terminal type has also a default create function.
	*/
	
}
