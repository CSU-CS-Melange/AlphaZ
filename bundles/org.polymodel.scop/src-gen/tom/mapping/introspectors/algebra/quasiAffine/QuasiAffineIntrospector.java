package tom.mapping.introspectors.algebra.quasiAffine;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EStructuralFeature;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.EClass;

import tom.library.sl.Introspector;
import tom.mapping.IntrospectorManager;

import org.polymodel.algebra.quasiAffine.QuasiAffinePackage;

import org.polymodel.scop.*; 
import org.polymodel.scop.util.*;
import org.polymodel.scop.annotation.*; 
import org.polymodel.scop.annotation.util.*;
import org.polymodel.algebra.*; 
import org.polymodel.algebra.util.*;
import org.polymodel.algebra.affine.*; 
import org.polymodel.algebra.affine.util.*;
import org.polymodel.algebra.quasiAffine.*; 
import org.polymodel.algebra.quasiAffine.util.*;
import org.polymodel.algebra.polynomials.*; 
import org.polymodel.algebra.polynomials.util.*;
import org.polymodel.algebra.reductions.*; 
import org.polymodel.algebra.reductions.util.*;

/* PROTECTED REGION ID(introspector_imports) ENABLED START */
// protected imports
/* PROTECTED REGION END */

/**
* TOM introspector for scop.
* -- Autogenerated by TOM mapping EMF genrator --
*/

public class QuasiAffineIntrospector implements Introspector {
	
	public static final QuasiAffineIntrospector INSTANCE = new QuasiAffineIntrospector();
	
	static {
		IntrospectorManager.INSTANCE.register(QuasiAffinePackage.eINSTANCE, INSTANCE);
	}

	/* PROTECTED REGION ID(introspector_members) ENABLED START */
	/* PROTECTED REGION END */
	
	protected QuasiAffineIntrospector() {}
	
	public Object getChildAt(Object o, int i) {
		return getChildren(o)[i];
	}
	
	public int getChildCount(Object o) {
		return getChildren(o).length;
	}
	
	@SuppressWarnings("unchecked")
	public Object[] getChildren(Object arg0) {
		List<Object> l = new ArrayList<Object>();
		if (arg0 instanceof List) {
			// Children of a list are its content
			for(Object object : (List<Object>) arg0) {
				l.add(object);
			}
			return l.toArray();
		}
		return QuasiAffineChildrenGetter.INSTANCE.children(arg0);
	}
	
	private static class QuasiAffineChildrenGetter extends QuasiAffineSwitch<Object[]> {
		public final static QuasiAffineChildrenGetter INSTANCE = new QuasiAffineChildrenGetter();
		
		private QuasiAffineChildrenGetter(){}
		
		public Object[] children(Object i) {
			Object[] children = doSwitch((EObject) i);
			return children != null ? children : new Object[0];
		}
		
		public Object[] caseSimpleQuasiAffineTerm(SimpleQuasiAffineTerm o) {
			List<Object> l = new ArrayList<Object>();
			if (o.getExpression() != null)
				l.add(o.getExpression());
			
			/*PROTECTED REGION ID(getter_quasiAffine_SimpleQuasiAffineTerm) ENABLED START*/
			/*PROTECTED REGION END*/
			
			return l.toArray();
		}
		
		public Object[] caseNestedQuasiAffineTerm(NestedQuasiAffineTerm o) {
			List<Object> l = new ArrayList<Object>();
			if (o.getExpression() != null)
				l.add(o.getExpression());
			
			/*PROTECTED REGION ID(getter_quasiAffine_NestedQuasiAffineTerm) ENABLED START*/
			/*PROTECTED REGION END*/
			
			return l.toArray();
		}
	}
	
	@SuppressWarnings("unchecked")
	public <T> T setChildren(T arg0, Object[] arg1) {
		if (arg0 instanceof List) {
			// If object is a list then content of the original list has to be replaced
			List<Object> list = (List<Object>) arg0;
			list.clear();
			for (int i = 0; i < arg1.length; i++) {
				list.add(arg1[i]);
			}
			return arg0;
		} else {
			return (T) QuasiAffineChildrenSetter.INSTANCE.set(arg0, arg1);
		}
	}
	
	private static class QuasiAffineChildrenSetter extends QuasiAffineSwitch<Object> {
		public final static QuasiAffineChildrenSetter INSTANCE = new QuasiAffineChildrenSetter();
		
		private Object[] children;
		private QuasiAffineChildrenSetter(){}
		
		public Object set(Object i, Object[] children) {
			this.children = children;
			return doSwitch((EObject) i);
		}
		
		public Object caseSimpleQuasiAffineTerm(SimpleQuasiAffineTerm o) {
			o.setExpression((AffineExpression)children[0]);
		
			/*PROTECTED REGION ID(setter_quasiAffine_SimpleQuasiAffineTerm) ENABLED START*/
			/*PROTECTED REGION END*/
		
			return o;
		}
		
		public Object caseNestedQuasiAffineTerm(NestedQuasiAffineTerm o) {
			o.setExpression((QuasiAffineExpression)children[0]);
		
			/*PROTECTED REGION ID(setter_quasiAffine_NestedQuasiAffineTerm) ENABLED START*/
			/*PROTECTED REGION END*/
		
			return o;
		}
	}

	public <T> T setChildAt(T o, int i, Object obj) {
		throw new RuntimeException("Not implemented");
	}
}
