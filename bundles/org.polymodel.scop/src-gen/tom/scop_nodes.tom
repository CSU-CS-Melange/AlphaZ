/* PROTECTED REGION ID(module_nodes_user) ENABLED START */
// Protected user region
/* PROTECTED REGION END */


%op ScopRoot root(statements : nodes) {
	/*PROTECTED REGION ID(tom_operator_with_param_root) DISABLED START*/
	//make sure to change to ENABLED when using protected region
	is_fsym(t) {$t instanceof ScopRoot}
	get_slot(statements,t) {enforce(((ScopRoot)$t).getStatements())}
	make(_statements) {org.polymodel.scop.internal.ScopTomFactory.createRoot($_statements)}
	/*PROTECTED REGION END*/
}

%op node loop(iterator : V, LB : E, UB : E, stride : E, body : node) {
	/*PROTECTED REGION ID(tom_operator_with_param_loop) DISABLED START*/
	//make sure to change to ENABLED when using protected region
	is_fsym(t) {$t instanceof ScopFor}
	get_slot(iterator,t) {((ScopFor)$t).getIterator()}
	get_slot(LB,t) {((ScopFor)$t).getLB()}
	get_slot(UB,t) {((ScopFor)$t).getUB()}
	get_slot(stride,t) {((ScopFor)$t).getStride()}
	get_slot(body,t) {((ScopFor)$t).getBody()}
	make(_iterator,_LB,_UB,_stride,_body) {org.polymodel.scop.internal.ScopTomFactory.createLoop($_iterator, $_LB, $_UB, $_stride, $_body)}
	/*PROTECTED REGION END*/
}

%op node block(statements : nodes) {
	/*PROTECTED REGION ID(tom_operator_with_param_block) DISABLED START*/
	//make sure to change to ENABLED when using protected region
	is_fsym(t) {$t instanceof ScopBlock}
	get_slot(statements,t) {enforce(((ScopBlock)$t).getStatements())}
	make(_statements) {org.polymodel.scop.internal.ScopTomFactory.createBlock($_statements)}
	/*PROTECTED REGION END*/
}

%op node guard(constraintSystems : ICSList, thenBody : node, elseBody : node) {
	/*PROTECTED REGION ID(tom_operator_with_param_guard) DISABLED START*/
	//make sure to change to ENABLED when using protected region
	is_fsym(t) {$t instanceof ScopGuard}
	get_slot(constraintSystems,t) {enforce(((ScopGuard)$t).getConstraintSystems())}
	get_slot(thenBody,t) {((ScopGuard)$t).getThenBody()}
	get_slot(elseBody,t) {((ScopGuard)$t).getElseBody()}
	make(_constraintSystems,_thenBody,_elseBody) {org.polymodel.scop.internal.ScopTomFactory.createGuard($_constraintSystems, $_thenBody, $_elseBody)}
	/*PROTECTED REGION END*/
}

%op node stmtMacro(name : String, macroParams : EL) {
	/*PROTECTED REGION ID(tom_operator_with_param_stmtMacro) DISABLED START*/
	//make sure to change to ENABLED when using protected region
	is_fsym(t) {$t instanceof ScopStatementMacro}
	get_slot(name,t) {((ScopStatementMacro)$t).getName()}
	get_slot(macroParams,t) {enforce(((ScopStatementMacro)$t).getMacroParams())}
	make(_name,_macroParams) {org.polymodel.scop.internal.ScopTomFactory.createStmtMacro($_name, $_macroParams)}
	/*PROTECTED REGION END*/
}

%op node unscanned(name : String, macroParams : EL, schedule : JNIISLUnionMap) {
	/*PROTECTED REGION ID(tom_operator_with_param_unscanned) DISABLED START*/
	//make sure to change to ENABLED when using protected region
	is_fsym(t) {$t instanceof ScopUnscannedDomain}
	get_slot(name,t) {((ScopUnscannedDomain)$t).getName()}
	get_slot(macroParams,t) {enforce(((ScopUnscannedDomain)$t).getMacroParams())}
	get_slot(schedule,t) {((ScopUnscannedDomain)$t).getSchedule()}
	make(_name,_macroParams,_schedule) {org.polymodel.scop.internal.ScopTomFactory.createUnscanned($_name, $_macroParams, $_schedule)}
	/*PROTECTED REGION END*/
}

%op node assignment(LHS : V, RHS : E) {
	/*PROTECTED REGION ID(tom_operator_with_param_assignment) DISABLED START*/
	//make sure to change to ENABLED when using protected region
	is_fsym(t) {$t instanceof ScopAssignment}
	get_slot(LHS,t) {((ScopAssignment)$t).getLHS()}
	get_slot(RHS,t) {((ScopAssignment)$t).getRHS()}
	make(_LHS,_RHS) {org.polymodel.scop.internal.ScopTomFactory.createAssignment($_LHS, $_RHS)}
	/*PROTECTED REGION END*/
}
