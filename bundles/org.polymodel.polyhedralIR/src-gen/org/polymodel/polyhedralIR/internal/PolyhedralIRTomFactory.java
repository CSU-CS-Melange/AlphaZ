package org.polymodel.polyhedralIR.internal;

import java.util.List;

import org.polymodel.polyhedralIR.AffineFunction;
import org.polymodel.polyhedralIR.AffineSystem;
import org.polymodel.polyhedralIR.Domain;
import org.polymodel.polyhedralIR.Expression;
import org.polymodel.polyhedralIR.ExternalFunctionDeclaration;
import org.polymodel.polyhedralIR.OP;
import org.polymodel.polyhedralIR.ParameterDomain;
import org.polymodel.polyhedralIR.PolyhedralIRFactory;
import org.polymodel.polyhedralIR.Program;
import org.polymodel.polyhedralIR.StandardEquation;
import org.polymodel.polyhedralIR.UseEquation;
import org.polymodel.polyhedralIR.VariableDeclaration;
import org.polymodel.polyhedralIR.VariableIdentifier;
import org.polymodel.polyhedralIR.expression.BinaryExpression;
import org.polymodel.polyhedralIR.expression.BooleanExpression;
import org.polymodel.polyhedralIR.expression.CaseExpression;
import org.polymodel.polyhedralIR.expression.DependenceExpression;
import org.polymodel.polyhedralIR.expression.ExpressionFactory;
import org.polymodel.polyhedralIR.expression.ExternalFunctionCall;
import org.polymodel.polyhedralIR.expression.IfExpression;
import org.polymodel.polyhedralIR.expression.IndexExpression;
import org.polymodel.polyhedralIR.expression.IntegerExpression;
import org.polymodel.polyhedralIR.expression.MultiArgExpression;
import org.polymodel.polyhedralIR.expression.RealExpression;
import org.polymodel.polyhedralIR.expression.ReduceExpression;
import org.polymodel.polyhedralIR.expression.RestrictExpression;
import org.polymodel.polyhedralIR.expression.UnaryExpression;
import org.polymodel.polyhedralIR.expression.VariableExpression;

/* PROTECTED REGION ID(polyhedralIR_tom_factory_imports) ENABLED START */
// protected imports, you should add here required imports that won't be removed after regeneration of the maping code
/* PROTECTED REGION END */

/**
* Factory used by TOM for polyhedralIR mapping.
* It shouldn't be visible outside of the plugin
* -- Generated by TOM mapping EMF generator --
*/

public class PolyhedralIRTomFactory {

	/* PROTECTED REGION ID(polyhedralIR_tom_factory_members) ENABLED START */
	/* PROTECTED REGION END */
	
 	public static PolyhedralIRFactory polyhedralIRFactory = PolyhedralIRFactory.eINSTANCE;
 	public static ExpressionFactory expressionFactory = ExpressionFactory.eINSTANCE;


	// User operators
	// CreateOperatorWithParameters program
	public static Program createProgram(List<AffineSystem> _systems, List<ExternalFunctionDeclaration> _externalFunctionDeclarations) {
		Program o = polyhedralIRFactory.createProgram();
		for(int i=0; i<_systems.size(); i++) {
			o.getSystems().add((AffineSystem) _systems.get(i));
		}
		for(int i=0; i<_externalFunctionDeclarations.size(); i++) {
			o.getExternalFunctionDeclarations().add((ExternalFunctionDeclaration) _externalFunctionDeclarations.get(i));
		}
		
		/* PROTECTED REGION ID(polyhedralIR_tom_factory_class_op_program) ENABLED START */
		/* PROTECTED REGION END */
		
		return o;
	}
	
	// CreateOperatorWithParameters system
	public static AffineSystem createSystem(String _name, ParameterDomain _parameters, List<VariableDeclaration> _inputs, List<VariableDeclaration> _outputs, List<VariableDeclaration> _locals, List<StandardEquation> _equations, List<UseEquation> _useEquations) {
		AffineSystem o = polyhedralIRFactory.createAffineSystem();
		o.setName(_name);
		o.setParameters((ParameterDomain) _parameters);
		for(int i=0; i<_inputs.size(); i++) {
			o.getInputs().add((VariableDeclaration) _inputs.get(i));
		}
		for(int i=0; i<_outputs.size(); i++) {
			o.getOutputs().add((VariableDeclaration) _outputs.get(i));
		}
		for(int i=0; i<_locals.size(); i++) {
			o.getLocals().add((VariableDeclaration) _locals.get(i));
		}
		for(int i=0; i<_equations.size(); i++) {
			o.getEquations().add((StandardEquation) _equations.get(i));
		}
		for(int i=0; i<_useEquations.size(); i++) {
			o.getUseEquations().add((UseEquation) _useEquations.get(i));
		}
		
		/* PROTECTED REGION ID(polyhedralIR_tom_factory_class_op_system) ENABLED START */
		/* PROTECTED REGION END */
		
		return o;
	}
	
	// CreateOperatorWithParameters varDecl
	public static VariableDeclaration createVarDecl(VariableIdentifier _varID, Domain _domain) {
		VariableDeclaration o = polyhedralIRFactory.createVariableDeclaration();
		o.setVarID((VariableIdentifier) _varID);
		o.setDomain((Domain) _domain);
		
		/* PROTECTED REGION ID(polyhedralIR_tom_factory_class_op_varDecl) ENABLED START */
		/* PROTECTED REGION END */
		
		return o;
	}
	
	// CreateOperatorWithParameters var
	public static VariableExpression createVar(VariableDeclaration _varDecl) {
		VariableExpression o = expressionFactory.createVariableExpression();
		o.setVarDecl((VariableDeclaration) _varDecl);
		
		/* PROTECTED REGION ID(polyhedralIR_tom_factory_class_op_var) ENABLED START */
		/* PROTECTED REGION END */
		
		return o;
	}
	
	// CreateOperatorWithParameters eq
	public static StandardEquation createEq(VariableDeclaration _variable, Expression _expression) {
		StandardEquation o = polyhedralIRFactory.createStandardEquation();
		o.setVariable((VariableDeclaration) _variable);
		o.setExpression((Expression) _expression);
		
		/* PROTECTED REGION ID(polyhedralIR_tom_factory_class_op_eq) ENABLED START */
		/* PROTECTED REGION END */
		
		return o;
	}
	
	// CreateOperatorWithParameters ueq
	public static UseEquation createUeq(Domain _extensionDomain, AffineFunction _parameters, AffineSystem _subSystem, List<Expression> _inputs, List<VariableDeclaration> _outputs, String _label) {
		UseEquation o = polyhedralIRFactory.createUseEquation();
		o.setExtensionDomain((Domain) _extensionDomain);
		o.setParameters((AffineFunction) _parameters);
		o.setSubSystem((AffineSystem) _subSystem);
		for(int i=0; i<_inputs.size(); i++) {
			o.getInputs().add((Expression) _inputs.get(i));
		}
		for(int i=0; i<_outputs.size(); i++) {
			o.getOutputs().add((VariableDeclaration) _outputs.get(i));
		}
		o.setLabel(_label);
		
		/* PROTECTED REGION ID(polyhedralIR_tom_factory_class_op_ueq) ENABLED START */
		/* PROTECTED REGION END */
		
		return o;
	}
	
	// CreateOperatorWithParameters boolConst
	public static BooleanExpression createBoolConst(boolean _value) {
		BooleanExpression o = expressionFactory.createBooleanExpression();
		o.setValue(_value);
		
		/* PROTECTED REGION ID(polyhedralIR_tom_factory_class_op_boolConst) ENABLED START */
		/* PROTECTED REGION END */
		
		return o;
	}
	
	// CreateOperatorWithParameters intConst
	public static IntegerExpression createIntConst(long _value) {
		IntegerExpression o = expressionFactory.createIntegerExpression();
		o.setValue(_value);
		
		/* PROTECTED REGION ID(polyhedralIR_tom_factory_class_op_intConst) ENABLED START */
		/* PROTECTED REGION END */
		
		return o;
	}
	
	// CreateOperatorWithParameters realConst
	public static RealExpression createRealConst(double _value) {
		RealExpression o = expressionFactory.createRealExpression();
		o.setValue(_value);
		
		/* PROTECTED REGION ID(polyhedralIR_tom_factory_class_op_realConst) ENABLED START */
		/* PROTECTED REGION END */
		
		return o;
	}
	
	// CreateOperatorWithParameters reduce
	public static ReduceExpression createReduce(OP _OP, AffineFunction _projection, Expression _expr) {
		ReduceExpression o = expressionFactory.createReduceExpression();
		o.setOP((OP) _OP);
		o.setProjection((AffineFunction) _projection);
		o.setExpr((Expression) _expr);
		
		/* PROTECTED REGION ID(polyhedralIR_tom_factory_class_op_reduce) ENABLED START */
		/* PROTECTED REGION END */
		
		return o;
	}
	
	// CreateOperatorWithParameters caseExpr
	public static CaseExpression createCaseExpr(List<Expression> _exprs) {
		CaseExpression o = expressionFactory.createCaseExpression();
		for(int i=0; i<_exprs.size(); i++) {
			o.getExprs().add((Expression) _exprs.get(i));
		}
		
		/* PROTECTED REGION ID(polyhedralIR_tom_factory_class_op_caseExpr) ENABLED START */
		/* PROTECTED REGION END */
		
		return o;
	}
	
	// CreateOperatorWithParameters ifExpr
	public static IfExpression createIfExpr(Expression _cond, Expression _then, Expression _else) {
		IfExpression o = expressionFactory.createIfExpression();
		o.setCond((Expression) _cond);
		o.setThen((Expression) _then);
		o.setElse((Expression) _else);
		
		/* PROTECTED REGION ID(polyhedralIR_tom_factory_class_op_ifExpr) ENABLED START */
		/* PROTECTED REGION END */
		
		return o;
	}
	
	// CreateOperatorWithParameters restrictExpr
	public static RestrictExpression createRestrictExpr(Domain _restrictDomain, Expression _expr) {
		RestrictExpression o = expressionFactory.createRestrictExpression();
		o.setRestrictDomain((Domain) _restrictDomain);
		o.setExpr((Expression) _expr);
		
		/* PROTECTED REGION ID(polyhedralIR_tom_factory_class_op_restrictExpr) ENABLED START */
		/* PROTECTED REGION END */
		
		return o;
	}
	
	// CreateOperatorWithParameters depExpr
	public static DependenceExpression createDepExpr(AffineFunction _dep, Expression _expr) {
		DependenceExpression o = expressionFactory.createDependenceExpression();
		o.setDep((AffineFunction) _dep);
		o.setExpr((Expression) _expr);
		
		/* PROTECTED REGION ID(polyhedralIR_tom_factory_class_op_depExpr) ENABLED START */
		/* PROTECTED REGION END */
		
		return o;
	}
	
	// CreateOperatorWithParameters indexExpr
	public static IndexExpression createIndexExpr(AffineFunction _function) {
		IndexExpression o = expressionFactory.createIndexExpression();
		o.setFunction((AffineFunction) _function);
		
		/* PROTECTED REGION ID(polyhedralIR_tom_factory_class_op_indexExpr) ENABLED START */
		/* PROTECTED REGION END */
		
		return o;
	}
	
	// CreateOperatorWithParameters binOp
	public static BinaryExpression createBinOp(OP _operator, Expression _lexp, Expression _rexp) {
		BinaryExpression o = expressionFactory.createBinaryExpression();
		o.setOperator((OP) _operator);
		o.setLexp((Expression) _lexp);
		o.setRexp((Expression) _rexp);
		
		/* PROTECTED REGION ID(polyhedralIR_tom_factory_class_op_binOp) ENABLED START */
		/* PROTECTED REGION END */
		
		return o;
	}
	
	// CreateOperatorWithParameters binAdd
	public static BinaryExpression createBinAdd(Expression _lexp, Expression _rexp) {
		BinaryExpression o = expressionFactory.createBinaryExpression();
		o.setLexp((Expression) _lexp);
		o.setRexp((Expression) _rexp);
		o.setOperator(OP.ADD);
		
		/* PROTECTED REGION ID(polyhedralIR_tom_factory_class_op_binAdd) ENABLED START */
		/* PROTECTED REGION END */
		
		return o;
	}
	
	// CreateOperatorWithParameters binSub
	public static BinaryExpression createBinSub(Expression _lexp, Expression _rexp) {
		BinaryExpression o = expressionFactory.createBinaryExpression();
		o.setLexp((Expression) _lexp);
		o.setRexp((Expression) _rexp);
		o.setOperator(OP.SUB);
		
		/* PROTECTED REGION ID(polyhedralIR_tom_factory_class_op_binSub) ENABLED START */
		/* PROTECTED REGION END */
		
		return o;
	}
	
	// CreateOperatorWithParameters binMul
	public static BinaryExpression createBinMul(Expression _lexp, Expression _rexp) {
		BinaryExpression o = expressionFactory.createBinaryExpression();
		o.setLexp((Expression) _lexp);
		o.setRexp((Expression) _rexp);
		o.setOperator(OP.MUL);
		
		/* PROTECTED REGION ID(polyhedralIR_tom_factory_class_op_binMul) ENABLED START */
		/* PROTECTED REGION END */
		
		return o;
	}
	
	// CreateOperatorWithParameters binEq
	public static BinaryExpression createBinEq(Expression _lexp, Expression _rexp) {
		BinaryExpression o = expressionFactory.createBinaryExpression();
		o.setLexp((Expression) _lexp);
		o.setRexp((Expression) _rexp);
		o.setOperator(OP.EQ);
		
		/* PROTECTED REGION ID(polyhedralIR_tom_factory_class_op_binEq) ENABLED START */
		/* PROTECTED REGION END */
		
		return o;
	}
	
	// CreateOperatorWithParameters unaryOp
	public static UnaryExpression createUnaryOp(OP _operator, Expression _expr) {
		UnaryExpression o = expressionFactory.createUnaryExpression();
		o.setOperator((OP) _operator);
		o.setExpr((Expression) _expr);
		
		/* PROTECTED REGION ID(polyhedralIR_tom_factory_class_op_unaryOp) ENABLED START */
		/* PROTECTED REGION END */
		
		return o;
	}
	
	// CreateOperatorWithParameters unaryMinus
	public static UnaryExpression createUnaryMinus(Expression _expr) {
		UnaryExpression o = expressionFactory.createUnaryExpression();
		o.setExpr((Expression) _expr);
		o.setOperator(OP.SUB);
		
		/* PROTECTED REGION ID(polyhedralIR_tom_factory_class_op_unaryMinus) ENABLED START */
		/* PROTECTED REGION END */
		
		return o;
	}
	
	// CreateOperatorWithParameters multOp
	public static MultiArgExpression createMultOp(OP _operator, List<Expression> _exprs) {
		MultiArgExpression o = expressionFactory.createMultiArgExpression();
		o.setOperator((OP) _operator);
		for(int i=0; i<_exprs.size(); i++) {
			o.getExprs().add((Expression) _exprs.get(i));
		}
		
		/* PROTECTED REGION ID(polyhedralIR_tom_factory_class_op_multOp) ENABLED START */
		/* PROTECTED REGION END */
		
		return o;
	}
	
	// CreateOperatorWithParameters externalCall
	public static ExternalFunctionCall createExternalCall(OP _operator, List<Expression> _exprs, ExternalFunctionDeclaration _exFunc) {
		ExternalFunctionCall o = expressionFactory.createExternalFunctionCall();
		o.setOperator((OP) _operator);
		for(int i=0; i<_exprs.size(); i++) {
			o.getExprs().add((Expression) _exprs.get(i));
		}
		o.setExFunc((ExternalFunctionDeclaration) _exFunc);
		
		/* PROTECTED REGION ID(polyhedralIR_tom_factory_class_op_externalCall) ENABLED START */
		/* PROTECTED REGION END */
		
		return o;
	}
	
	// CreateOperatorWithParameters val
	public static IndexExpression createVal(AffineFunction _function) {
		IndexExpression o = expressionFactory.createIndexExpression();
		o.setFunction((AffineFunction) _function);
		
		/* PROTECTED REGION ID(polyhedralIR_tom_factory_class_op_val) ENABLED START */
		/* PROTECTED REGION END */
		
		return o;
	}


	/*
	* Default TOM operators for polyhedralIR mapping. Each class that has a terminal type has also a default create function.
	*/
	
}
