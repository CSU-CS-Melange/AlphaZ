package tom.mapping.introspectors.polyhedralIR;

import java.util.ArrayList;
import java.util.List;

import org.eclipse.emf.ecore.EObject;
import org.polymodel.polyhedralIR.AffineFunction;
import org.polymodel.polyhedralIR.AffineSystem;
import org.polymodel.polyhedralIR.Domain;
import org.polymodel.polyhedralIR.Expression;
import org.polymodel.polyhedralIR.ParameterDomain;
import org.polymodel.polyhedralIR.PolyhedralIRPackage;
import org.polymodel.polyhedralIR.Program;
import org.polymodel.polyhedralIR.StandardEquation;
import org.polymodel.polyhedralIR.UseEquation;
import org.polymodel.polyhedralIR.VariableDeclaration;
import org.polymodel.polyhedralIR.VariableIdentifier;
import org.polymodel.polyhedralIR.util.PolyhedralIRSwitch;

import tom.library.sl.Introspector;
import tom.mapping.IntrospectorManager;

/* PROTECTED REGION ID(introspector_imports) ENABLED START */
// protected imports
/* PROTECTED REGION END */

/**
* TOM introspector for polyhedralIR.
* -- Autogenerated by TOM mapping EMF genrator --
*/

public class PolyhedralIRIntrospector implements Introspector {
	
	public static final PolyhedralIRIntrospector INSTANCE = new PolyhedralIRIntrospector();
	
	static {
		IntrospectorManager.INSTANCE.register(PolyhedralIRPackage.eINSTANCE, INSTANCE);
	}

	/* PROTECTED REGION ID(introspector_members) ENABLED START */
	/* PROTECTED REGION END */
	
	protected PolyhedralIRIntrospector() {}
	
	public Object getChildAt(Object o, int i) {
		return getChildren(o)[i];
	}
	
	public int getChildCount(Object o) {
		return getChildren(o).length;
	}
	
	@SuppressWarnings("unchecked")
	public Object[] getChildren(Object arg0) {
		List<Object> l = new ArrayList<Object>();
		if (arg0 instanceof List) {
			// Children of a list are its content
			for(Object object : (List<Object>) arg0) {
				l.add(object);
			}
			return l.toArray();
		}
		return PolyhedralIRChildrenGetter.INSTANCE.children(arg0);
	}
	
	private static class PolyhedralIRChildrenGetter extends PolyhedralIRSwitch<Object[]> {
		public final static PolyhedralIRChildrenGetter INSTANCE = new PolyhedralIRChildrenGetter();
		
		private PolyhedralIRChildrenGetter(){}
		
		public Object[] children(Object i) {
			Object[] children = doSwitch((EObject) i);
			return children != null ? children : new Object[0];
		}
		
		public Object[] caseProgram(Program o) {
			List<Object> l = new ArrayList<Object>();
			if (o.getExternalFunctionDeclarations() != null)
				l.add(o.getExternalFunctionDeclarations());
			if (o.getSystems() != null)
				l.add(o.getSystems());
			
			/*PROTECTED REGION ID(getter_polyhedralIR_Program) ENABLED START*/
			/*PROTECTED REGION END*/
			
			return l.toArray();
		}
		
		public Object[] caseAffineSystem(AffineSystem o) {
			List<Object> l = new ArrayList<Object>();
			if (o.getParameters() != null)
				l.add(o.getParameters());
			if (o.getInputs() != null)
				l.add(o.getInputs());
			if (o.getOutputs() != null)
				l.add(o.getOutputs());
			if (o.getLocals() != null)
				l.add(o.getLocals());
			if (o.getEquations() != null)
				l.add(o.getEquations());
			if (o.getUseEquations() != null)
				l.add(o.getUseEquations());
			
			/*PROTECTED REGION ID(getter_polyhedralIR_AffineSystem) ENABLED START*/
			/*PROTECTED REGION END*/
			
			return l.toArray();
		}
		
		public Object[] caseVariableDeclaration(VariableDeclaration o) {
			List<Object> l = new ArrayList<Object>();
			if (o.getVarID() != null)
				l.add(o.getVarID());
			if (o.getDomain() != null)
				l.add(o.getDomain());
			
			/*PROTECTED REGION ID(getter_polyhedralIR_VariableDeclaration) ENABLED START*/
			/*PROTECTED REGION END*/
			
			return l.toArray();
		}
		
		public Object[] caseUseEquation(UseEquation o) {
			List<Object> l = new ArrayList<Object>();
			if (o.getExtensionDomain() != null)
				l.add(o.getExtensionDomain());
			if (o.getParameters() != null)
				l.add(o.getParameters());
			if (o.getInputs() != null)
				l.add(o.getInputs());
			if (o.getOutputs() != null)
				l.add(o.getOutputs());
			if (o.getSubSystem() != null)
				l.add(o.getSubSystem());
			
			/*PROTECTED REGION ID(getter_polyhedralIR_UseEquation) ENABLED START*/
			/*PROTECTED REGION END*/
			
			return l.toArray();
		}
		
		public Object[] caseStandardEquation(StandardEquation o) {
			List<Object> l = new ArrayList<Object>();
			if (o.getVariable() != null)
				l.add(o.getVariable());
			if (o.getExpression() != null)
				l.add(o.getExpression());
			
			/*PROTECTED REGION ID(getter_polyhedralIR_StandardEquation) ENABLED START*/
			/*PROTECTED REGION END*/
			
			return l.toArray();
		}
	}
	
	@SuppressWarnings("unchecked")
	public <T> T setChildren(T arg0, Object[] arg1) {
		if (arg0 instanceof List) {
			// If object is a list then content of the original list has to be replaced
			List<Object> list = (List<Object>) arg0;
			list.clear();
			for (int i = 0; i < arg1.length; i++) {
				list.add(arg1[i]);
			}
			return arg0;
		} else {
			return (T) PolyhedralIRChildrenSetter.INSTANCE.set(arg0, arg1);
		}
	}
	
	private static class PolyhedralIRChildrenSetter extends PolyhedralIRSwitch<Object> {
		public final static PolyhedralIRChildrenSetter INSTANCE = new PolyhedralIRChildrenSetter();
		
		private Object[] children;
		private PolyhedralIRChildrenSetter(){}
		
		public Object set(Object i, Object[] children) {
			this.children = children;
			return doSwitch((EObject) i);
		}
		
		public Object caseAffineSystem(AffineSystem o) {
			o.setParameters((ParameterDomain)children[0]);
		
			/*PROTECTED REGION ID(setter_polyhedralIR_AffineSystem) ENABLED START*/
			/*PROTECTED REGION END*/
		
			return o;
		}
		
		public Object caseVariableDeclaration(VariableDeclaration o) {
			o.setVarID((VariableIdentifier)children[0]);
			o.setDomain((Domain)children[1]);
		
			/*PROTECTED REGION ID(setter_polyhedralIR_VariableDeclaration) ENABLED START*/
			/*PROTECTED REGION END*/
		
			return o;
		}
		
		public Object caseUseEquation(UseEquation o) {
			o.setExtensionDomain((Domain)children[0]);
			o.setParameters((AffineFunction)children[1]);
			o.setSubSystem((AffineSystem)children[2]);
		
			/*PROTECTED REGION ID(setter_polyhedralIR_UseEquation) ENABLED START*/
			/*PROTECTED REGION END*/
		
			return o;
		}
		
		public Object caseStandardEquation(StandardEquation o) {
			o.setVariable((VariableDeclaration)children[0]);
			o.setExpression((Expression)children[1]);
		
			/*PROTECTED REGION ID(setter_polyhedralIR_StandardEquation) ENABLED START*/
			/*PROTECTED REGION END*/
		
			return o;
		}
	}

	public <T> T setChildAt(T o, int i, Object obj) {
		throw new RuntimeException("Not implemented");
	}
}
