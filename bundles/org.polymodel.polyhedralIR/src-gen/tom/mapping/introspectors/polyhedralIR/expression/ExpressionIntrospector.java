package tom.mapping.introspectors.polyhedralIR.expression;

import java.util.ArrayList;
import java.util.List;

import org.eclipse.emf.ecore.EObject;
import org.polymodel.polyhedralIR.AffineFunction;
import org.polymodel.polyhedralIR.Domain;
import org.polymodel.polyhedralIR.Expression;
import org.polymodel.polyhedralIR.ExternalFunctionDeclaration;
import org.polymodel.polyhedralIR.VariableDeclaration;
import org.polymodel.polyhedralIR.expression.BinaryExpression;
import org.polymodel.polyhedralIR.expression.CaseExpression;
import org.polymodel.polyhedralIR.expression.DependenceExpression;
import org.polymodel.polyhedralIR.expression.ExpressionPackage;
import org.polymodel.polyhedralIR.expression.ExternalFunctionCall;
import org.polymodel.polyhedralIR.expression.IfExpression;
import org.polymodel.polyhedralIR.expression.IndexExpression;
import org.polymodel.polyhedralIR.expression.MultiArgExpression;
import org.polymodel.polyhedralIR.expression.ReduceExpression;
import org.polymodel.polyhedralIR.expression.RestrictExpression;
import org.polymodel.polyhedralIR.expression.UnaryExpression;
import org.polymodel.polyhedralIR.expression.VariableExpression;
import org.polymodel.polyhedralIR.expression.util.ExpressionSwitch;
/* PROTECTED REGION ID(introspector_imports) ENABLED START */
// protected imports
import org.polymodel.polyhedralIR.transformation.Normalize;
/* PROTECTED REGION END */

import tom.library.sl.Introspector;
import tom.mapping.IntrospectorManager;

/**
* TOM introspector for polyhedralIR.
* -- Autogenerated by TOM mapping EMF genrator --
*/

public class ExpressionIntrospector implements Introspector {
	
	public static final ExpressionIntrospector INSTANCE = new ExpressionIntrospector();
	
	static {
		IntrospectorManager.INSTANCE.register(ExpressionPackage.eINSTANCE, INSTANCE);
	}

	/* PROTECTED REGION ID(introspector_members) ENABLED START */
	public static boolean REMOVE_EMPTY_BRANCH_AT_SETTER = false;
	/* PROTECTED REGION END */
	
	protected ExpressionIntrospector() {}
	
	public Object getChildAt(Object o, int i) {
		return getChildren(o)[i];
	}
	
	public int getChildCount(Object o) {
		return getChildren(o).length;
	}
	
	@SuppressWarnings("unchecked")
	public Object[] getChildren(Object arg0) {
		List<Object> l = new ArrayList<Object>();
		if (arg0 instanceof List) {
			// Children of a list are its content
			for(Object object : (List<Object>) arg0) {
				l.add(object);
			}
			return l.toArray();
		}
		return ExpressionChildrenGetter.INSTANCE.children(arg0);
	}
	
	private static class ExpressionChildrenGetter extends ExpressionSwitch<Object[]> {
		public final static ExpressionChildrenGetter INSTANCE = new ExpressionChildrenGetter();
		
		private ExpressionChildrenGetter(){}
		
		public Object[] children(Object i) {
			Object[] children = doSwitch((EObject) i);
			return children != null ? children : new Object[0];
		}
		
		public Object[] caseCaseExpression(CaseExpression o) {
			List<Object> l = new ArrayList<Object>();
			if (o.getExprs() != null)
				l.add(o.getExprs());
			
			/*PROTECTED REGION ID(getter_expression_CaseExpression) ENABLED START*/
			/*PROTECTED REGION END*/
			
			return l.toArray();
		}
		
		public Object[] caseDependenceExpression(DependenceExpression o) {
			List<Object> l = new ArrayList<Object>();
			if (o.getDep() != null)
				l.add(o.getDep());
			if (o.getExpr() != null)
				l.add(o.getExpr());
			
			/*PROTECTED REGION ID(getter_expression_DependenceExpression) ENABLED START*/
			/*PROTECTED REGION END*/
			
			return l.toArray();
		}
		
		public Object[] caseIfExpression(IfExpression o) {
			List<Object> l = new ArrayList<Object>();
			if (o.getCond() != null)
				l.add(o.getCond());
			if (o.getThen() != null)
				l.add(o.getThen());
			if (o.getElse() != null)
				l.add(o.getElse());
			
			/*PROTECTED REGION ID(getter_expression_IfExpression) ENABLED START*/
			/*PROTECTED REGION END*/
			
			return l.toArray();
		}
		
		public Object[] caseIndexExpression(IndexExpression o) {
			List<Object> l = new ArrayList<Object>();
			if (o.getFunction() != null)
				l.add(o.getFunction());
			
			/*PROTECTED REGION ID(getter_expression_IndexExpression) ENABLED START*/
			/*PROTECTED REGION END*/
			
			return l.toArray();
		}
		
		public Object[] caseReduceExpression(ReduceExpression o) {
			List<Object> l = new ArrayList<Object>();
			if (o.getProjection() != null)
				l.add(o.getProjection());
			if (o.getExpr() != null)
				l.add(o.getExpr());
			
			/*PROTECTED REGION ID(getter_expression_ReduceExpression) ENABLED START*/
			/*PROTECTED REGION END*/
			
			return l.toArray();
		}
		
		public Object[] caseRestrictExpression(RestrictExpression o) {
			List<Object> l = new ArrayList<Object>();
			if (o.getRestrictDomain() != null)
				l.add(o.getRestrictDomain());
			if (o.getExpr() != null)
				l.add(o.getExpr());
			
			/*PROTECTED REGION ID(getter_expression_RestrictExpression) ENABLED START*/
			/*PROTECTED REGION END*/
			
			return l.toArray();
		}
		
		public Object[] caseVariableExpression(VariableExpression o) {
			List<Object> l = new ArrayList<Object>();
			if (o.getVarDecl() != null)
				l.add(o.getVarDecl());
			
			/*PROTECTED REGION ID(getter_expression_VariableExpression) ENABLED START*/
			/*PROTECTED REGION END*/
			
			return l.toArray();
		}
		
		public Object[] caseBinaryExpression(BinaryExpression o) {
			List<Object> l = new ArrayList<Object>();
			if (o.getLexp() != null)
				l.add(o.getLexp());
			if (o.getRexp() != null)
				l.add(o.getRexp());
			
			/*PROTECTED REGION ID(getter_expression_BinaryExpression) ENABLED START*/
			/*PROTECTED REGION END*/
			
			return l.toArray();
		}
		
		public Object[] caseMultiArgExpression(MultiArgExpression o) {
			List<Object> l = new ArrayList<Object>();
			if (o.getExprs() != null)
				l.add(o.getExprs());
			
			/*PROTECTED REGION ID(getter_expression_MultiArgExpression) ENABLED START*/
			/*PROTECTED REGION END*/
			
			return l.toArray();
		}
		
		public Object[] caseExternalFunctionCall(ExternalFunctionCall o) {
			List<Object> l = new ArrayList<Object>();
			if (o.getExprs() != null)
				l.add(o.getExprs());
			if (o.getExFunc() != null)
				l.add(o.getExFunc());
			
			/*PROTECTED REGION ID(getter_expression_ExternalFunctionCall) ENABLED START*/
			/*PROTECTED REGION END*/
			
			return l.toArray();
		}
		
		public Object[] caseUnaryExpression(UnaryExpression o) {
			List<Object> l = new ArrayList<Object>();
			if (o.getExpr() != null)
				l.add(o.getExpr());
			
			/*PROTECTED REGION ID(getter_expression_UnaryExpression) ENABLED START*/
			/*PROTECTED REGION END*/
			
			return l.toArray();
		}
	}
	
	@SuppressWarnings("unchecked")
	public <T> T setChildren(T arg0, Object[] arg1) {
		if (arg0 instanceof List) {
			// If object is a list then content of the original list has to be replaced
			List<Object> list = (List<Object>) arg0;
			list.clear();
			for (int i = 0; i < arg1.length; i++) {
				list.add(arg1[i]);
			}
			return arg0;
		} else {
			return (T) ExpressionChildrenSetter.INSTANCE.set(arg0, arg1);
		}
	}
	
	private static class ExpressionChildrenSetter extends ExpressionSwitch<Object> {
		public final static ExpressionChildrenSetter INSTANCE = new ExpressionChildrenSetter();
		
		private Object[] children;
		private ExpressionChildrenSetter(){}
		
		public Object set(Object i, Object[] children) {
			this.children = children;
			return doSwitch((EObject) i);
		}
		
		public Object caseDependenceExpression(DependenceExpression o) {
			o.setDep((AffineFunction)children[0]);
			o.setExpr((Expression)children[1]);
		
			/*PROTECTED REGION ID(setter_expression_DependenceExpression) ENABLED START*/
			if (REMOVE_EMPTY_BRANCH_AT_SETTER) {
				o.setExpr(Normalize.removeEmptyBranch(o.getExpr()));
			}
			/*PROTECTED REGION END*/
		
			return o;
		}
		
		public Object caseIfExpression(IfExpression o) {
			o.setCond((Expression)children[0]);
			o.setThen((Expression)children[1]);
			o.setElse((Expression)children[2]);
		
			/*PROTECTED REGION ID(setter_expression_IfExpression) ENABLED START*/
			if (REMOVE_EMPTY_BRANCH_AT_SETTER) {
				o.setCond(Normalize.removeEmptyBranch(o.getCond()));
				o.setThen(Normalize.removeEmptyBranch(o.getThen()));
				o.setElse(Normalize.removeEmptyBranch(o.getElse()));
			}
			/*PROTECTED REGION END*/
		
			return o;
		}
		
		public Object caseIndexExpression(IndexExpression o) {
			o.setFunction((AffineFunction)children[0]);
		
			/*PROTECTED REGION ID(setter_expression_IndexExpression) ENABLED START*/
			/*PROTECTED REGION END*/
		
			return o;
		}
		
		public Object caseReduceExpression(ReduceExpression o) {
			o.setProjection((AffineFunction)children[0]);
			o.setExpr((Expression)children[1]);
		
			/*PROTECTED REGION ID(setter_expression_ReduceExpression) ENABLED START*/
			if (REMOVE_EMPTY_BRANCH_AT_SETTER) {
				o.setExpr(Normalize.removeEmptyBranch(o.getExpr()));
			}
			/*PROTECTED REGION END*/
		
			return o;
		}
		
		public Object caseRestrictExpression(RestrictExpression o) {
			o.setRestrictDomain((Domain)children[0]);
			o.setExpr((Expression)children[1]);
		
			/*PROTECTED REGION ID(setter_expression_RestrictExpression) ENABLED START*/
			if (REMOVE_EMPTY_BRANCH_AT_SETTER) {
				o.setExpr(Normalize.removeEmptyBranch(o.getExpr()));
			}
			/*PROTECTED REGION END*/
		
			return o;
		}
		
		public Object caseVariableExpression(VariableExpression o) {
			o.setVarDecl((VariableDeclaration)children[0]);
		
			/*PROTECTED REGION ID(setter_expression_VariableExpression) ENABLED START*/
			/*PROTECTED REGION END*/
		
			return o;
		}
		
		public Object caseBinaryExpression(BinaryExpression o) {
			o.setLexp((Expression)children[0]);
			o.setRexp((Expression)children[1]);
		
			/*PROTECTED REGION ID(setter_expression_BinaryExpression) ENABLED START*/
			if (REMOVE_EMPTY_BRANCH_AT_SETTER) {
				o.setLexp(Normalize.removeEmptyBranch(o.getLexp()));
				o.setRexp(Normalize.removeEmptyBranch(o.getRexp()));
			}
			/*PROTECTED REGION END*/
		
			return o;
		}
		
		public Object caseExternalFunctionCall(ExternalFunctionCall o) {
			o.setExFunc((ExternalFunctionDeclaration)children[0]);
		
			/*PROTECTED REGION ID(setter_expression_ExternalFunctionCall) ENABLED START*/
			/*PROTECTED REGION END*/
		
			return o;
		}
		
		public Object caseUnaryExpression(UnaryExpression o) {
			o.setExpr((Expression)children[0]);
		
			/*PROTECTED REGION ID(setter_expression_UnaryExpression) ENABLED START*/
			/*PROTECTED REGION END*/
		
			return o;
		}
	}

	public <T> T setChildAt(T o, int i, Object obj) {
		throw new RuntimeException("Not implemented");
	}
}
