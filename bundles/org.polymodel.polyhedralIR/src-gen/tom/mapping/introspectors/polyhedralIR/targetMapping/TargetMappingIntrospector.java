package tom.mapping.introspectors.polyhedralIR.targetMapping;

import java.util.ArrayList;
import java.util.List;

import org.eclipse.emf.ecore.EObject;
import org.polymodel.polyhedralIR.AffineFunction;
import org.polymodel.polyhedralIR.VariableDeclaration;
import org.polymodel.polyhedralIR.targetMapping.CommunicatedVariableForTiledSpace;
import org.polymodel.polyhedralIR.targetMapping.MemoryMap;
import org.polymodel.polyhedralIR.targetMapping.SpaceTimeMap;
import org.polymodel.polyhedralIR.targetMapping.TargetMappingPackage;
import org.polymodel.polyhedralIR.targetMapping.UseEquationOptimization;
import org.polymodel.polyhedralIR.targetMapping.util.TargetMappingSwitch;

import tom.library.sl.Introspector;
import tom.mapping.IntrospectorManager;

/* PROTECTED REGION ID(introspector_imports) ENABLED START */
// protected imports
/* PROTECTED REGION END */

/**
* TOM introspector for polyhedralIR.
* -- Autogenerated by TOM mapping EMF genrator --
*/

public class TargetMappingIntrospector implements Introspector {
	
	public static final TargetMappingIntrospector INSTANCE = new TargetMappingIntrospector();
	
	static {
		IntrospectorManager.INSTANCE.register(TargetMappingPackage.eINSTANCE, INSTANCE);
	}

	/* PROTECTED REGION ID(introspector_members) ENABLED START */
	/* PROTECTED REGION END */
	
	protected TargetMappingIntrospector() {}
	
	public Object getChildAt(Object o, int i) {
		return getChildren(o)[i];
	}
	
	public int getChildCount(Object o) {
		return getChildren(o).length;
	}
	
	@SuppressWarnings("unchecked")
	public Object[] getChildren(Object arg0) {
		List<Object> l = new ArrayList<Object>();
		if (arg0 instanceof List) {
			// Children of a list are its content
			for(Object object : (List<Object>) arg0) {
				l.add(object);
			}
			return l.toArray();
		}
		return TargetMappingChildrenGetter.INSTANCE.children(arg0);
	}
	
	private static class TargetMappingChildrenGetter extends TargetMappingSwitch<Object[]> {
		public final static TargetMappingChildrenGetter INSTANCE = new TargetMappingChildrenGetter();
		
		private TargetMappingChildrenGetter(){}
		
		public Object[] children(Object i) {
			Object[] children = doSwitch((EObject) i);
			return children != null ? children : new Object[0];
		}
		
		public Object[] caseSpaceTimeMap(SpaceTimeMap o) {
			List<Object> l = new ArrayList<Object>();
			if (o.getMapping() != null)
				l.add(o.getMapping());
			if (o.getInverseOfMapping() != null)
				l.add(o.getInverseOfMapping());
			
			/*PROTECTED REGION ID(getter_targetMapping_SpaceTimeMap) ENABLED START*/
			/*PROTECTED REGION END*/
			
			return l.toArray();
		}
		
		public Object[] caseMemoryMap(MemoryMap o) {
			List<Object> l = new ArrayList<Object>();
			if (o.getVariable() != null)
				l.add(o.getVariable());
			if (o.getMapping() != null)
				l.add(o.getMapping());
			
			/*PROTECTED REGION ID(getter_targetMapping_MemoryMap) ENABLED START*/
			/*PROTECTED REGION END*/
			
			return l.toArray();
		}
		
		public Object[] caseUseEquationOptimization(UseEquationOptimization o) {
			List<Object> l = new ArrayList<Object>();
			if (o.getMemoryMappingForTemporaryVariable() != null)
				l.add(o.getMemoryMappingForTemporaryVariable());
			if (o.getMemoryAllocationSpaceTimeMap() != null)
				l.add(o.getMemoryAllocationSpaceTimeMap());
			if (o.getValueCopySpaceTimeMap() != null)
				l.add(o.getValueCopySpaceTimeMap());
			if (o.getMemoryFreeSpaceTimeMap() != null)
				l.add(o.getMemoryFreeSpaceTimeMap());
			
			/*PROTECTED REGION ID(getter_targetMapping_UseEquationOptimization) ENABLED START*/
			/*PROTECTED REGION END*/
			
			return l.toArray();
		}
		
		public Object[] caseCommunicatedVariableForTiledSpace(CommunicatedVariableForTiledSpace o) {
			List<Object> l = new ArrayList<Object>();
			if (o.getVariable() != null)
				l.add(o.getVariable());
			
			/*PROTECTED REGION ID(getter_targetMapping_CommunicatedVariableForTiledSpace) ENABLED START*/
			/*PROTECTED REGION END*/
			
			return l.toArray();
		}
	}
	
	@SuppressWarnings("unchecked")
	public <T> T setChildren(T arg0, Object[] arg1) {
		if (arg0 instanceof List) {
			// If object is a list then content of the original list has to be replaced
			List<Object> list = (List<Object>) arg0;
			list.clear();
			for (int i = 0; i < arg1.length; i++) {
				list.add(arg1[i]);
			}
			return arg0;
		} else {
			return (T) TargetMappingChildrenSetter.INSTANCE.set(arg0, arg1);
		}
	}
	
	private static class TargetMappingChildrenSetter extends TargetMappingSwitch<Object> {
		public final static TargetMappingChildrenSetter INSTANCE = new TargetMappingChildrenSetter();
		
		private Object[] children;
		private TargetMappingChildrenSetter(){}
		
		public Object set(Object i, Object[] children) {
			this.children = children;
			return doSwitch((EObject) i);
		}
		
		public Object caseSpaceTimeMap(SpaceTimeMap o) {
			o.setMapping((AffineFunction)children[0]);
			o.setInverseOfMapping((AffineFunction)children[1]);
		
			/*PROTECTED REGION ID(setter_targetMapping_SpaceTimeMap) ENABLED START*/
			/*PROTECTED REGION END*/
		
			return o;
		}
		
		public Object caseMemoryMap(MemoryMap o) {
			o.setVariable((VariableDeclaration)children[0]);
			o.setMapping((AffineFunction)children[1]);
		
			/*PROTECTED REGION ID(setter_targetMapping_MemoryMap) ENABLED START*/
			/*PROTECTED REGION END*/
		
			return o;
		}
		
		public Object caseUseEquationOptimization(UseEquationOptimization o) {
			o.setMemoryMappingForTemporaryVariable((AffineFunction)children[0]);
			o.setMemoryAllocationSpaceTimeMap((AffineFunction)children[1]);
			o.setValueCopySpaceTimeMap((AffineFunction)children[2]);
			o.setMemoryFreeSpaceTimeMap((AffineFunction)children[3]);
		
			/*PROTECTED REGION ID(setter_targetMapping_UseEquationOptimization) ENABLED START*/
			/*PROTECTED REGION END*/
		
			return o;
		}
		
		public Object caseCommunicatedVariableForTiledSpace(CommunicatedVariableForTiledSpace o) {
			o.setVariable((VariableDeclaration)children[0]);
		
			/*PROTECTED REGION ID(setter_targetMapping_CommunicatedVariableForTiledSpace) ENABLED START*/
			/*PROTECTED REGION END*/
		
			return o;
		}
	}

	public <T> T setChildAt(T o, int i, Object obj) {
		throw new RuntimeException("Not implemented");
	}
}
